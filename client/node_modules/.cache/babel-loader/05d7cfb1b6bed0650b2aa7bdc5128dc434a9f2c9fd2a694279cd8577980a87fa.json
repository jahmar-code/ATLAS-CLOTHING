{"ast":null,"code":"import{EmptyError}from'../util/EmptyError';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function throwIfEmpty(errorFactory){if(errorFactory===void 0){errorFactory=defaultErrorFactory;}return operate(function(source,subscriber){var hasValue=false;source.subscribe(createOperatorSubscriber(subscriber,function(value){hasValue=true;subscriber.next(value);},function(){return hasValue?subscriber.complete():subscriber.error(errorFactory());}));});}function defaultErrorFactory(){return new EmptyError();}","map":{"version":3,"names":["EmptyError","operate","createOperatorSubscriber","throwIfEmpty","errorFactory","defaultErrorFactory","source","subscriber","hasValue","subscribe","value","next","complete","error"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/throwIfEmpty.ts"],"sourcesContent":["import { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n *\n * Throw an error if the document wasn't clicked within 1 second\n *\n * ```ts\n * import { fromEvent, takeUntil, timer, throwIfEmpty } from 'rxjs';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(() => new Error('The document was not clicked within 1 second'))\n * )\n * .subscribe({\n *   next() {\n *    console.log('The document was clicked');\n *   },\n *   error(err) {\n *     console.error(err.message);\n *   }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n * @return A function that returns an Observable that throws an error if the\n * source Observable completed without emitting.\n */\nexport function throwIfEmpty<T>(errorFactory: () => any = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\n      )\n    );\n  });\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,oBAAoB,CAE/C,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAsC/D,MAAM,SAAU,CAAAC,YAAYA,CAAIC,YAA6C,EAA7C,GAAAA,YAAA,WAAAA,YAAA,CAAAC,mBAA6C,EAC3E,MAAO,CAAAJ,OAAO,CAAC,SAACK,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,QAAQ,CAAG,KAAK,CACpBF,MAAM,CAACG,SAAS,CACdP,wBAAwB,CACtBK,UAAU,CACV,SAACG,KAAK,EACJF,QAAQ,CAAG,IAAI,CACfD,UAAU,CAACI,IAAI,CAACD,KAAK,CAAC,CACxB,CAAC,CACD,WAAM,MAAC,CAAAF,QAAQ,CAAGD,UAAU,CAACK,QAAQ,EAAE,CAAGL,UAAU,CAACM,KAAK,CAACT,YAAY,EAAE,CAAC,CAApE,CAAqE,CAC5E,CACF,CACH,CAAC,CAAC,CACJ,CAEA,QAAS,CAAAC,mBAAmBA,CAAA,EAC1B,MAAO,IAAI,CAAAL,UAAU,EAAE,CACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}