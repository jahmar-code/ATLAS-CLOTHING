{"ast":null,"code":"import{EmptyError}from'./util/EmptyError';export function lastValueFrom(source,config){var hasConfig=typeof config==='object';return new Promise(function(resolve,reject){var _hasValue=false;var _value;source.subscribe({next:function next(value){_value=value;_hasValue=true;},error:reject,complete:function complete(){if(_hasValue){resolve(_value);}else if(hasConfig){resolve(config.defaultValue);}else{reject(new EmptyError());}}});});}","map":{"version":3,"names":["EmptyError","lastValueFrom","source","config","hasConfig","Promise","resolve","reject","_hasValue","_value","subscribe","next","value","error","complete","defaultValue"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/lastValueFrom.ts"],"sourcesContent":["import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\n\nexport interface LastValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function lastValueFrom<T, D>(source: Observable<T>, config: LastValueFromConfig<D>): Promise<T | D>;\nexport function lastValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * waiting for it to complete, and resolving the returned promise with the\n * last value from the observed stream.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will complete. If the source\n * observable does not complete, you will end up with a promise that is hung up, and\n * potentially all of the state of an async function hanging out in memory. To avoid\n * this situation, look into adding something like {@link timeout}, {@link take},\n * {@link takeWhile}, or {@link takeUntil} amongst others.\n *\n * ## Example\n *\n * Wait for the last value from a stream and emit it from a promise in\n * an async function\n *\n * ```ts\n * import { interval, take, lastValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000).pipe(take(10));\n *   const finalNumber = await lastValueFrom(source$);\n *   console.log(`The final number is ${ finalNumber }`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // 'The final number is 9'\n * ```\n *\n * @see {@link firstValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function lastValueFrom<T, D>(source: Observable<T>, config?: LastValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    let _hasValue = false;\n    let _value: T;\n    source.subscribe({\n      next: (value) => {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: () => {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n  });\n}\n"],"mappings":"AACA,OAASA,UAAU,KAAQ,mBAAmB,CAoD9C,MAAM,SAAU,CAAAC,aAAaA,CAAOC,MAAqB,CAAEC,MAA+B,EACxF,GAAM,CAAAC,SAAS,CAAG,MAAO,CAAAD,MAAM,GAAK,QAAQ,CAC5C,MAAO,IAAI,CAAAE,OAAO,CAAQ,SAACC,OAAO,CAAEC,MAAM,EACxC,GAAI,CAAAC,SAAS,CAAG,KAAK,CACrB,GAAI,CAAAC,MAAS,CACbP,MAAM,CAACQ,SAAS,CAAC,CACfC,IAAI,CAAE,SAAAA,KAACC,KAAK,EACVH,MAAM,CAAGG,KAAK,CACdJ,SAAS,CAAG,IAAI,CAClB,CAAC,CACDK,KAAK,CAAEN,MAAM,CACbO,QAAQ,CAAE,SAAAA,SAAA,EACR,GAAIN,SAAS,CAAE,CACbF,OAAO,CAACG,MAAM,CAAC,C,CAChB,IAAM,IAAIL,SAAS,CAAE,CACpBE,OAAO,CAACH,MAAO,CAACY,YAAY,CAAC,C,CAC9B,IAAM,CACLR,MAAM,CAAC,GAAI,CAAAP,UAAU,EAAE,CAAC,C,CAE5B,C,CACD,CAAC,CACJ,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}