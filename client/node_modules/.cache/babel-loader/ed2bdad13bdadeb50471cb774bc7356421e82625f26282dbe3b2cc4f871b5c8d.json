{"ast":null,"code":"import{innerFrom}from'../observable/innerFrom';import{operate}from'../util/lift';import{noop}from'../util/noop';import{createOperatorSubscriber}from'./OperatorSubscriber';export function sample(notifier){return operate(function(source,subscriber){var hasValue=false;var lastValue=null;source.subscribe(createOperatorSubscriber(subscriber,function(value){hasValue=true;lastValue=value;}));innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber,function(){if(hasValue){hasValue=false;var value=lastValue;lastValue=null;subscriber.next(value);}},noop));});}","map":{"version":3,"names":["innerFrom","operate","noop","createOperatorSubscriber","sample","notifier","source","subscriber","hasValue","lastValue","subscribe","value","next"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/sample.ts"],"sourcesContent":["import { innerFrom } from '../observable/innerFrom';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` `ObservableInput` emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` `ObservableInput` emits a value, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n *\n * On every click, sample the most recent `seconds` timer\n *\n * ```ts\n * import { fromEvent, interval, sample } from 'rxjs';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param notifier The `ObservableInput` to use for sampling the\n * source Observable.\n * @return A function that returns an Observable that emits the results of\n * sampling the values emitted by the source Observable whenever the notifier\n * Observable emits value or completes.\n */\nexport function sample<T>(notifier: ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        hasValue = true;\n        lastValue = value;\n      })\n    );\n    innerFrom(notifier).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          if (hasValue) {\n            hasValue = false;\n            const value = lastValue!;\n            lastValue = null;\n            subscriber.next(value);\n          }\n        },\n        noop\n      )\n    );\n  });\n}\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,yBAAyB,CAEnD,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,IAAI,KAAQ,cAAc,CACnC,OAASC,wBAAwB,KAAQ,sBAAsB,CA0C/D,MAAM,SAAU,CAAAC,MAAMA,CAAIC,QAA8B,EACtD,MAAO,CAAAJ,OAAO,CAAC,SAACK,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,QAAQ,CAAG,KAAK,CACpB,GAAI,CAAAC,SAAS,CAAa,IAAI,CAC9BH,MAAM,CAACI,SAAS,CACdP,wBAAwB,CAACI,UAAU,CAAE,SAACI,KAAK,EACzCH,QAAQ,CAAG,IAAI,CACfC,SAAS,CAAGE,KAAK,CACnB,CAAC,CAAC,CACH,CACDX,SAAS,CAACK,QAAQ,CAAC,CAACK,SAAS,CAC3BP,wBAAwB,CACtBI,UAAU,CACV,WACE,GAAIC,QAAQ,CAAE,CACZA,QAAQ,CAAG,KAAK,CAChB,GAAM,CAAAG,KAAK,CAAGF,SAAU,CACxBA,SAAS,CAAG,IAAI,CAChBF,UAAU,CAACK,IAAI,CAACD,KAAK,CAAC,C,CAE1B,CAAC,CACDT,IAAI,CACL,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}