{"ast":null,"code":"import{__read,__spreadArray}from\"tslib\";import{map}from\"../operators/map\";var isArray=Array.isArray;function callOrApply(fn,args){return isArray(args)?fn.apply(void 0,__spreadArray([],__read(args))):fn(args);}export function mapOneOrManyArgs(fn){return map(function(args){return callOrApply(fn,args);});}","map":{"version":3,"names":["map","isArray","Array","callOrApply","fn","args","apply","__spreadArray","__read","mapOneOrManyArgs"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/util/mapOneOrManyArgs.ts"],"sourcesContent":["import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}"],"mappings":"wCACA,OAASA,GAAG,KAAQ,kBAAkB,CAE9B,IAAAC,OAAO,CAAKC,KAAK,CAAAD,OAAV,CAEf,QAAS,CAAAE,WAAWA,CAAOC,EAA2B,CAAEC,IAAW,EAC/D,MAAO,CAAAJ,OAAO,CAACI,IAAI,CAAC,CAAGD,EAAE,CAAAE,KAAA,QAAAC,aAAA,IAAAC,MAAA,CAAIH,IAAI,IAAID,EAAE,CAACC,IAAI,CAAC,CACjD,CAMA,MAAM,SAAU,CAAAI,gBAAgBA,CAAOL,EAA2B,EAC9D,MAAO,CAAAJ,GAAG,CAAC,SAAAK,IAAI,EAAI,OAAAF,WAAW,CAACC,EAAE,CAAEC,IAAI,CAAC,CAArB,CAAqB,CAAC,CAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}