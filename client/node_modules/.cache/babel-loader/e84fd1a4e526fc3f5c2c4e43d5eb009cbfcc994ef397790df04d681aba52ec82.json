{"ast":null,"code":"import{operate}from'../util/lift';import{noop}from'../util/noop';import{createOperatorSubscriber}from'./OperatorSubscriber';import{innerFrom}from'../observable/innerFrom';export function bufferWhen(closingSelector){return operate(function(source,subscriber){var buffer=null;var closingSubscriber=null;var openBuffer=function openBuffer(){closingSubscriber===null||closingSubscriber===void 0?void 0:closingSubscriber.unsubscribe();var b=buffer;buffer=[];b&&subscriber.next(b);innerFrom(closingSelector()).subscribe(closingSubscriber=createOperatorSubscriber(subscriber,openBuffer,noop));};openBuffer();source.subscribe(createOperatorSubscriber(subscriber,function(value){return buffer===null||buffer===void 0?void 0:buffer.push(value);},function(){buffer&&subscriber.next(buffer);subscriber.complete();},undefined,function(){return buffer=closingSubscriber=null;}));});}","map":{"version":3,"names":["operate","noop","createOperatorSubscriber","innerFrom","bufferWhen","closingSelector","source","subscriber","buffer","closingSubscriber","openBuffer","unsubscribe","b","next","subscribe","value","push","complete","undefined"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/bufferWhen.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * ![](bufferWhen.svg)\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * ## Example\n *\n * Emit an array of the last clicks every [1-5] random seconds\n *\n * ```ts\n * import { fromEvent, bufferWhen, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(\n *   bufferWhen(() => interval(1000 + Math.random() * 4000))\n * );\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferWhen<T>(closingSelector: () => ObservableInput<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The buffer we keep and emit.\n    let buffer: T[] | null = null;\n    // A reference to the subscriber used to subscribe to\n    // the closing notifier. We need to hold this so we can\n    // end the subscription after the first notification.\n    let closingSubscriber: Subscriber<T> | null = null;\n\n    // Ends the previous closing notifier subscription, so it\n    // terminates after the first emission, then emits\n    // the current buffer  if there is one, starts a new buffer, and starts a\n    // new closing notifier.\n    const openBuffer = () => {\n      // Make sure to finalize the closing subscription, we only cared\n      // about one notification.\n      closingSubscriber?.unsubscribe();\n      // emit the buffer if we have one, and start a new buffer.\n      const b = buffer;\n      buffer = [];\n      b && subscriber.next(b);\n\n      // Get a new closing notifier and subscribe to it.\n      innerFrom(closingSelector()).subscribe((closingSubscriber = createOperatorSubscriber(subscriber, openBuffer, noop)));\n    };\n\n    // Start the first buffer.\n    openBuffer();\n\n    // Subscribe to our source.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        // Add every new value to the current buffer.\n        (value) => buffer?.push(value),\n        // When we complete, emit the buffer if we have one,\n        // then complete the result.\n        () => {\n          buffer && subscriber.next(buffer);\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        // Release memory on finalization\n        () => (buffer = closingSubscriber = null!)\n      )\n    );\n  });\n}\n"],"mappings":"AAEA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,IAAI,KAAQ,cAAc,CACnC,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,SAAS,KAAQ,yBAAyB,CAwCnD,MAAM,SAAU,CAAAC,UAAUA,CAAIC,eAA2C,EACvE,MAAO,CAAAL,OAAO,CAAC,SAACM,MAAM,CAAEC,UAAU,EAEhC,GAAI,CAAAC,MAAM,CAAe,IAAI,CAI7B,GAAI,CAAAC,iBAAiB,CAAyB,IAAI,CAMlD,GAAM,CAAAC,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAA,CAAG,CAGjBD,iBAAiB,SAAjBA,iBAAiB,iBAAjBA,iBAAiB,CAAEE,WAAW,EAAE,CAEhC,GAAM,CAAAC,CAAC,CAAGJ,MAAM,CAChBA,MAAM,CAAG,EAAE,CACXI,CAAC,EAAIL,UAAU,CAACM,IAAI,CAACD,CAAC,CAAC,CAGvBT,SAAS,CAACE,eAAe,EAAE,CAAC,CAACS,SAAS,CAAEL,iBAAiB,CAAGP,wBAAwB,CAACK,UAAU,CAAEG,UAAU,CAAET,IAAI,CAAE,CAAC,CACtH,CAAC,CAGDS,UAAU,EAAE,CAGZJ,MAAM,CAACQ,SAAS,CACdZ,wBAAwB,CACtBK,UAAU,CAEV,SAACQ,KAAK,EAAK,OAAAP,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEQ,IAAI,CAACD,KAAK,CAAC,CAAnB,CAAmB,CAG9B,WACEP,MAAM,EAAID,UAAU,CAACM,IAAI,CAACL,MAAM,CAAC,CACjCD,UAAU,CAACU,QAAQ,EAAE,CACvB,CAAC,CAEDC,SAAS,CAET,WAAM,MAAC,CAAAV,MAAM,CAAGC,iBAAiB,CAAG,IAAK,CAAnC,CAAoC,CAC3C,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}