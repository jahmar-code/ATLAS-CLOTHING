{"ast":null,"code":"import{Observable}from'../Observable';import{innerFrom}from'./innerFrom';import{argsOrArgArray}from'../util/argsOrArgArray';import{createOperatorSubscriber}from'../operators/OperatorSubscriber';export function race(){var sources=[];for(var _i=0;_i<arguments.length;_i++){sources[_i]=arguments[_i];}sources=argsOrArgArray(sources);return sources.length===1?innerFrom(sources[0]):new Observable(raceInit(sources));}export function raceInit(sources){return function(subscriber){var subscriptions=[];var _loop_1=function _loop_1(i){subscriptions.push(innerFrom(sources[i]).subscribe(createOperatorSubscriber(subscriber,function(value){if(subscriptions){for(var s=0;s<subscriptions.length;s++){s!==i&&subscriptions[s].unsubscribe();}subscriptions=null;}subscriber.next(value);})));};for(var i=0;subscriptions&&!subscriber.closed&&i<sources.length;i++){_loop_1(i);}};}","map":{"version":3,"names":["Observable","innerFrom","argsOrArgArray","createOperatorSubscriber","race","sources","_i","arguments","length","raceInit","subscriber","subscriptions","i","push","subscribe","value","s","unsubscribe","next","closed"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/observable/race.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, ObservableInputTuple } from '../types';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { Subscriber } from '../Subscriber';\n\nexport function race<T extends readonly unknown[]>(inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function race<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\n\n/**\n * Returns an observable that mirrors the first source observable to emit an item.\n *\n * ![](race.png)\n *\n * `race` returns an observable, that when subscribed to, subscribes to all source observables immediately.\n * As soon as one of the source observables emits a value, the result unsubscribes from the other sources.\n * The resulting observable will forward all notifications, including error and completion, from the \"winning\"\n * source observable.\n *\n * If one of the used source observable throws an errors before a first notification\n * the race operator will also throw an error, no matter if another source observable\n * could potentially win the race.\n *\n * `race` can be useful for selecting the response from the fastest network connection for\n * HTTP or WebSockets. `race` can also be useful for switching observable context based on user\n * input.\n *\n * ## Example\n *\n * Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { interval, map, race } from 'rxjs';\n *\n * const obs1 = interval(7000).pipe(map(() => 'slow one'));\n * const obs2 = interval(3000).pipe(map(() => 'fast one'));\n * const obs3 = interval(5000).pipe(map(() => 'medium one'));\n *\n * race(obs1, obs2, obs3)\n *   .subscribe(winner => console.log(winner));\n *\n * // Outputs\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n */\nexport function race<T>(...sources: (ObservableInput<T> | ObservableInput<T>[])[]): Observable<any> {\n  sources = argsOrArgArray(sources);\n  // If only one source was passed, just return it. Otherwise return the race.\n  return sources.length === 1 ? innerFrom(sources[0] as ObservableInput<T>) : new Observable<T>(raceInit(sources as ObservableInput<T>[]));\n}\n\n/**\n * An observable initializer function for both the static version and the\n * operator version of race.\n * @param sources The sources to race\n */\nexport function raceInit<T>(sources: ObservableInput<T>[]) {\n  return (subscriber: Subscriber<T>) => {\n    let subscriptions: Subscription[] = [];\n\n    // Subscribe to all of the sources. Note that we are checking `subscriptions` here\n    // Is is an array of all actively \"racing\" subscriptions, and it is `null` after the\n    // race has been won. So, if we have racer that synchronously \"wins\", this loop will\n    // stop before it subscribes to any more.\n    for (let i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n      subscriptions.push(\n        innerFrom(sources[i] as ObservableInput<T>).subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            if (subscriptions) {\n              // We're still racing, but we won! So unsubscribe\n              // all other subscriptions that we have, except this one.\n              for (let s = 0; s < subscriptions.length; s++) {\n                s !== i && subscriptions[s].unsubscribe();\n              }\n              subscriptions = null!;\n            }\n            subscriber.next(value);\n          })\n        )\n      );\n    }\n  };\n}\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,eAAe,CAC1C,OAASC,SAAS,KAAQ,aAAa,CAGvC,OAASC,cAAc,KAAQ,wBAAwB,CACvD,OAASC,wBAAwB,KAAQ,iCAAiC,CA6C1E,MAAM,SAAU,CAAAC,IAAIA,CAAA,EAAI,IAAAC,OAAA,I,IAAA,IAAAC,EAAA,EAAyD,CAAzDA,EAAA,CAAAC,SAAA,CAAAC,MAAyD,CAAzDF,EAAA,EAAyD,EAAzDD,OAAA,CAAAC,EAAA,EAAAC,SAAA,CAAAD,EAAA,E,CACtBD,OAAO,CAAGH,cAAc,CAACG,OAAO,CAAC,CAEjC,MAAO,CAAAA,OAAO,CAACG,MAAM,GAAK,CAAC,CAAGP,SAAS,CAACI,OAAO,CAAC,CAAC,CAAuB,CAAC,CAAG,GAAI,CAAAL,UAAU,CAAIS,QAAQ,CAACJ,OAA+B,CAAC,CAAC,CAC1I,CAOA,MAAM,SAAU,CAAAI,QAAQA,CAAIJ,OAA6B,EACvD,MAAO,UAACK,UAAyB,EAC/B,GAAI,CAAAC,aAAa,CAAmB,EAAE,C,6BAM7BC,CAAC,EACRD,aAAa,CAACE,IAAI,CAChBZ,SAAS,CAACI,OAAO,CAACO,CAAC,CAAuB,CAAC,CAACE,SAAS,CACnDX,wBAAwB,CAACO,UAAU,CAAE,SAACK,KAAK,EACzC,GAAIJ,aAAa,CAAE,CAGjB,IAAK,GAAI,CAAAK,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGL,aAAa,CAACH,MAAM,CAAEQ,CAAC,EAAE,CAAE,CAC7CA,CAAC,GAAKJ,CAAC,EAAID,aAAa,CAACK,CAAC,CAAC,CAACC,WAAW,EAAE,C,CAE3CN,aAAa,CAAG,IAAK,C,CAEvBD,UAAU,CAACQ,IAAI,CAACH,KAAK,CAAC,CACxB,CAAC,CAAC,CACH,CACF,C,EAfH,IAAK,GAAI,CAAAH,CAAC,CAAG,CAAC,CAAED,aAAa,EAAI,CAACD,UAAU,CAACS,MAAM,EAAIP,CAAC,CAAGP,OAAO,CAACG,MAAM,CAAEI,CAAC,EAAE,E,QAArEA,CAAC,E,CAiBZ,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}