{"ast":null,"code":"import{createOperatorSubscriber}from'./OperatorSubscriber';export function scanInternals(accumulator,seed,hasSeed,emitOnNext,emitBeforeComplete){return function(source,subscriber){var hasState=hasSeed;var state=seed;var index=0;source.subscribe(createOperatorSubscriber(subscriber,function(value){var i=index++;state=hasState?accumulator(state,value,i):(hasState=true,value);emitOnNext&&subscriber.next(state);},emitBeforeComplete&&function(){hasState&&subscriber.next(state);subscriber.complete();}));};}","map":{"version":3,"names":["createOperatorSubscriber","scanInternals","accumulator","seed","hasSeed","emitOnNext","emitBeforeComplete","source","subscriber","hasState","state","index","subscribe","value","i","next","complete"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/scanInternals.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A basic scan operation. This is used for `scan` and `reduce`.\n * @param accumulator The accumulator to use\n * @param seed The seed value for the state to accumulate\n * @param hasSeed Whether or not a seed was provided\n * @param emitOnNext Whether or not to emit the state on next\n * @param emitBeforeComplete Whether or not to emit the before completion\n */\n\nexport function scanInternals<V, A, S>(\n  accumulator: (acc: V | A | S, value: V, index: number) => A,\n  seed: S,\n  hasSeed: boolean,\n  emitOnNext: boolean,\n  emitBeforeComplete?: undefined | true\n) {\n  return (source: Observable<V>, subscriber: Subscriber<any>) => {\n    // Whether or not we have state yet. This will only be\n    // false before the first value arrives if we didn't get\n    // a seed value.\n    let hasState = hasSeed;\n    // The state that we're tracking, starting with the seed,\n    // if there is one, and then updated by the return value\n    // from the accumulator on each emission.\n    let state: any = seed;\n    // An index to pass to the accumulator function.\n    let index = 0;\n\n    // Subscribe to our source. All errors and completions are passed through.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Always increment the index.\n          const i = index++;\n          // Set the state\n          state = hasState\n            ? // We already have state, so we can get the new state from the accumulator\n              accumulator(state, value, i)\n            : // We didn't have state yet, a seed value was not provided, so\n\n              // we set the state to the first value, and mark that we have state now\n              ((hasState = true), value);\n\n          // Maybe send it to the consumer.\n          emitOnNext && subscriber.next(state);\n        },\n        // If an onComplete was given, call it, otherwise\n        // just pass through the complete notification to the consumer.\n        emitBeforeComplete &&\n          (() => {\n            hasState && subscriber.next(state);\n            subscriber.complete();\n          })\n      )\n    );\n  };\n}\n"],"mappings":"AAEA,OAASA,wBAAwB,KAAQ,sBAAsB,CAW/D,MAAM,SAAU,CAAAC,aAAaA,CAC3BC,WAA2D,CAC3DC,IAAO,CACPC,OAAgB,CAChBC,UAAmB,CACnBC,kBAAqC,EAErC,MAAO,UAACC,MAAqB,CAAEC,UAA2B,EAIxD,GAAI,CAAAC,QAAQ,CAAGL,OAAO,CAItB,GAAI,CAAAM,KAAK,CAAQP,IAAI,CAErB,GAAI,CAAAQ,KAAK,CAAG,CAAC,CAGbJ,MAAM,CAACK,SAAS,CACdZ,wBAAwB,CACtBQ,UAAU,CACV,SAACK,KAAK,EAEJ,GAAM,CAAAC,CAAC,CAAGH,KAAK,EAAE,CAEjBD,KAAK,CAAGD,QAAQ,CAEZP,WAAW,CAACQ,KAAK,CAAEG,KAAK,CAAEC,CAAC,CAAC,EAI1BL,QAAQ,CAAG,IAAI,CAAGI,KAAK,CAAC,CAG9BR,UAAU,EAAIG,UAAU,CAACO,IAAI,CAACL,KAAK,CAAC,CACtC,CAAC,CAGDJ,kBAAkB,EACf,WACCG,QAAQ,EAAID,UAAU,CAACO,IAAI,CAACL,KAAK,CAAC,CAClCF,UAAU,CAACQ,QAAQ,EAAE,CACvB,CAAE,CACL,CACF,CACH,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}