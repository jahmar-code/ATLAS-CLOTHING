{"ast":null,"code":"import{Notification}from'../Notification';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function materialize(){return operate(function(source,subscriber){source.subscribe(createOperatorSubscriber(subscriber,function(value){subscriber.next(Notification.createNext(value));},function(){subscriber.next(Notification.createComplete());subscriber.complete();},function(err){subscriber.next(Notification.createError(err));subscriber.complete();}));});}","map":{"version":3,"names":["Notification","operate","createOperatorSubscriber","materialize","source","subscriber","subscribe","value","next","createNext","createComplete","complete","err","createError"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/materialize.ts"],"sourcesContent":["import { Notification } from '../Notification';\nimport { OperatorFunction, ObservableNotification } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * ![](materialize.png)\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * ## Example\n *\n * Convert a faulty Observable to an Observable of Notifications\n *\n * ```ts\n * import { of, materialize, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 13, 'd');\n * const upperCase = letters.pipe(map((x: any) => x.toUpperCase()));\n * const materialized = upperCase.pipe(materialize());\n *\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification { kind: 'N', value: 'A', error: undefined, hasValue: true }\n * // - Notification { kind: 'N', value: 'B', error: undefined, hasValue: true }\n * // - Notification { kind: 'E', value: undefined, error: TypeError { message: x.toUpperCase is not a function }, hasValue: false }\n * ```\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return A function that returns an Observable that emits\n * {@link Notification} objects that wrap the original emissions from the\n * source Observable with metadata.\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T> & ObservableNotification<T>> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          subscriber.next(Notification.createNext(value));\n        },\n        () => {\n          subscriber.next(Notification.createComplete());\n          subscriber.complete();\n        },\n        (err) => {\n          subscriber.next(Notification.createError(err));\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,iBAAiB,CAE9C,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAkD/D,MAAM,SAAU,CAAAC,WAAWA,CAAA,EACzB,MAAO,CAAAF,OAAO,CAAC,SAACG,MAAM,CAAEC,UAAU,EAChCD,MAAM,CAACE,SAAS,CACdJ,wBAAwB,CACtBG,UAAU,CACV,SAACE,KAAK,EACJF,UAAU,CAACG,IAAI,CAACR,YAAY,CAACS,UAAU,CAACF,KAAK,CAAC,CAAC,CACjD,CAAC,CACD,WACEF,UAAU,CAACG,IAAI,CAACR,YAAY,CAACU,cAAc,EAAE,CAAC,CAC9CL,UAAU,CAACM,QAAQ,EAAE,CACvB,CAAC,CACD,SAACC,GAAG,EACFP,UAAU,CAACG,IAAI,CAACR,YAAY,CAACa,WAAW,CAACD,GAAG,CAAC,CAAC,CAC9CP,UAAU,CAACM,QAAQ,EAAE,CACvB,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}