{"ast":null,"code":"import{__values}from\"tslib\";import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';import{arrRemove}from'../util/arrRemove';export function bufferCount(bufferSize,startBufferEvery){if(startBufferEvery===void 0){startBufferEvery=null;}startBufferEvery=startBufferEvery!==null&&startBufferEvery!==void 0?startBufferEvery:bufferSize;return operate(function(source,subscriber){var buffers=[];var count=0;source.subscribe(createOperatorSubscriber(subscriber,function(value){var e_1,_a,e_2,_b;var toEmit=null;if(count++%startBufferEvery===0){buffers.push([]);}try{for(var buffers_1=__values(buffers),buffers_1_1=buffers_1.next();!buffers_1_1.done;buffers_1_1=buffers_1.next()){var buffer=buffers_1_1.value;buffer.push(value);if(bufferSize<=buffer.length){toEmit=toEmit!==null&&toEmit!==void 0?toEmit:[];toEmit.push(buffer);}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(buffers_1_1&&!buffers_1_1.done&&(_a=buffers_1.return))_a.call(buffers_1);}finally{if(e_1)throw e_1.error;}}if(toEmit){try{for(var toEmit_1=__values(toEmit),toEmit_1_1=toEmit_1.next();!toEmit_1_1.done;toEmit_1_1=toEmit_1.next()){var buffer=toEmit_1_1.value;arrRemove(buffers,buffer);subscriber.next(buffer);}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(toEmit_1_1&&!toEmit_1_1.done&&(_b=toEmit_1.return))_b.call(toEmit_1);}finally{if(e_2)throw e_2.error;}}}},function(){var e_3,_a;try{for(var buffers_2=__values(buffers),buffers_2_1=buffers_2.next();!buffers_2_1.done;buffers_2_1=buffers_2.next()){var buffer=buffers_2_1.value;subscriber.next(buffer);}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(buffers_2_1&&!buffers_2_1.done&&(_a=buffers_2.return))_a.call(buffers_2);}finally{if(e_3)throw e_3.error;}}subscriber.complete();},undefined,function(){buffers=null;}));});}","map":{"version":3,"names":["operate","createOperatorSubscriber","arrRemove","bufferCount","bufferSize","startBufferEvery","source","subscriber","buffers","count","subscribe","value","toEmit","push","buffers_1","__values","buffers_1_1","next","done","buffer","length","toEmit_1","toEmit_1_1","buffers_2","buffers_2_1","complete","undefined"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/bufferCount.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * ![](bufferCount.png)\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * ## Examples\n *\n * Emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent, bufferCount } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * On every click, emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent, bufferCount } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2, 1));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number | null = null): OperatorFunction<T, T[]> {\n  // If no `startBufferEvery` value was supplied, then we're\n  // opening and closing on the bufferSize itself.\n  startBufferEvery = startBufferEvery ?? bufferSize;\n\n  return operate((source, subscriber) => {\n    let buffers: T[][] = [];\n    let count = 0;\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          let toEmit: T[][] | null = null;\n\n          // Check to see if we need to start a buffer.\n          // This will start one at the first value, and then\n          // a new one every N after that.\n          if (count++ % startBufferEvery! === 0) {\n            buffers.push([]);\n          }\n\n          // Push our value into our active buffers.\n          for (const buffer of buffers) {\n            buffer.push(value);\n            // Check to see if we're over the bufferSize\n            // if we are, record it so we can emit it later.\n            // If we emitted it now and removed it, it would\n            // mutate the `buffers` array while we're looping\n            // over it.\n            if (bufferSize <= buffer.length) {\n              toEmit = toEmit ?? [];\n              toEmit.push(buffer);\n            }\n          }\n\n          if (toEmit) {\n            // We have found some buffers that are over the\n            // `bufferSize`. Emit them, and remove them from our\n            // buffers list.\n            for (const buffer of toEmit) {\n              arrRemove(buffers, buffer);\n              subscriber.next(buffer);\n            }\n          }\n        },\n        () => {\n          // When the source completes, emit all of our\n          // active buffers.\n          for (const buffer of buffers) {\n            subscriber.next(buffer);\n          }\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        () => {\n          // Clean up our memory when we finalize\n          buffers = null!;\n        }\n      )\n    );\n  });\n}\n"],"mappings":"4BACA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,SAAS,KAAQ,mBAAmB,CAqD7C,MAAM,SAAU,CAAAC,WAAWA,CAAIC,UAAkB,CAAEC,gBAAsC,EAAtC,GAAAA,gBAAA,WAAAA,gBAAA,KAAsC,EAGvFA,gBAAgB,CAAGA,gBAAgB,SAAhBA,gBAAgB,UAAhBA,gBAAgB,CAAID,UAAU,CAEjD,MAAO,CAAAJ,OAAO,CAAC,SAACM,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,OAAO,CAAU,EAAE,CACvB,GAAI,CAAAC,KAAK,CAAG,CAAC,CAEbH,MAAM,CAACI,SAAS,CACdT,wBAAwB,CACtBM,UAAU,CACV,SAACI,KAAK,E,kBACJ,GAAI,CAAAC,MAAM,CAAiB,IAAI,CAK/B,GAAIH,KAAK,EAAE,CAAGJ,gBAAiB,GAAK,CAAC,CAAE,CACrCG,OAAO,CAACK,IAAI,CAAC,EAAE,CAAC,C,KAIlB,IAAqB,IAAAC,SAAA,CAAAC,QAAA,CAAAP,OAAO,EAAAQ,WAAA,CAAAF,SAAA,CAAAG,IAAA,IAAAD,WAAA,CAAAE,IAAA,CAAAF,WAAA,CAAAF,SAAA,CAAAG,IAAA,GAAE,CAAzB,GAAM,CAAAE,MAAM,CAAAH,WAAA,CAAAL,KAAA,CACfQ,MAAM,CAACN,IAAI,CAACF,KAAK,CAAC,CAMlB,GAAIP,UAAU,EAAIe,MAAM,CAACC,MAAM,CAAE,CAC/BR,MAAM,CAAGA,MAAM,SAANA,MAAM,UAANA,MAAM,CAAI,EAAE,CACrBA,MAAM,CAACC,IAAI,CAACM,MAAM,CAAC,C,6JAIvB,GAAIP,MAAM,CAAE,C,IAIV,IAAqB,IAAAS,QAAA,CAAAN,QAAA,CAAAH,MAAM,EAAAU,UAAA,CAAAD,QAAA,CAAAJ,IAAA,IAAAK,UAAA,CAAAJ,IAAA,CAAAI,UAAA,CAAAD,QAAA,CAAAJ,IAAA,GAAE,CAAxB,GAAM,CAAAE,MAAM,CAAAG,UAAA,CAAAX,KAAA,CACfT,SAAS,CAACM,OAAO,CAAEW,MAAM,CAAC,CAC1BZ,UAAU,CAACU,IAAI,CAACE,MAAM,CAAC,C,yJAG7B,CAAC,CACD,W,eAGE,IAAqB,IAAAI,SAAA,CAAAR,QAAA,CAAAP,OAAO,EAAAgB,WAAA,CAAAD,SAAA,CAAAN,IAAA,IAAAO,WAAA,CAAAN,IAAA,CAAAM,WAAA,CAAAD,SAAA,CAAAN,IAAA,GAAE,CAAzB,GAAM,CAAAE,MAAM,CAAAK,WAAA,CAAAb,KAAA,CACfJ,UAAU,CAACU,IAAI,CAACE,MAAM,CAAC,C,4JAEzBZ,UAAU,CAACkB,QAAQ,EAAE,CACvB,CAAC,CAEDC,SAAS,CACT,WAEElB,OAAO,CAAG,IAAK,CACjB,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}