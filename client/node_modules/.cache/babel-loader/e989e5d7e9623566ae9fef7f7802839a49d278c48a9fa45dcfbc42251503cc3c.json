{"ast":null,"code":"import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';import{innerFrom}from'../observable/innerFrom';export function throttle(durationSelector,config){return operate(function(source,subscriber){var _a=config!==null&&config!==void 0?config:{},_b=_a.leading,leading=_b===void 0?true:_b,_c=_a.trailing,trailing=_c===void 0?false:_c;var hasValue=false;var sendValue=null;var throttled=null;var isComplete=false;var endThrottling=function endThrottling(){throttled===null||throttled===void 0?void 0:throttled.unsubscribe();throttled=null;if(trailing){send();isComplete&&subscriber.complete();}};var cleanupThrottling=function cleanupThrottling(){throttled=null;isComplete&&subscriber.complete();};var startThrottle=function startThrottle(value){return throttled=innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber,endThrottling,cleanupThrottling));};var send=function send(){if(hasValue){hasValue=false;var value=sendValue;sendValue=null;subscriber.next(value);!isComplete&&startThrottle(value);}};source.subscribe(createOperatorSubscriber(subscriber,function(value){hasValue=true;sendValue=value;!(throttled&&!throttled.closed)&&(leading?send():startThrottle(value));},function(){isComplete=true;!(trailing&&hasValue&&throttled&&!throttled.closed)&&subscriber.complete();}));});}","map":{"version":3,"names":["operate","createOperatorSubscriber","innerFrom","throttle","durationSelector","config","source","subscriber","_a","_b","leading","_c","trailing","hasValue","sendValue","throttled","isComplete","endThrottling","unsubscribe","send","complete","cleanupThrottling","startThrottle","value","subscribe","next","closed"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/throttle.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * An object interface used by {@link throttle} or {@link throttleTime} that ensure\n * configuration options of these operators.\n *\n * @see {@link throttle}\n * @see {@link throttleTime}\n */\nexport interface ThrottleConfig {\n  /**\n   * If `true`, the resulting Observable will emit the first value from the source\n   * Observable at the **start** of the \"throttling\" process (when starting an\n   * internal timer that prevents other emissions from the source to pass through).\n   * If `false`, it will not emit the first value from the source Observable at the\n   * start of the \"throttling\" process.\n   *\n   * If not provided, defaults to: `true`.\n   */\n  leading?: boolean;\n  /**\n   * If `true`, the resulting Observable will emit the last value from the source\n   * Observable at the **end** of the \"throttling\" process (when ending an internal\n   * timer that prevents other emissions from the source to pass through).\n   * If `false`, it will not emit the last value from the source Observable at the\n   * end of the \"throttling\" process.\n   *\n   * If not provided, defaults to: `false`.\n   */\n  trailing?: boolean;\n}\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.svg)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, throttle, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(() => interval(1000)));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param durationSelector A function that receives a value from the source\n * Observable, for computing the silencing duration for each source value,\n * returned as an `ObservableInput`.\n * @param config A configuration object to define `leading` and `trailing`\n * behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return A function that returns an Observable that performs the throttle\n * operation to limit the rate of emissions from the source.\n */\nexport function throttle<T>(durationSelector: (value: T) => ObservableInput<any>, config?: ThrottleConfig): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    const { leading = true, trailing = false } = config ?? {};\n    let hasValue = false;\n    let sendValue: T | null = null;\n    let throttled: Subscription | null = null;\n    let isComplete = false;\n\n    const endThrottling = () => {\n      throttled?.unsubscribe();\n      throttled = null;\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n\n    const cleanupThrottling = () => {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n\n    const startThrottle = (value: T) =>\n      (throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\n\n    const send = () => {\n      if (hasValue) {\n        // Ensure we clear out our value and hasValue flag\n        // before we emit, otherwise reentrant code can cause\n        // issues here.\n        hasValue = false;\n        const value = sendValue!;\n        sendValue = null;\n        // Emit the value.\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        // Regarding the presence of throttled.closed in the following\n        // conditions, if a synchronous duration selector is specified - weird,\n        // but legal - an already-closed subscription will be assigned to\n        // throttled, so the subscription's closed property needs to be checked,\n        // too.\n        (value) => {\n          hasValue = true;\n          sendValue = value;\n          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n        },\n        () => {\n          isComplete = true;\n          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"],"mappings":"AAGA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,SAAS,KAAQ,yBAAyB,CA8EnD,MAAM,SAAU,CAAAC,QAAQA,CAAIC,gBAAoD,CAAEC,MAAuB,EACvG,MAAO,CAAAL,OAAO,CAAC,SAACM,MAAM,CAAEC,UAAU,EAC1B,IAAAC,EAAA,CAAuCH,MAAM,SAANA,MAAM,UAANA,MAAM,CAAI,EAAE,CAAjDI,EAAA,CAAAD,EAAA,CAAAE,OAAc,CAAdA,OAAO,CAAAD,EAAA,UAAG,IAAI,CAAAA,EAAA,CAAEE,EAAA,CAAAH,EAAA,CAAAI,QAAgB,CAAhBA,QAAQ,CAAAD,EAAA,UAAG,KAAK,CAAAA,EAAiB,CACzD,GAAI,CAAAE,QAAQ,CAAG,KAAK,CACpB,GAAI,CAAAC,SAAS,CAAa,IAAI,CAC9B,GAAI,CAAAC,SAAS,CAAwB,IAAI,CACzC,GAAI,CAAAC,UAAU,CAAG,KAAK,CAEtB,GAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAA,CAAG,CACpBF,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAEG,WAAW,EAAE,CACxBH,SAAS,CAAG,IAAI,CAChB,GAAIH,QAAQ,CAAE,CACZO,IAAI,EAAE,CACNH,UAAU,EAAIT,UAAU,CAACa,QAAQ,EAAE,C,CAEvC,CAAC,CAED,GAAM,CAAAC,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAA,CAAG,CACxBN,SAAS,CAAG,IAAI,CAChBC,UAAU,EAAIT,UAAU,CAACa,QAAQ,EAAE,CACrC,CAAC,CAED,GAAM,CAAAE,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAIC,KAAQ,EAC7B,MAAC,CAAAR,SAAS,CAAGb,SAAS,CAACE,gBAAgB,CAACmB,KAAK,CAAC,CAAC,CAACC,SAAS,CAACvB,wBAAwB,CAACM,UAAU,CAAEU,aAAa,CAAEI,iBAAiB,CAAC,CAAC,CAAjI,CAAkI,CAEpI,GAAM,CAAAF,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAA,CAAG,CACX,GAAIN,QAAQ,CAAE,CAIZA,QAAQ,CAAG,KAAK,CAChB,GAAM,CAAAU,KAAK,CAAGT,SAAU,CACxBA,SAAS,CAAG,IAAI,CAEhBP,UAAU,CAACkB,IAAI,CAACF,KAAK,CAAC,CACtB,CAACP,UAAU,EAAIM,aAAa,CAACC,KAAK,CAAC,C,CAEvC,CAAC,CAEDjB,MAAM,CAACkB,SAAS,CACdvB,wBAAwB,CACtBM,UAAU,CAMV,SAACgB,KAAK,EACJV,QAAQ,CAAG,IAAI,CACfC,SAAS,CAAGS,KAAK,CACjB,EAAER,SAAS,EAAI,CAACA,SAAS,CAACW,MAAM,CAAC,GAAKhB,OAAO,CAAGS,IAAI,EAAE,CAAGG,aAAa,CAACC,KAAK,CAAC,CAAC,CAChF,CAAC,CACD,WACEP,UAAU,CAAG,IAAI,CACjB,EAAEJ,QAAQ,EAAIC,QAAQ,EAAIE,SAAS,EAAI,CAACA,SAAS,CAACW,MAAM,CAAC,EAAInB,UAAU,CAACa,QAAQ,EAAE,CACpF,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}