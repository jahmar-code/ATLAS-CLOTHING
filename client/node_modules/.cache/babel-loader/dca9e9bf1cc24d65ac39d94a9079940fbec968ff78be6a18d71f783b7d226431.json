{"ast":null,"code":"import{EmptyError}from'../util/EmptyError';import{SequenceError}from'../util/SequenceError';import{NotFoundError}from'../util/NotFoundError';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function single(predicate){return operate(function(source,subscriber){var hasValue=false;var singleValue;var seenValue=false;var index=0;source.subscribe(createOperatorSubscriber(subscriber,function(value){seenValue=true;if(!predicate||predicate(value,index++,source)){hasValue&&subscriber.error(new SequenceError('Too many matching values'));hasValue=true;singleValue=value;}},function(){if(hasValue){subscriber.next(singleValue);subscriber.complete();}else{subscriber.error(seenValue?new NotFoundError('No matching values'):new EmptyError());}}));});}","map":{"version":3,"names":["EmptyError","SequenceError","NotFoundError","operate","createOperatorSubscriber","single","predicate","source","subscriber","hasValue","singleValue","seenValue","index","subscribe","value","error","next","complete"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/single.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\n\nimport { MonoTypeOperatorFunction, OperatorFunction, TruthyTypesOf } from '../types';\nimport { SequenceError } from '../util/SequenceError';\nimport { NotFoundError } from '../util/NotFoundError';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function single<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an observable that asserts that only one value is\n * emitted from the observable that matches the predicate. If no\n * predicate is provided, then it will assert that the observable\n * only emits one value.\n *\n * In the event that the observable is empty, it will throw an\n * {@link EmptyError}.\n *\n * In the event that two values are found that match the predicate,\n * or when there are two values emitted and no predicate, it will\n * throw a {@link SequenceError}\n *\n * In the event that no values match the predicate, if one is provided,\n * it will throw a {@link NotFoundError}\n *\n * ## Example\n *\n * Expect only `name` beginning with `'B'`\n *\n * ```ts\n * import { of, single } from 'rxjs';\n *\n * const source1 = of(\n *  { name: 'Ben' },\n *  { name: 'Tracy' },\n *  { name: 'Laney' },\n *  { name: 'Lily' }\n * );\n *\n * source1\n *   .pipe(single(x => x.name.startsWith('B')))\n *   .subscribe(x => console.log(x));\n * // Emits 'Ben'\n *\n *\n * const source2 = of(\n *  { name: 'Ben' },\n *  { name: 'Tracy' },\n *  { name: 'Bradley' },\n *  { name: 'Lincoln' }\n * );\n *\n * source2\n *   .pipe(single(x => x.name.startsWith('B')))\n *   .subscribe({ error: err => console.error(err) });\n * // Error emitted: SequenceError('Too many values match')\n *\n *\n * const source3 = of(\n *  { name: 'Laney' },\n *  { name: 'Tracy' },\n *  { name: 'Lily' },\n *  { name: 'Lincoln' }\n * );\n *\n * source3\n *   .pipe(single(x => x.name.startsWith('B')))\n *   .subscribe({ error: err => console.error(err) });\n * // Error emitted: NotFoundError('No values match')\n * ```\n *\n * @see {@link first}\n * @see {@link find}\n * @see {@link findIndex}\n * @see {@link elementAt}\n *\n * @throws {NotFoundError} Delivers an NotFoundError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @throws {SequenceError} Delivers a SequenceError if more than one value is emitted that matches the\n * provided predicate. If no predicate is provided, will deliver a SequenceError if more\n * than one value comes from the source\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return A function that returns an Observable that emits the single item\n * emitted by the source Observable that matches the predicate.\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let singleValue: T;\n    let seenValue = false;\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          seenValue = true;\n          if (!predicate || predicate(value, index++, source)) {\n            hasValue && subscriber.error(new SequenceError('Too many matching values'));\n            hasValue = true;\n            singleValue = value;\n          }\n        },\n        () => {\n          if (hasValue) {\n            subscriber.next(singleValue);\n            subscriber.complete();\n          } else {\n            subscriber.error(seenValue ? new NotFoundError('No matching values') : new EmptyError());\n          }\n        }\n      )\n    );\n  });\n}\n"],"mappings":"AACA,OAASA,UAAU,KAAQ,oBAAoB,CAG/C,OAASC,aAAa,KAAQ,uBAAuB,CACrD,OAASC,aAAa,KAAQ,uBAAuB,CACrD,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAiF/D,MAAM,SAAU,CAAAC,MAAMA,CAAIC,SAAuE,EAC/F,MAAO,CAAAH,OAAO,CAAC,SAACI,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,QAAQ,CAAG,KAAK,CACpB,GAAI,CAAAC,WAAc,CAClB,GAAI,CAAAC,SAAS,CAAG,KAAK,CACrB,GAAI,CAAAC,KAAK,CAAG,CAAC,CACbL,MAAM,CAACM,SAAS,CACdT,wBAAwB,CACtBI,UAAU,CACV,SAACM,KAAK,EACJH,SAAS,CAAG,IAAI,CAChB,GAAI,CAACL,SAAS,EAAIA,SAAS,CAACQ,KAAK,CAAEF,KAAK,EAAE,CAAEL,MAAM,CAAC,CAAE,CACnDE,QAAQ,EAAID,UAAU,CAACO,KAAK,CAAC,GAAI,CAAAd,aAAa,CAAC,0BAA0B,CAAC,CAAC,CAC3EQ,QAAQ,CAAG,IAAI,CACfC,WAAW,CAAGI,KAAK,C,CAEvB,CAAC,CACD,WACE,GAAIL,QAAQ,CAAE,CACZD,UAAU,CAACQ,IAAI,CAACN,WAAW,CAAC,CAC5BF,UAAU,CAACS,QAAQ,EAAE,C,CACtB,IAAM,CACLT,UAAU,CAACO,KAAK,CAACJ,SAAS,CAAG,GAAI,CAAAT,aAAa,CAAC,oBAAoB,CAAC,CAAG,GAAI,CAAAF,UAAU,EAAE,CAAC,C,CAE5F,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}