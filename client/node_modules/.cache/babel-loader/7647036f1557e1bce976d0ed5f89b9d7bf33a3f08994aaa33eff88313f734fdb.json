{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nexport const useFetch = function (url) {\n  _s();\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  const [options, setOptions] = useState(null);\n  const postData = postData => {\n    setOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(postData)\n    });\n  };\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchData = async fetchOptions => {\n      setIsPending(true);\n      try {\n        const res = await fetch(url, {\n          ...fetchOptions,\n          signal: controller.signal\n        });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const data = await res.json();\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError('Could not fetch the data');\n        }\n      }\n    };\n\n    // invoke the function\n    if (method === \"GET\") {\n      fetchData();\n    }\n    if (method === \"POST\" && options) {\n      fetchData(options);\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [url, method, options]);\n  return {\n    data,\n    isPending,\n    error,\n    postData\n  };\n};\n_s(useFetch, \"jhtbsK3xAuNX1VobfPSE0u2qfvE=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","method","arguments","length","undefined","data","setData","isPending","setIsPending","error","setError","options","setOptions","postData","headers","body","JSON","stringify","controller","AbortController","fetchData","fetchOptions","res","fetch","signal","ok","Error","statusText","json","err","name","console","log","abort"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\"\n\nexport const useFetch = (url, method = \"GET\") => {\n  const [data, setData] = useState(null)\n  const [isPending, setIsPending] = useState(false)\n  const [error, setError] = useState(null)\n  const [options, setOptions] = useState(null)\n\n  const postData = (postData) => {\n    setOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(postData)\n    })\n  }\n\n  useEffect(() => {\n    const controller = new AbortController()\n\n    const fetchData = async (fetchOptions) => {\n      setIsPending(true)\n      \n      try {\n        const res = await fetch(url, { ...fetchOptions, signal: controller.signal })\n        if(!res.ok) {\n          throw new Error(res.statusText)\n        }\n        const data = await res.json()\n\n        setIsPending(false)\n        setData(data)\n        setError(null)\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"the fetch was aborted\")\n        } else {\n          setIsPending(false)\n          setError('Could not fetch the data')\n        }\n      }\n    }\n\n    // invoke the function\n    if (method === \"GET\") {\n      fetchData()\n    }\n    if (method === \"POST\" && options) {\n      fetchData(options)\n    }\n\n    return () => {\n      controller.abort()\n    }\n\n  }, [url, method, options])\n\n  return { data, isPending, error, postData }\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,QAAQ,GAAG,SAAAA,CAACC,GAAG,EAAqB;EAAAC,EAAA;EAAA,IAAnBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC1C,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMiB,QAAQ,GAAIA,QAAQ,IAAK;IAC7BD,UAAU,CAAC;MACTX,MAAM,EAAE,MAAM;MACda,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;IAC/B,CAAC,CAAC;EACJ,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACd,MAAMqB,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,MAAMC,SAAS,GAAG,MAAOC,YAAY,IAAK;MACxCb,YAAY,CAAC,IAAI,CAAC;MAElB,IAAI;QACF,MAAMc,GAAG,GAAG,MAAMC,KAAK,CAACxB,GAAG,EAAE;UAAE,GAAGsB,YAAY;UAAEG,MAAM,EAAEN,UAAU,CAACM;QAAO,CAAC,CAAC;QAC5E,IAAG,CAACF,GAAG,CAACG,EAAE,EAAE;UACV,MAAM,IAAIC,KAAK,CAACJ,GAAG,CAACK,UAAU,CAAC;QACjC;QACA,MAAMtB,IAAI,GAAG,MAAMiB,GAAG,CAACM,IAAI,CAAC,CAAC;QAE7BpB,YAAY,CAAC,KAAK,CAAC;QACnBF,OAAO,CAACD,IAAI,CAAC;QACbK,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOmB,GAAG,EAAE;QACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;UAC7BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACtC,CAAC,MAAM;UACLxB,YAAY,CAAC,KAAK,CAAC;UACnBE,QAAQ,CAAC,0BAA0B,CAAC;QACtC;MACF;IACF,CAAC;;IAED;IACA,IAAIT,MAAM,KAAK,KAAK,EAAE;MACpBmB,SAAS,CAAC,CAAC;IACb;IACA,IAAInB,MAAM,KAAK,MAAM,IAAIU,OAAO,EAAE;MAChCS,SAAS,CAACT,OAAO,CAAC;IACpB;IAEA,OAAO,MAAM;MACXO,UAAU,CAACe,KAAK,CAAC,CAAC;IACpB,CAAC;EAEH,CAAC,EAAE,CAAClC,GAAG,EAAEE,MAAM,EAAEU,OAAO,CAAC,CAAC;EAE1B,OAAO;IAAEN,IAAI;IAAEE,SAAS;IAAEE,KAAK;IAAEI;EAAS,CAAC;AAC7C,CAAC;AAAAb,EAAA,CAzDYF,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}