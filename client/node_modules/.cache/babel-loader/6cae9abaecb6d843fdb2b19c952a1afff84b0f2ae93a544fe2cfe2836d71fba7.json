{"ast":null,"code":"import{Observable}from'../../Observable';import{performanceTimestampProvider}from'../../scheduler/performanceTimestampProvider';import{animationFrameProvider}from'../../scheduler/animationFrameProvider';export function animationFrames(timestampProvider){return timestampProvider?animationFramesFactory(timestampProvider):DEFAULT_ANIMATION_FRAMES;}function animationFramesFactory(timestampProvider){return new Observable(function(subscriber){var provider=timestampProvider||performanceTimestampProvider;var start=provider.now();var id=0;var run=function run(){if(!subscriber.closed){id=animationFrameProvider.requestAnimationFrame(function(timestamp){id=0;var now=provider.now();subscriber.next({timestamp:timestampProvider?now:timestamp,elapsed:now-start});run();});}};run();return function(){if(id){animationFrameProvider.cancelAnimationFrame(id);}};});}var DEFAULT_ANIMATION_FRAMES=animationFramesFactory();","map":{"version":3,"names":["Observable","performanceTimestampProvider","animationFrameProvider","animationFrames","timestampProvider","animationFramesFactory","DEFAULT_ANIMATION_FRAMES","subscriber","provider","start","now","id","run","closed","requestAnimationFrame","timestamp","next","elapsed","cancelAnimationFrame"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/observable/dom/animationFrames.ts"],"sourcesContent":["import { Observable } from '../../Observable';\nimport { TimestampProvider } from '../../types';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\n\n/**\n * An observable of animation frames\n *\n * Emits the amount of time elapsed since subscription and the timestamp on each animation frame.\n * Defaults to milliseconds provided to the requestAnimationFrame's callback. Does not end on its own.\n *\n * Every subscription will start a separate animation loop. Since animation frames are always scheduled\n * by the browser to occur directly before a repaint, scheduling more than one animation frame synchronously\n * should not be much different or have more overhead than looping over an array of events during\n * a single animation frame. However, if for some reason the developer would like to ensure the\n * execution of animation-related handlers are all executed during the same task by the engine,\n * the `share` operator can be used.\n *\n * This is useful for setting up animations with RxJS.\n *\n * ## Examples\n *\n * Tweening a div to move it on the screen\n *\n * ```ts\n * import { animationFrames, map, takeWhile, endWith } from 'rxjs';\n *\n * function tween(start: number, end: number, duration: number) {\n *   const diff = end - start;\n *   return animationFrames().pipe(\n *     // Figure out what percentage of time has passed\n *     map(({ elapsed }) => elapsed / duration),\n *     // Take the vector while less than 100%\n *     takeWhile(v => v < 1),\n *     // Finish with 100%\n *     endWith(1),\n *     // Calculate the distance traveled between start and end\n *     map(v => v * diff + start)\n *   );\n * }\n *\n * // Setup a div for us to move around\n * const div = document.createElement('div');\n * document.body.appendChild(div);\n * div.style.position = 'absolute';\n * div.style.width = '40px';\n * div.style.height = '40px';\n * div.style.backgroundColor = 'lime';\n * div.style.transform = 'translate3d(10px, 0, 0)';\n *\n * tween(10, 200, 4000).subscribe(x => {\n *   div.style.transform = `translate3d(${ x }px, 0, 0)`;\n * });\n * ```\n *\n * Providing a custom timestamp provider\n *\n * ```ts\n * import { animationFrames, TimestampProvider } from 'rxjs';\n *\n * // A custom timestamp provider\n * let now = 0;\n * const customTSProvider: TimestampProvider = {\n *   now() { return now++; }\n * };\n *\n * const source$ = animationFrames(customTSProvider);\n *\n * // Log increasing numbers 0...1...2... on every animation frame.\n * source$.subscribe(({ elapsed }) => console.log(elapsed));\n * ```\n *\n * @param timestampProvider An object with a `now` method that provides a numeric timestamp\n */\nexport function animationFrames(timestampProvider?: TimestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\n\n/**\n * Does the work of creating the observable for `animationFrames`.\n * @param timestampProvider The timestamp provider to use to create the observable\n */\nfunction animationFramesFactory(timestampProvider?: TimestampProvider) {\n  return new Observable<{ timestamp: number; elapsed: number }>((subscriber) => {\n    // If no timestamp provider is specified, use performance.now() - as it\n    // will return timestamps 'compatible' with those passed to the run\n    // callback and won't be affected by NTP adjustments, etc.\n    const provider = timestampProvider || performanceTimestampProvider;\n\n    // Capture the start time upon subscription, as the run callback can remain\n    // queued for a considerable period of time and the elapsed time should\n    // represent the time elapsed since subscription - not the time since the\n    // first rendered animation frame.\n    const start = provider.now();\n\n    let id = 0;\n    const run = () => {\n      if (!subscriber.closed) {\n        id = animationFrameProvider.requestAnimationFrame((timestamp: DOMHighResTimeStamp | number) => {\n          id = 0;\n          // Use the provider's timestamp to calculate the elapsed time. Note that\n          // this means - if the caller hasn't passed a provider - that\n          // performance.now() will be used instead of the timestamp that was\n          // passed to the run callback. The reason for this is that the timestamp\n          // passed to the callback can be earlier than the start time, as it\n          // represents the time at which the browser decided it would render any\n          // queued frames - and that time can be earlier the captured start time.\n          const now = provider.now();\n          subscriber.next({\n            timestamp: timestampProvider ? now : timestamp,\n            elapsed: now - start,\n          });\n          run();\n        });\n      }\n    };\n\n    run();\n\n    return () => {\n      if (id) {\n        animationFrameProvider.cancelAnimationFrame(id);\n      }\n    };\n  });\n}\n\n/**\n * In the common case, where the timestamp provided by the rAF API is used,\n * we use this shared observable to reduce overhead.\n */\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,kBAAkB,CAE7C,OAASC,4BAA4B,KAAQ,8CAA8C,CAC3F,OAASC,sBAAsB,KAAQ,wCAAwC,CAuE/E,MAAM,SAAU,CAAAC,eAAeA,CAACC,iBAAqC,EACnE,MAAO,CAAAA,iBAAiB,CAAGC,sBAAsB,CAACD,iBAAiB,CAAC,CAAGE,wBAAwB,CACjG,CAMA,QAAS,CAAAD,sBAAsBA,CAACD,iBAAqC,EACnE,MAAO,IAAI,CAAAJ,UAAU,CAAyC,SAACO,UAAU,EAIvE,GAAM,CAAAC,QAAQ,CAAGJ,iBAAiB,EAAIH,4BAA4B,CAMlE,GAAM,CAAAQ,KAAK,CAAGD,QAAQ,CAACE,GAAG,EAAE,CAE5B,GAAI,CAAAC,EAAE,CAAG,CAAC,CACV,GAAM,CAAAC,GAAG,CAAG,QAAN,CAAAA,GAAGA,CAAA,CAAG,CACV,GAAI,CAACL,UAAU,CAACM,MAAM,CAAE,CACtBF,EAAE,CAAGT,sBAAsB,CAACY,qBAAqB,CAAC,SAACC,SAAuC,EACxFJ,EAAE,CAAG,CAAC,CAQN,GAAM,CAAAD,GAAG,CAAGF,QAAQ,CAACE,GAAG,EAAE,CAC1BH,UAAU,CAACS,IAAI,CAAC,CACdD,SAAS,CAAEX,iBAAiB,CAAGM,GAAG,CAAGK,SAAS,CAC9CE,OAAO,CAAEP,GAAG,CAAGD,K,CAChB,CAAC,CACFG,GAAG,EAAE,CACP,CAAC,CAAC,C,CAEN,CAAC,CAEDA,GAAG,EAAE,CAEL,MAAO,YACL,GAAID,EAAE,CAAE,CACNT,sBAAsB,CAACgB,oBAAoB,CAACP,EAAE,CAAC,C,CAEnD,CAAC,CACH,CAAC,CAAC,CACJ,CAMA,GAAM,CAAAL,wBAAwB,CAAGD,sBAAsB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}