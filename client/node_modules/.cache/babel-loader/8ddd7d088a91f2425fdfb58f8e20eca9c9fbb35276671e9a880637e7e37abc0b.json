{"ast":null,"code":"import{__values}from\"tslib\";import{EMPTY}from'../observable/empty';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function takeLast(count){return count<=0?function(){return EMPTY;}:operate(function(source,subscriber){var buffer=[];source.subscribe(createOperatorSubscriber(subscriber,function(value){buffer.push(value);count<buffer.length&&buffer.shift();},function(){var e_1,_a;try{for(var buffer_1=__values(buffer),buffer_1_1=buffer_1.next();!buffer_1_1.done;buffer_1_1=buffer_1.next()){var value=buffer_1_1.value;subscriber.next(value);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(buffer_1_1&&!buffer_1_1.done&&(_a=buffer_1.return))_a.call(buffer_1);}finally{if(e_1)throw e_1.error;}}subscriber.complete();},undefined,function(){buffer=null;}));});}","map":{"version":3,"names":["EMPTY","operate","createOperatorSubscriber","takeLast","count","source","subscriber","buffer","subscribe","value","push","length","shift","buffer_1","__values","buffer_1_1","next","done","complete","undefined"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/takeLast.ts"],"sourcesContent":["import { EMPTY } from '../observable/empty';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Waits for the source to complete, then emits the last N values from the source,\n * as specified by the `count` argument.\n *\n * ![](takeLast.png)\n *\n * `takeLast` results in an observable that will hold values up to `count` values in memory,\n * until the source completes. It then pushes all values in memory to the consumer, in the\n * order they were received from the source, then notifies the consumer that it is\n * complete.\n *\n * If for some reason the source completes before the `count` supplied to `takeLast` is reached,\n * all values received until that point are emitted, and then completion is notified.\n *\n * **Warning**: Using `takeLast` with an observable that never completes will result\n * in an observable that never emits a value.\n *\n * ## Example\n *\n * Take the last 3 values of an Observable with many values\n *\n * ```ts\n * import { range, takeLast } from 'rxjs';\n *\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return A function that returns an Observable that emits at most the last\n * `count` values emitted by the source Observable.\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? () => EMPTY\n    : operate((source, subscriber) => {\n        // This buffer will hold the values we are going to emit\n        // when the source completes. Since we only want to take the\n        // last N values, we can't emit until we're sure we're not getting\n        // any more values.\n        let buffer: T[] = [];\n        source.subscribe(\n          createOperatorSubscriber(\n            subscriber,\n            (value) => {\n              // Add the most recent value onto the end of our buffer.\n              buffer.push(value);\n              // If our buffer is now larger than the number of values we\n              // want to take, we remove the oldest value from the buffer.\n              count < buffer.length && buffer.shift();\n            },\n            () => {\n              // The source completed, we now know what are last values\n              // are, emit them in the order they were received.\n              for (const value of buffer) {\n                subscriber.next(value);\n              }\n              subscriber.complete();\n            },\n            // Errors are passed through to the consumer\n            undefined,\n            () => {\n              // During finalization release the values in our buffer.\n              buffer = null!;\n            }\n          )\n        );\n      });\n}\n"],"mappings":"4BAAA,OAASA,KAAK,KAAQ,qBAAqB,CAE3C,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAyC/D,MAAM,SAAU,CAAAC,QAAQA,CAAIC,KAAa,EACvC,MAAO,CAAAA,KAAK,EAAI,CAAC,CACb,WAAM,OAAAJ,KAAK,CAAL,CAAK,CACXC,OAAO,CAAC,SAACI,MAAM,CAAEC,UAAU,EAKzB,GAAI,CAAAC,MAAM,CAAQ,EAAE,CACpBF,MAAM,CAACG,SAAS,CACdN,wBAAwB,CACtBI,UAAU,CACV,SAACG,KAAK,EAEJF,MAAM,CAACG,IAAI,CAACD,KAAK,CAAC,CAGlBL,KAAK,CAAGG,MAAM,CAACI,MAAM,EAAIJ,MAAM,CAACK,KAAK,EAAE,CACzC,CAAC,CACD,W,eAGE,IAAoB,IAAAC,QAAA,CAAAC,QAAA,CAAAP,MAAM,EAAAQ,UAAA,CAAAF,QAAA,CAAAG,IAAA,IAAAD,UAAA,CAAAE,IAAA,CAAAF,UAAA,CAAAF,QAAA,CAAAG,IAAA,GAAE,CAAvB,GAAM,CAAAP,KAAK,CAAAM,UAAA,CAAAN,KAAA,CACdH,UAAU,CAACU,IAAI,CAACP,KAAK,CAAC,C,wJAExBH,UAAU,CAACY,QAAQ,EAAE,CACvB,CAAC,CAEDC,SAAS,CACT,WAEEZ,MAAM,CAAG,IAAK,CAChB,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}