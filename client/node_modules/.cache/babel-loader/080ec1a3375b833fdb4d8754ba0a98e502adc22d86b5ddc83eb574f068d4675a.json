{"ast":null,"code":"import{Observable}from'../Observable';import{argsOrArgArray}from'../util/argsOrArgArray';import{OperatorSubscriber}from'../operators/OperatorSubscriber';import{noop}from'../util/noop';import{innerFrom}from'./innerFrom';export function onErrorResumeNext(){var sources=[];for(var _i=0;_i<arguments.length;_i++){sources[_i]=arguments[_i];}var nextSources=argsOrArgArray(sources);return new Observable(function(subscriber){var sourceIndex=0;var subscribeNext=function subscribeNext(){if(sourceIndex<nextSources.length){var nextSource=void 0;try{nextSource=innerFrom(nextSources[sourceIndex++]);}catch(err){subscribeNext();return;}var innerSubscriber=new OperatorSubscriber(subscriber,undefined,noop,noop);nextSource.subscribe(innerSubscriber);innerSubscriber.add(subscribeNext);}else{subscriber.complete();}};subscribeNext();});}","map":{"version":3,"names":["Observable","argsOrArgArray","OperatorSubscriber","noop","innerFrom","onErrorResumeNext","sources","_i","arguments","length","nextSources","subscriber","sourceIndex","subscribeNext","nextSource","err","innerSubscriber","undefined","subscribe","add","complete"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/observable/onErrorResumeNext.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { innerFrom } from './innerFrom';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function onErrorResumeNext<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\n\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits a complete or an error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` will subscribe to each observable source it is provided, in order.\n * If the source it's subscribed to emits an error or completes, it will move to the next source\n * without error.\n *\n * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.\n *\n * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\n * sources emits an error.\n *\n * Note that there is no way to handle any errors thrown by sources via the result of\n * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\n * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\n *\n * ## Example\n *\n * Subscribe to the next Observable after map fails\n *\n * ```ts\n * import { onErrorResumeNext, of, map } from 'rxjs';\n *\n * onErrorResumeNext(\n *   of(1, 2, 3, 0).pipe(\n *     map(x => {\n *       if (x === 0) {\n *         throw Error();\n *       }\n *       return 10 / x;\n *     })\n *   ),\n *   of(1, 2, 3)\n * )\n * .subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err),     // Will never be called.\n *   complete: () => console.log('done')\n * });\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // 'done'\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.\n * @return {Observable} An Observable that concatenates all sources, one after the other,\n * ignoring all errors, such that any error causes it to move on to the next source.\n */\nexport function onErrorResumeNext<A extends readonly unknown[]>(\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\n): Observable<A[number]> {\n  const nextSources: ObservableInputTuple<A> = argsOrArgArray(sources) as any;\n\n  return new Observable((subscriber) => {\n    let sourceIndex = 0;\n    const subscribeNext = () => {\n      if (sourceIndex < nextSources.length) {\n        let nextSource: Observable<A[number]>;\n        try {\n          nextSource = innerFrom(nextSources[sourceIndex++]);\n        } catch (err) {\n          subscribeNext();\n          return;\n        }\n        const innerSubscriber = new OperatorSubscriber(subscriber, undefined, noop, noop);\n        nextSource.subscribe(innerSubscriber);\n        innerSubscriber.add(subscribeNext);\n      } else {\n        subscriber.complete();\n      }\n    };\n    subscribeNext();\n  });\n}\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,eAAe,CAE1C,OAASC,cAAc,KAAQ,wBAAwB,CACvD,OAASC,kBAAkB,KAAQ,iCAAiC,CACpE,OAASC,IAAI,KAAQ,cAAc,CACnC,OAASC,SAAS,KAAQ,aAAa,CAsEvC,MAAM,SAAU,CAAAC,iBAAiBA,CAAA,EAC/B,IAAAC,OAAA,I,IAAA,IAAAC,EAAA,EAAyE,CAAzEA,EAAA,CAAAC,SAAA,CAAAC,MAAyE,CAAzEF,EAAA,EAAyE,EAAzED,OAAA,CAAAC,EAAA,EAAAC,SAAA,CAAAD,EAAA,E,CAEA,GAAM,CAAAG,WAAW,CAA4BT,cAAc,CAACK,OAAO,CAAQ,CAE3E,MAAO,IAAI,CAAAN,UAAU,CAAC,SAACW,UAAU,EAC/B,GAAI,CAAAC,WAAW,CAAG,CAAC,CACnB,GAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAA,CAAG,CACpB,GAAID,WAAW,CAAGF,WAAW,CAACD,MAAM,CAAE,CACpC,GAAI,CAAAK,UAAU,OAAuB,CACrC,GAAI,CACFA,UAAU,CAAGV,SAAS,CAACM,WAAW,CAACE,WAAW,EAAE,CAAC,CAAC,C,CAClD,MAAOG,GAAG,CAAE,CACZF,aAAa,EAAE,CACf,O,CAEF,GAAM,CAAAG,eAAe,CAAG,GAAI,CAAAd,kBAAkB,CAACS,UAAU,CAAEM,SAAS,CAAEd,IAAI,CAAEA,IAAI,CAAC,CACjFW,UAAU,CAACI,SAAS,CAACF,eAAe,CAAC,CACrCA,eAAe,CAACG,GAAG,CAACN,aAAa,CAAC,C,CACnC,IAAM,CACLF,UAAU,CAACS,QAAQ,EAAE,C,CAEzB,CAAC,CACDP,aAAa,EAAE,CACjB,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}