{"ast":null,"code":"import { processOptions, validateOptions } from './_chunks/defaultOptionsValidator-11b3788b.js';\nimport parseHeaders from 'parse-headers';\nconst middlewareReducer = middleware => function applyMiddleware(hook, defaultValue) {\n  const bailEarly = hook === \"onError\";\n  let value = defaultValue;\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  for (let i = 0; i < middleware[hook].length; i++) {\n    const handler = middleware[hook][i];\n    value = handler(value, ...args);\n    if (bailEarly && !value) {\n      break;\n    }\n  }\n  return value;\n};\nfunction createPubSub() {\n  const subscribers = /* @__PURE__ */Object.create(null);\n  let nextId = 0;\n  function subscribe(subscriber) {\n    const id = nextId++;\n    subscribers[id] = subscriber;\n    return function unsubscribe() {\n      delete subscribers[id];\n    };\n  }\n  function publish(event) {\n    for (const id in subscribers) {\n      subscribers[id](event);\n    }\n  }\n  return {\n    publish,\n    subscribe\n  };\n}\nconst channelNames = [\"request\", \"response\", \"progress\", \"error\", \"abort\"];\nconst middlehooks = [\"processOptions\", \"validateOptions\", \"interceptRequest\", \"finalizeOptions\", \"onRequest\", \"onResponse\", \"onError\", \"onReturn\", \"onHeaders\"];\nfunction createRequester(initMiddleware, httpRequest) {\n  const loadedMiddleware = [];\n  const middleware = middlehooks.reduce((ware, name) => {\n    ware[name] = ware[name] || [];\n    return ware;\n  }, {\n    processOptions: [processOptions],\n    validateOptions: [validateOptions]\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  });\n\n  function request(opts) {\n    const onResponse = (reqErr, res, ctx) => {\n      let error = reqErr;\n      let response = res;\n      if (!error) {\n        try {\n          response = applyMiddleware(\"onResponse\", res, ctx);\n        } catch (err) {\n          response = null;\n          error = err;\n        }\n      }\n      error = error && applyMiddleware(\"onError\", error, ctx);\n      if (error) {\n        channels.error.publish(error);\n      } else if (response) {\n        channels.response.publish(response);\n      }\n    };\n    const channels = channelNames.reduce((target, name) => {\n      target[name] = createPubSub();\n      return target;\n    }, {});\n    const applyMiddleware = middlewareReducer(middleware);\n    const options = applyMiddleware(\"processOptions\", opts);\n    applyMiddleware(\"validateOptions\", options);\n    const context = {\n      options,\n      channels,\n      applyMiddleware\n    };\n    let ongoingRequest;\n    const unsubscribe = channels.request.subscribe(ctx => {\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res, ctx));\n    });\n    channels.abort.subscribe(() => {\n      unsubscribe();\n      if (ongoingRequest) {\n        ongoingRequest.abort();\n      }\n    });\n    const returnValue = applyMiddleware(\"onReturn\", channels, context);\n    if (returnValue === channels) {\n      channels.request.publish(context);\n    }\n    return returnValue;\n  }\n  request.use = function use(newMiddleware) {\n    if (!newMiddleware) {\n      throw new Error(\"Tried to add middleware that resolved to falsey value\");\n    }\n    if (typeof newMiddleware === \"function\") {\n      throw new Error(\"Tried to add middleware that was a function. It probably expects you to pass options to it.\");\n    }\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\"Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event\");\n    }\n    middlehooks.forEach(key => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key]);\n      }\n    });\n    loadedMiddleware.push(newMiddleware);\n    return request;\n  };\n  request.clone = () => createRequester(loadedMiddleware, httpRequest);\n  initMiddleware.forEach(request.use);\n  return request;\n}\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _method, _url, _resHeaders, _headers, _controller, _init;\nclass FetchXhr {\n  constructor() {\n    /**\n     * Public interface, interop with real XMLHttpRequest\n     */\n    __publicField(this, \"onabort\");\n    __publicField(this, \"onerror\");\n    __publicField(this, \"onreadystatechange\");\n    __publicField(this, \"ontimeout\");\n    /**\n     * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n     */\n    __publicField(this, \"readyState\", 0);\n    __publicField(this, \"response\");\n    __publicField(this, \"responseText\");\n    __publicField(this, \"responseType\", \"\");\n    __publicField(this, \"status\");\n    __publicField(this, \"statusText\");\n    __publicField(this, \"withCredentials\");\n    /**\n     * Private implementation details\n     */\n    __privateAdd(this, _method, void 0);\n    __privateAdd(this, _url, void 0);\n    __privateAdd(this, _resHeaders, void 0);\n    __privateAdd(this, _headers, {});\n    __privateAdd(this, _controller, void 0);\n    __privateAdd(this, _init, {});\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n  open(method, url, _async) {\n    __privateSet(this, _method, method);\n    __privateSet(this, _url, url);\n    __privateSet(this, _resHeaders, \"\");\n    this.readyState = 1;\n    this.onreadystatechange();\n    __privateSet(this, _controller, void 0);\n  }\n  abort() {\n    if (__privateGet(this, _controller)) {\n      __privateGet(this, _controller).abort();\n    }\n  }\n  getAllResponseHeaders() {\n    return __privateGet(this, _resHeaders);\n  }\n  setRequestHeader(name, value) {\n    __privateGet(this, _headers)[name] = value;\n  }\n  // Allow setting extra fetch init options, needed for runtimes such as Vercel Edge to set `cache` and other options in React Server Components\n  setInit(init) {\n    __privateSet(this, _init, init);\n  }\n  send(body) {\n    const textBody = this.responseType !== \"arraybuffer\";\n    const options = {\n      ...__privateGet(this, _init),\n      method: __privateGet(this, _method),\n      headers: __privateGet(this, _headers),\n      body\n    };\n    if (typeof AbortController === \"function\") {\n      __privateSet(this, _controller, new AbortController());\n      if (typeof EventTarget !== \"undefined\" && __privateGet(this, _controller).signal instanceof EventTarget) {\n        options.signal = __privateGet(this, _controller).signal;\n      }\n    }\n    if (typeof document !== \"undefined\") {\n      options.credentials = this.withCredentials ? \"include\" : \"omit\";\n    }\n    fetch(__privateGet(this, _url), options).then(res => {\n      res.headers.forEach((value, key) => {\n        __privateSet(this, _resHeaders, __privateGet(this, _resHeaders) + \"\".concat(key, \": \").concat(value, \"\\r\\n\"));\n      });\n      this.status = res.status;\n      this.statusText = res.statusText;\n      this.readyState = 3;\n      return textBody ? res.text() : res.arrayBuffer();\n    }).then(resBody => {\n      if (typeof resBody === \"string\") {\n        this.responseText = resBody;\n      } else {\n        this.response = resBody;\n      }\n      this.readyState = 4;\n      this.onreadystatechange();\n    }).catch(err => {\n      var _a;\n      if (err.name === \"AbortError\") {\n        this.onabort();\n        return;\n      }\n      (_a = this.onerror) == null ? void 0 : _a.call(this, err);\n    });\n  }\n}\n_method = new WeakMap();\n_url = new WeakMap();\n_resHeaders = new WeakMap();\n_headers = new WeakMap();\n_controller = new WeakMap();\n_init = new WeakMap();\nconst adapter = typeof XMLHttpRequest === \"function\" ? \"xhr\" : \"fetch\";\nconst XmlHttpRequest = adapter === \"xhr\" ? XMLHttpRequest : FetchXhr;\nconst httpRequester = (context, callback) => {\n  const opts = context.options;\n  const options = context.applyMiddleware(\"finalizeOptions\", opts);\n  const timers = {};\n  const injectedResponse = context.applyMiddleware(\"interceptRequest\", void 0, {\n    adapter,\n    context\n  });\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse);\n    const cancel = () => clearTimeout(cbTimer);\n    return {\n      abort: cancel\n    };\n  }\n  let xhr = new XmlHttpRequest();\n  if (xhr instanceof FetchXhr && typeof options.fetch === \"object\") {\n    xhr.setInit(options.fetch);\n  }\n  const headers = options.headers;\n  const delays = options.timeout;\n  let aborted = false;\n  let loaded = false;\n  let timedOut = false;\n  xhr.onerror = event => {\n    onError(new Error(\"Request error while attempting to reach \".concat(options.url).concat(event.lengthComputable ? \"(\".concat(event.loaded, \" of \").concat(event.total, \" bytes transferred)\") : \"\")));\n  };\n  xhr.ontimeout = event => {\n    onError(new Error(\"Request timeout while attempting to reach \".concat(options.url).concat(event.lengthComputable ? \"(\".concat(event.loaded, \" of \").concat(event.total, \" bytes transferred)\") : \"\")));\n  };\n  xhr.onabort = () => {\n    stopTimers(true);\n    aborted = true;\n  };\n  xhr.onreadystatechange = () => {\n    resetTimers();\n    if (aborted || xhr.readyState !== 4) {\n      return;\n    }\n    if (xhr.status === 0) {\n      return;\n    }\n    onLoad();\n  };\n  xhr.open(options.method, options.url, true\n  // Always async\n  );\n\n  xhr.withCredentials = !!options.withCredentials;\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n  if (options.rawBody) {\n    xhr.responseType = \"arraybuffer\";\n  }\n  context.applyMiddleware(\"onRequest\", {\n    options,\n    adapter,\n    request: xhr,\n    context\n  });\n  xhr.send(options.body || null);\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest(\"ETIMEDOUT\"), delays.connect);\n  }\n  return {\n    abort\n  };\n  function abort() {\n    aborted = true;\n    if (xhr) {\n      xhr.abort();\n    }\n  }\n  function timeoutRequest(code) {\n    timedOut = true;\n    xhr.abort();\n    const error = new Error(code === \"ESOCKETTIMEDOUT\" ? \"Socket timed out on request to \".concat(options.url) : \"Connection timed out on request to \".concat(options.url));\n    error.code = code;\n    context.channels.error.publish(error);\n  }\n  function resetTimers() {\n    if (!delays) {\n      return;\n    }\n    stopTimers();\n    timers.socket = setTimeout(() => timeoutRequest(\"ESOCKETTIMEDOUT\"), delays.socket);\n  }\n  function stopTimers(force) {\n    if (force || aborted || xhr.readyState >= 2 && timers.connect) {\n      clearTimeout(timers.connect);\n    }\n    if (timers.socket) {\n      clearTimeout(timers.socket);\n    }\n  }\n  function onError(error) {\n    if (loaded) {\n      return;\n    }\n    stopTimers(true);\n    loaded = true;\n    xhr = null;\n    const err = error || new Error(\"Network error while attempting to reach \".concat(options.url));\n    err.isNetworkError = true;\n    err.request = options;\n    callback(err);\n  }\n  function reduceResponse() {\n    return {\n      body: xhr.response || (xhr.responseType === \"\" || xhr.responseType === \"text\" ? xhr.responseText : \"\"),\n      url: options.url,\n      method: options.method,\n      headers: parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText\n    };\n  }\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return;\n    }\n    if (xhr.status === 0) {\n      onError(new Error(\"Unknown XHR error\"));\n      return;\n    }\n    stopTimers();\n    loaded = true;\n    callback(null, reduceResponse());\n  }\n};\nconst getIt = function () {\n  let initMiddleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let httpRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : httpRequester;\n  return createRequester(initMiddleware, httpRequest);\n};\nconst environment = \"browser\";\nexport { adapter, environment, getIt };","map":{"version":3,"names":["middlewareReducer","middleware","applyMiddleware","hook","defaultValue","bailEarly","value","_len","arguments","length","args","Array","_key","i","handler","createPubSub","subscribers","Object","create","nextId","subscribe","subscriber","id","unsubscribe","publish","event","channelNames","middlehooks","createRequester","initMiddleware","httpRequest","loadedMiddleware","reduce","ware","name","processOptions","validateOptions","request","opts","onResponse","reqErr","res","ctx","error","response","err","channels","target","options","context","ongoingRequest","abort","returnValue","use","newMiddleware","Error","onReturn","forEach","key","push","clone","_method","_url","_resHeaders","_headers","_controller","_init","FetchXhr","constructor","__publicField","__privateAdd","open","method","url","_async","__privateSet","readyState","onreadystatechange","__privateGet","getAllResponseHeaders","setRequestHeader","setInit","init","send","body","textBody","responseType","headers","AbortController","EventTarget","signal","document","credentials","withCredentials","fetch","then","concat","status","statusText","text","arrayBuffer","resBody","responseText","catch","_a","onabort","onerror","call","WeakMap","adapter","XMLHttpRequest","XmlHttpRequest","httpRequester","callback","timers","injectedResponse","cbTimer","setTimeout","cancel","clearTimeout","xhr","delays","timeout","aborted","loaded","timedOut","onError","lengthComputable","total","ontimeout","stopTimers","resetTimers","onLoad","hasOwnProperty","rawBody","connect","timeoutRequest","code","socket","force","isNetworkError","reduceResponse","parseHeaders","statusCode","statusMessage","getIt","undefined","environment"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/src/thistle-lion/node_modules/get-it/src/util/middlewareReducer.ts","/Users/jawaadahmar/Desktop/atlas-clothing/src/thistle-lion/node_modules/get-it/src/util/pubsub.ts","/Users/jawaadahmar/Desktop/atlas-clothing/src/thistle-lion/node_modules/get-it/src/createRequester.ts","/Users/jawaadahmar/Desktop/atlas-clothing/src/thistle-lion/node_modules/get-it/src/request/browser/fetchXhr.ts","/Users/jawaadahmar/Desktop/atlas-clothing/src/thistle-lion/node_modules/get-it/src/request/browser-request.ts","/Users/jawaadahmar/Desktop/atlas-clothing/src/thistle-lion/node_modules/get-it/src/index.browser.ts"],"sourcesContent":["import type {ApplyMiddleware, MiddlewareReducer} from '../types'\n\nexport const middlewareReducer = (middleware: MiddlewareReducer) =>\n  function applyMiddleware(hook, defaultValue, ...args) {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      // @ts-expect-error -- find a better way to deal with argument tuples\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  } as ApplyMiddleware\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nimport type {PubSub, Subscriber} from '../types'\n\nexport function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","import {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {\n  HttpContext,\n  HttpRequest,\n  HttpRequestOngoing,\n  Middleware,\n  MiddlewareChannels,\n  MiddlewareHooks,\n  MiddlewareReducer,\n  MiddlewareResponse,\n  Middlewares,\n  Requester,\n  RequestOptions,\n} from './types'\nimport {middlewareReducer} from './util/middlewareReducer'\nimport {createPubSub} from './util/pubsub'\n\nconst channelNames = [\n  'request',\n  'response',\n  'progress',\n  'error',\n  'abort',\n] satisfies (keyof MiddlewareChannels)[]\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n] satisfies (keyof MiddlewareHooks)[]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: Middlewares = []\n  const middleware: MiddlewareReducer = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } as any\n  )\n\n  function request(opts: RequestOptions | string) {\n    const onResponse = (reqErr: Error | null, res: MiddlewareResponse, ctx: HttpContext) => {\n      let error = reqErr\n      let response: MiddlewareResponse | null = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err: any) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n\n    const channels: MiddlewareChannels = channelNames.reduce((target, name) => {\n      target[name] = createPubSub() as MiddlewareChannels[typeof name]\n      return target\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, {} as any)\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts as RequestOptions)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: HttpRequestOngoing | undefined\n    const unsubscribe = channels.request.subscribe((ctx) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res!, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.'\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event'\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key] as any)\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = () => createRequester(loadedMiddleware, httpRequest)\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n","/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nexport class FetchXhr\n  implements Pick<XMLHttpRequest, 'open' | 'abort' | 'getAllResponseHeaders' | 'setRequestHeader'>\n{\n  /**\n   * Public interface, interop with real XMLHttpRequest\n   */\n  onabort: () => void\n  onerror: (error?: any) => void\n  onreadystatechange: () => void\n  ontimeout: XMLHttpRequest['ontimeout']\n  /**\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n   */\n  readyState: 0 | 1 | 2 | 3 | 4 = 0\n  response: XMLHttpRequest['response']\n  responseText: XMLHttpRequest['responseText']\n  responseType: XMLHttpRequest['responseType'] = ''\n  status: XMLHttpRequest['status']\n  statusText: XMLHttpRequest['statusText']\n  withCredentials: XMLHttpRequest['withCredentials']\n\n  /**\n   * Private implementation details\n   */\n  #method: string\n  #url: string\n  #resHeaders: string\n  #headers: Record<string, string> = {}\n  #controller?: AbortController\n  #init: RequestInit = {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n  open(method: string, url: string, _async?: boolean) {\n    this.#method = method\n    this.#url = url\n    this.#resHeaders = ''\n    this.readyState = 1 // Open\n    this.onreadystatechange()\n    this.#controller = undefined\n  }\n  abort() {\n    if (this.#controller) {\n      this.#controller.abort()\n    }\n  }\n  getAllResponseHeaders() {\n    return this.#resHeaders\n  }\n  setRequestHeader(name: string, value: string) {\n    this.#headers[name] = value\n  }\n  // Allow setting extra fetch init options, needed for runtimes such as Vercel Edge to set `cache` and other options in React Server Components\n  setInit(init: RequestInit) {\n    this.#init = init\n  }\n  send(body: BodyInit) {\n    const textBody = this.responseType !== 'arraybuffer'\n    const options: RequestInit = {\n      ...this.#init,\n      method: this.#method,\n      headers: this.#headers,\n      body,\n    }\n    if (typeof AbortController === 'function') {\n      this.#controller = new AbortController()\n      // The instanceof check ensures environments like Edge Runtime, Node 18 with built-in fetch\n      // and more don't throw if `signal` doesn't implement`EventTarget`\n      // Native browser AbortSignal implements EventTarget, so we can use it\n      if (typeof EventTarget !== 'undefined' && this.#controller.signal instanceof EventTarget) {\n        options.signal = this.#controller.signal\n      }\n    }\n\n    // Some environments (like CloudFlare workers) don't support credentials in\n    // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n    // so for now let's just make do with a document check :/\n    if (typeof document !== 'undefined') {\n      options.credentials = this.withCredentials ? 'include' : 'omit'\n    }\n\n    fetch(this.#url, options)\n      .then((res): Promise<string | ArrayBuffer> => {\n        res.headers.forEach((value: any, key: any) => {\n          this.#resHeaders += `${key}: ${value}\\r\\n`\n        })\n        this.status = res.status\n        this.statusText = res.statusText\n        this.readyState = 3 // Loading\n        return textBody ? res.text() : res.arrayBuffer()\n      })\n      .then((resBody) => {\n        if (typeof resBody === 'string') {\n          this.responseText = resBody\n        } else {\n          this.response = resBody\n        }\n        this.readyState = 4 // Done\n        this.onreadystatechange()\n      })\n      .catch((err: Error) => {\n        if (err.name === 'AbortError') {\n          this.onabort()\n          return\n        }\n\n        this.onerror?.(err)\n      })\n  }\n}\n","import parseHeaders from 'parse-headers'\n\nimport type {HttpRequest, MiddlewareResponse, RequestAdapter, RequestOptions} from '../types'\nimport {FetchXhr} from './browser/fetchXhr'\n\n// Use fetch if it's available, non-browser environments such as Deno, Edge Runtime and more provide fetch as a global but doesn't provide xhr\nexport const adapter: RequestAdapter = typeof XMLHttpRequest === 'function' ? 'xhr' : 'fetch'\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nconst XmlHttpRequest = adapter === 'xhr' ? XMLHttpRequest : FetchXhr\n\nexport const httpRequester: HttpRequest = (context, callback) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts) as RequestOptions\n  const timers: any = {}\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = new XmlHttpRequest()\n\n  if (xhr instanceof FetchXhr && typeof options.fetch === 'object') {\n    xhr.setInit(options.fetch)\n  }\n\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request error while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`\n      )\n    )\n  }\n  xhr.ontimeout = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request timeout while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`\n      )\n    )\n  }\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  xhr.onreadystatechange = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || xhr.readyState !== 4) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method!,\n    options.url,\n    true // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code: any) {\n    timedOut = true\n    xhr.abort()\n    const error: any = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force?: boolean) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error: Error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    ;(xhr as any) = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = (error ||\n      new Error(`Network error while attempting to reach ${options.url}`)) as Error & {\n      isNetworkError: boolean\n      request?: typeof options\n    }\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse(): MiddlewareResponse {\n    return {\n      body:\n        xhr.response ||\n        (xhr.responseType === '' || xhr.responseType === 'text' ? xhr.responseText : ''),\n      url: options.url,\n      method: options.method!,\n      headers: parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText,\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n","import {createRequester} from './createRequester'\nimport {httpRequester} from './request/browser-request'\nimport type {ExportEnv, HttpRequest, Middlewares, Requester} from './types'\n\nexport type * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester\n): Requester => createRequester(initMiddleware, httpRequest)\n\n/** @public */\nexport const environment: ExportEnv = 'browser'\n\n/** @public */\nexport {adapter} from './request/browser-request'\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}