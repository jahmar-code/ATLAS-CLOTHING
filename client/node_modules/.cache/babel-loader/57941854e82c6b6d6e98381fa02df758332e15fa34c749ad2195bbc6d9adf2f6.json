{"ast":null,"code":"import{EMPTY}from'../observable/empty';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';import{innerFrom}from'../observable/innerFrom';import{timer}from'../observable/timer';export function repeat(countOrConfig){var _a;var count=Infinity;var delay;if(countOrConfig!=null){if(typeof countOrConfig==='object'){_a=countOrConfig.count,count=_a===void 0?Infinity:_a,delay=countOrConfig.delay;}else{count=countOrConfig;}}return count<=0?function(){return EMPTY;}:operate(function(source,subscriber){var soFar=0;var sourceSub;var resubscribe=function resubscribe(){sourceSub===null||sourceSub===void 0?void 0:sourceSub.unsubscribe();sourceSub=null;if(delay!=null){var notifier=typeof delay==='number'?timer(delay):innerFrom(delay(soFar));var notifierSubscriber_1=createOperatorSubscriber(subscriber,function(){notifierSubscriber_1.unsubscribe();subscribeToSource();});notifier.subscribe(notifierSubscriber_1);}else{subscribeToSource();}};var subscribeToSource=function subscribeToSource(){var syncUnsub=false;sourceSub=source.subscribe(createOperatorSubscriber(subscriber,undefined,function(){if(++soFar<count){if(sourceSub){resubscribe();}else{syncUnsub=true;}}else{subscriber.complete();}}));if(syncUnsub){resubscribe();}};subscribeToSource();});}","map":{"version":3,"names":["EMPTY","operate","createOperatorSubscriber","innerFrom","timer","repeat","countOrConfig","count","Infinity","delay","_a","source","subscriber","soFar","sourceSub","resubscribe","unsubscribe","notifier","notifierSubscriber_1","subscribeToSource","subscribe","syncUnsub","undefined","complete"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/repeat.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\n\nexport interface RepeatConfig {\n  /**\n   * The number of times to repeat the source. Defaults to `Infinity`.\n   */\n  count?: number;\n\n  /**\n   * If a `number`, will delay the repeat of the source by that number of milliseconds.\n   * If a function, it will provide the number of times the source has been subscribed to,\n   * and the return value should be a valid observable input that will notify when the source\n   * should be repeated. If the notifier observable is empty, the result will complete.\n   */\n  delay?: number | ((count: number) => ObservableInput<any>);\n}\n\n/**\n * Returns an Observable that will resubscribe to the source stream when the source stream completes.\n *\n * <span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\n *\n * ![](repeat.png)\n *\n * Repeat will output values from a source until the source completes, then it will resubscribe to the\n * source a specified number of times, with a specified delay. Repeat can be particularly useful in\n * combination with closing operators like {@link take}, {@link takeUntil}, {@link first}, or {@link takeWhile},\n * as it can be used to restart a source again from scratch.\n *\n * Repeat is very similar to {@link retry}, where {@link retry} will resubscribe to the source in the error case, but\n * `repeat` will resubscribe if the source completes.\n *\n * Note that `repeat` will _not_ catch errors. Use {@link retry} for that.\n *\n * - `repeat(0)` returns an empty observable\n * - `repeat()` will repeat forever\n * - `repeat({ delay: 200 })` will repeat forever, with a delay of 200ms between repetitions.\n * - `repeat({ count: 2, delay: 400 })` will repeat twice, with a delay of 400ms between repetitions.\n * - `repeat({ delay: (count) => timer(count * 1000) })` will repeat forever, but will have a delay that grows by one second for each repetition.\n *\n * ## Example\n *\n * Repeat a message stream\n *\n * ```ts\n * import { of, repeat } from 'rxjs';\n *\n * const source = of('Repeat message');\n * const result = source.pipe(repeat(3));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results\n * // 'Repeat message'\n * // 'Repeat message'\n * // 'Repeat message'\n * ```\n *\n * Repeat 3 values, 2 times\n *\n * ```ts\n * import { interval, take, repeat } from 'rxjs';\n *\n * const source = interval(1000);\n * const result = source.pipe(take(3), repeat(2));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results every second\n * // 0\n * // 1\n * // 2\n * // 0\n * // 1\n * // 2\n * ```\n *\n * Defining two complex repeats with delays on the same source.\n * Note that the second repeat cannot be called until the first\n * repeat as exhausted it's count.\n *\n * ```ts\n * import { defer, of, repeat } from 'rxjs';\n *\n * const source = defer(() => {\n *    return of(`Hello, it is ${new Date()}`)\n * });\n *\n * source.pipe(\n *    // Repeat 3 times with a delay of 1 second between repetitions\n *    repeat({\n *      count: 3,\n *      delay: 1000,\n *    }),\n *\n *    // *Then* repeat forever, but with an exponential step-back\n *    // maxing out at 1 minute.\n *    repeat({\n *      delay: (count) => timer(Math.min(60000, 2 ^ count * 1000))\n *    })\n * )\n * ```\n *\n * @see {@link repeatWhen}\n * @see {@link retry}\n *\n * @param count The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n */\nexport function repeat<T>(countOrConfig?: number | RepeatConfig): MonoTypeOperatorFunction<T> {\n  let count = Infinity;\n  let delay: RepeatConfig['delay'];\n\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      ({ count = Infinity, delay } = countOrConfig);\n    } else {\n      count = countOrConfig;\n    }\n  }\n\n  return count <= 0\n    ? () => EMPTY\n    : operate((source, subscriber) => {\n        let soFar = 0;\n        let sourceSub: Subscription | null;\n\n        const resubscribe = () => {\n          sourceSub?.unsubscribe();\n          sourceSub = null;\n          if (delay != null) {\n            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n              notifierSubscriber.unsubscribe();\n              subscribeToSource();\n            });\n            notifier.subscribe(notifierSubscriber);\n          } else {\n            subscribeToSource();\n          }\n        };\n\n        const subscribeToSource = () => {\n          let syncUnsub = false;\n          sourceSub = source.subscribe(\n            createOperatorSubscriber(subscriber, undefined, () => {\n              if (++soFar < count) {\n                if (sourceSub) {\n                  resubscribe();\n                } else {\n                  syncUnsub = true;\n                }\n              } else {\n                subscriber.complete();\n              }\n            })\n          );\n\n          if (syncUnsub) {\n            resubscribe();\n          }\n        };\n\n        subscribeToSource();\n      });\n}\n"],"mappings":"AACA,OAASA,KAAK,KAAQ,qBAAqB,CAC3C,OAASC,OAAO,KAAQ,cAAc,CAEtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,SAAS,KAAQ,yBAAyB,CACnD,OAASC,KAAK,KAAQ,qBAAqB,CA6G3C,MAAM,SAAU,CAAAC,MAAMA,CAAIC,aAAqC,E,OAC7D,GAAI,CAAAC,KAAK,CAAGC,QAAQ,CACpB,GAAI,CAAAC,KAA4B,CAEhC,GAAIH,aAAa,EAAI,IAAI,CAAE,CACzB,GAAI,MAAO,CAAAA,aAAa,GAAK,QAAQ,CAAE,CAClCI,EAAA,CAA4BJ,aAAa,CAAAC,KAAzB,CAAhBA,KAAK,CAAAG,EAAA,UAAGF,QAAQ,CAAAE,EAAA,CAAED,KAAK,CAAKH,aAAa,CAAAG,KAAlB,C,CAC3B,IAAM,CACLF,KAAK,CAAGD,aAAa,C,EAIzB,MAAO,CAAAC,KAAK,EAAI,CAAC,CACb,WAAM,OAAAP,KAAK,CAAL,CAAK,CACXC,OAAO,CAAC,SAACU,MAAM,CAAEC,UAAU,EACzB,GAAI,CAAAC,KAAK,CAAG,CAAC,CACb,GAAI,CAAAC,SAA8B,CAElC,GAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAG,CAClBD,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAEE,WAAW,EAAE,CACxBF,SAAS,CAAG,IAAI,CAChB,GAAIL,KAAK,EAAI,IAAI,CAAE,CACjB,GAAM,CAAAQ,QAAQ,CAAG,MAAO,CAAAR,KAAK,GAAK,QAAQ,CAAGL,KAAK,CAACK,KAAK,CAAC,CAAGN,SAAS,CAACM,KAAK,CAACI,KAAK,CAAC,CAAC,CACnF,GAAM,CAAAK,oBAAkB,CAAGhB,wBAAwB,CAACU,UAAU,CAAE,WAC9DM,oBAAkB,CAACF,WAAW,EAAE,CAChCG,iBAAiB,EAAE,CACrB,CAAC,CAAC,CACFF,QAAQ,CAACG,SAAS,CAACF,oBAAkB,CAAC,C,CACvC,IAAM,CACLC,iBAAiB,EAAE,C,CAEvB,CAAC,CAED,GAAM,CAAAA,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAA,CAAG,CACxB,GAAI,CAAAE,SAAS,CAAG,KAAK,CACrBP,SAAS,CAAGH,MAAM,CAACS,SAAS,CAC1BlB,wBAAwB,CAACU,UAAU,CAAEU,SAAS,CAAE,WAC9C,GAAI,EAAET,KAAK,CAAGN,KAAK,CAAE,CACnB,GAAIO,SAAS,CAAE,CACbC,WAAW,EAAE,C,CACd,IAAM,CACLM,SAAS,CAAG,IAAI,C,EAEnB,IAAM,CACLT,UAAU,CAACW,QAAQ,EAAE,C,CAEzB,CAAC,CAAC,CACH,CAED,GAAIF,SAAS,CAAE,CACbN,WAAW,EAAE,C,CAEjB,CAAC,CAEDI,iBAAiB,EAAE,CACrB,CAAC,CAAC,CACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}