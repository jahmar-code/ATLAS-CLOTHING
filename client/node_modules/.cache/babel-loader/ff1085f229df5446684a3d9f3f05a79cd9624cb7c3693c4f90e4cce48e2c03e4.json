{"ast":null,"code":"import{Observable}from'../Observable';import{EMPTY}from'./empty';export function range(start,count,scheduler){if(count==null){count=start;start=0;}if(count<=0){return EMPTY;}var end=count+start;return new Observable(scheduler?function(subscriber){var n=start;return scheduler.schedule(function(){if(n<end){subscriber.next(n++);this.schedule();}else{subscriber.complete();}});}:function(subscriber){var n=start;while(n<end&&!subscriber.closed){subscriber.next(n++);}subscriber.complete();});}","map":{"version":3,"names":["Observable","EMPTY","range","start","count","scheduler","end","subscriber","n","schedule","next","complete","closed"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/observable/range.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { EMPTY } from './empty';\n\nexport function range(start: number, count?: number): Observable<number>;\n\n/**\n * @deprecated The `scheduler` parameter will be removed in v8. Use `range(start, count).pipe(observeOn(scheduler))` instead. Details: Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function range(start: number, count: number | undefined, scheduler: SchedulerLike): Observable<number>;\n\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * ![](range.png)\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\n * an optional {@link SchedulerLike} to regulate those deliveries.\n *\n * ## Example\n *\n * Produce a range of numbers\n *\n * ```ts\n * import { range } from 'rxjs';\n *\n * const numbers = range(1, 3);\n *\n * numbers.subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Logs:\n * // 1\n * // 2\n * // 3\n * // 'Complete!'\n * ```\n *\n * @see {@link timer}\n * @see {@link interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} count The number of sequential integers to generate.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n */\nexport function range(start: number, count?: number, scheduler?: SchedulerLike): Observable<number> {\n  if (count == null) {\n    // If one argument was passed, it's the count, not the start.\n    count = start;\n    start = 0;\n  }\n\n  if (count <= 0) {\n    // No count? We're going nowhere. Return EMPTY.\n    return EMPTY;\n  }\n\n  // Where the range should stop.\n  const end = count + start;\n\n  return new Observable(\n    scheduler\n      ? // The deprecated scheduled path.\n        (subscriber) => {\n          let n = start;\n          return scheduler.schedule(function () {\n            if (n < end) {\n              subscriber.next(n++);\n              this.schedule();\n            } else {\n              subscriber.complete();\n            }\n          });\n        }\n      : // Standard synchronous range.\n        (subscriber) => {\n          let n = start;\n          while (n < end && !subscriber.closed) {\n            subscriber.next(n++);\n          }\n          subscriber.complete();\n        }\n  );\n}\n"],"mappings":"AACA,OAASA,UAAU,KAAQ,eAAe,CAC1C,OAASC,KAAK,KAAQ,SAAS,CAqD/B,MAAM,SAAU,CAAAC,KAAKA,CAACC,KAAa,CAAEC,KAAc,CAAEC,SAAyB,EAC5E,GAAID,KAAK,EAAI,IAAI,CAAE,CAEjBA,KAAK,CAAGD,KAAK,CACbA,KAAK,CAAG,CAAC,C,CAGX,GAAIC,KAAK,EAAI,CAAC,CAAE,CAEd,MAAO,CAAAH,KAAK,C,CAId,GAAM,CAAAK,GAAG,CAAGF,KAAK,CAAGD,KAAK,CAEzB,MAAO,IAAI,CAAAH,UAAU,CACnBK,SAAS,CAEL,SAACE,UAAU,EACT,GAAI,CAAAC,CAAC,CAAGL,KAAK,CACb,MAAO,CAAAE,SAAS,CAACI,QAAQ,CAAC,WACxB,GAAID,CAAC,CAAGF,GAAG,CAAE,CACXC,UAAU,CAACG,IAAI,CAACF,CAAC,EAAE,CAAC,CACpB,IAAI,CAACC,QAAQ,EAAE,C,CAChB,IAAM,CACLF,UAAU,CAACI,QAAQ,EAAE,C,CAEzB,CAAC,CAAC,CACJ,CAAC,CAED,SAACJ,UAAU,EACT,GAAI,CAAAC,CAAC,CAAGL,KAAK,CACb,MAAOK,CAAC,CAAGF,GAAG,EAAI,CAACC,UAAU,CAACK,MAAM,CAAE,CACpCL,UAAU,CAACG,IAAI,CAACF,CAAC,EAAE,CAAC,C,CAEtBD,UAAU,CAACI,QAAQ,EAAE,CACvB,CAAC,CACN,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}