{"ast":null,"code":"import{EmptyError}from'./util/EmptyError';import{SafeSubscriber}from'./Subscriber';export function firstValueFrom(source,config){var hasConfig=typeof config==='object';return new Promise(function(resolve,reject){var subscriber=new SafeSubscriber({next:function next(value){resolve(value);subscriber.unsubscribe();},error:reject,complete:function complete(){if(hasConfig){resolve(config.defaultValue);}else{reject(new EmptyError());}}});source.subscribe(subscriber);});}","map":{"version":3,"names":["EmptyError","SafeSubscriber","firstValueFrom","source","config","hasConfig","Promise","resolve","reject","subscriber","next","value","unsubscribe","error","complete","defaultValue","subscribe"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/firstValueFrom.ts"],"sourcesContent":["import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\n\nexport interface FirstValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function firstValueFrom<T, D>(source: Observable<T>, config: FirstValueFromConfig<D>): Promise<T | D>;\nexport function firstValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * and returning a promise that will resolve as soon as the first value\n * arrives from the observable. The subscription will then be closed.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will emit at least one value,\n * *OR* complete. If the source observable does not emit one value or complete, you will\n * end up with a promise that is hung up, and potentially all of the state of an\n * async function hanging out in memory. To avoid this situation, look into adding\n * something like {@link timeout}, {@link take}, {@link takeWhile}, or {@link takeUntil}\n * amongst others.\n *\n * ## Example\n *\n * Wait for the first value from a stream and emit it from a promise in\n * an async function\n *\n * ```ts\n * import { interval, firstValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000);\n *   const firstNumber = await firstValueFrom(source$);\n *   console.log(`The first number is ${ firstNumber }`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // 'The first number is 0'\n * ```\n *\n * @see {@link lastValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function firstValueFrom<T, D>(source: Observable<T>, config?: FirstValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    const subscriber = new SafeSubscriber<T>({\n      next: (value) => {\n        resolve(value);\n        subscriber.unsubscribe();\n      },\n      error: reject,\n      complete: () => {\n        if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n    source.subscribe(subscriber);\n  });\n}\n"],"mappings":"AACA,OAASA,UAAU,KAAQ,mBAAmB,CAC9C,OAASC,cAAc,KAAQ,cAAc,CAqD7C,MAAM,SAAU,CAAAC,cAAcA,CAAOC,MAAqB,CAAEC,MAAgC,EAC1F,GAAM,CAAAC,SAAS,CAAG,MAAO,CAAAD,MAAM,GAAK,QAAQ,CAC5C,MAAO,IAAI,CAAAE,OAAO,CAAQ,SAACC,OAAO,CAAEC,MAAM,EACxC,GAAM,CAAAC,UAAU,CAAG,GAAI,CAAAR,cAAc,CAAI,CACvCS,IAAI,CAAE,SAAAA,KAACC,KAAK,EACVJ,OAAO,CAACI,KAAK,CAAC,CACdF,UAAU,CAACG,WAAW,EAAE,CAC1B,CAAC,CACDC,KAAK,CAAEL,MAAM,CACbM,QAAQ,CAAE,SAAAA,SAAA,EACR,GAAIT,SAAS,CAAE,CACbE,OAAO,CAACH,MAAO,CAACW,YAAY,CAAC,C,CAC9B,IAAM,CACLP,MAAM,CAAC,GAAI,CAAAR,UAAU,EAAE,CAAC,C,CAE5B,C,CACD,CAAC,CACFG,MAAM,CAACa,SAAS,CAACP,UAAU,CAAC,CAC9B,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}