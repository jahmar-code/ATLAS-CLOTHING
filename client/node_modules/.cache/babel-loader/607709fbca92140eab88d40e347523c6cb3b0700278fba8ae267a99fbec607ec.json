{"ast":null,"code":"import{Observable}from'../Observable';import{innerFrom}from'./innerFrom';import{EMPTY}from'./empty';export function using(resourceFactory,observableFactory){return new Observable(function(subscriber){var resource=resourceFactory();var result=observableFactory(resource);var source=result?innerFrom(result):EMPTY;source.subscribe(subscriber);return function(){if(resource){resource.unsubscribe();}};});}","map":{"version":3,"names":["Observable","innerFrom","EMPTY","using","resourceFactory","observableFactory","subscriber","resource","result","source","subscribe","unsubscribe"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/observable/using.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Unsubscribable, ObservableInput, ObservedValueOf } from '../types';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\n\n/**\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n *\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n *\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n * that object and should return an Observable. That Observable can use resource object during its execution.\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n * resource object will be shared in any way between subscriptions.\n *\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n *\n * @see {@link defer}\n *\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n * that implements `unsubscribe` method.\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n * creates an Observable, that can use injected resource object.\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n */\nexport function using<T extends ObservableInput<any>>(\n  resourceFactory: () => Unsubscribable | void,\n  observableFactory: (resource: Unsubscribable | void) => T | void\n): Observable<ObservedValueOf<T>> {\n  return new Observable<ObservedValueOf<T>>((subscriber) => {\n    const resource = resourceFactory();\n    const result = observableFactory(resource);\n    const source = result ? innerFrom(result) : EMPTY;\n    source.subscribe(subscriber);\n    return () => {\n      // NOTE: Optional chaining did not work here.\n      // Related TS Issue: https://github.com/microsoft/TypeScript/issues/40818\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,eAAe,CAE1C,OAASC,SAAS,KAAQ,aAAa,CACvC,OAASC,KAAK,KAAQ,SAAS,CA8B/B,MAAM,SAAU,CAAAC,KAAKA,CACnBC,eAA4C,CAC5CC,iBAAgE,EAEhE,MAAO,IAAI,CAAAL,UAAU,CAAqB,SAACM,UAAU,EACnD,GAAM,CAAAC,QAAQ,CAAGH,eAAe,EAAE,CAClC,GAAM,CAAAI,MAAM,CAAGH,iBAAiB,CAACE,QAAQ,CAAC,CAC1C,GAAM,CAAAE,MAAM,CAAGD,MAAM,CAAGP,SAAS,CAACO,MAAM,CAAC,CAAGN,KAAK,CACjDO,MAAM,CAACC,SAAS,CAACJ,UAAU,CAAC,CAC5B,MAAO,YAGL,GAAIC,QAAQ,CAAE,CACZA,QAAQ,CAACI,WAAW,EAAE,C,CAE1B,CAAC,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}