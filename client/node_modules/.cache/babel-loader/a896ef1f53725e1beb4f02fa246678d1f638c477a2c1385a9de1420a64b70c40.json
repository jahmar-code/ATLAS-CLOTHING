{"ast":null,"code":"import{BehaviorSubject}from'../BehaviorSubject';import{ConnectableObservable}from'../observable/ConnectableObservable';export function publishBehavior(initialValue){return function(source){var subject=new BehaviorSubject(initialValue);return new ConnectableObservable(source,function(){return subject;});};}","map":{"version":3,"names":["BehaviorSubject","ConnectableObservable","publishBehavior","initialValue","source","subject"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/publishBehavior.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n\n/**\n * Creates a {@link ConnectableObservable} that utilizes a {@link BehaviorSubject}.\n *\n * @param initialValue The initial value passed to the {@link BehaviorSubject}.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable that uses a\n * {@link BehaviorSubject} under the hood, use {@link connectable}.\n * `source.pipe(publishBehavior(initValue))` is equivalent to\n * `connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publishBehavior`, use the {@link share} operator instead.\n * `source.pipe(publishBehavior(initValue), refCount())` is equivalent to\n * `source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishBehavior<T>(initialValue: T): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  // Note that this has *never* supported the selector function.\n  return (source) => {\n    const subject = new BehaviorSubject<T>(initialValue);\n    return new ConnectableObservable(source, () => subject);\n  };\n}\n"],"mappings":"AACA,OAASA,eAAe,KAAQ,oBAAoB,CACpD,OAASC,qBAAqB,KAAQ,qCAAqC,CAiB3E,MAAM,SAAU,CAAAC,eAAeA,CAAIC,YAAe,EAEhD,MAAO,UAACC,MAAM,EACZ,GAAM,CAAAC,OAAO,CAAG,GAAI,CAAAL,eAAe,CAAIG,YAAY,CAAC,CACpD,MAAO,IAAI,CAAAF,qBAAqB,CAACG,MAAM,CAAE,WAAM,OAAAC,OAAO,CAAP,CAAO,CAAC,CACzD,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}