{"ast":null,"code":"import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function defaultIfEmpty(defaultValue){return operate(function(source,subscriber){var hasValue=false;source.subscribe(createOperatorSubscriber(subscriber,function(value){hasValue=true;subscriber.next(value);},function(){if(!hasValue){subscriber.next(defaultValue);}subscriber.complete();}));});}","map":{"version":3,"names":["operate","createOperatorSubscriber","defaultIfEmpty","defaultValue","source","subscriber","hasValue","subscribe","value","next","complete"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/defaultIfEmpty.ts"],"sourcesContent":["import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n *\n * If no clicks happen in 5 seconds, then emit 'no clicks'\n *\n * ```ts\n * import { fromEvent, takeUntil, interval, defaultIfEmpty } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param defaultValue The default value used if the source\n * Observable is empty.\n * @return A function that returns an Observable that emits either the\n * specified `defaultValue` if the source Observable emits no items, or the\n * values emitted by the source Observable.\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R): OperatorFunction<T, T | R> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => {\n          if (!hasValue) {\n            subscriber.next(defaultValue!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"],"mappings":"AACA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAqC/D,MAAM,SAAU,CAAAC,cAAcA,CAAOC,YAAe,EAClD,MAAO,CAAAH,OAAO,CAAC,SAACI,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,QAAQ,CAAG,KAAK,CACpBF,MAAM,CAACG,SAAS,CACdN,wBAAwB,CACtBI,UAAU,CACV,SAACG,KAAK,EACJF,QAAQ,CAAG,IAAI,CACfD,UAAU,CAACI,IAAI,CAACD,KAAK,CAAC,CACxB,CAAC,CACD,WACE,GAAI,CAACF,QAAQ,CAAE,CACbD,UAAU,CAACI,IAAI,CAACN,YAAa,CAAC,C,CAEhCE,UAAU,CAACK,QAAQ,EAAE,CACvB,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}