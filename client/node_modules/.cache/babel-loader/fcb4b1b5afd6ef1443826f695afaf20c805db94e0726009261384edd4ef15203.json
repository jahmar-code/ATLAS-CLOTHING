{"ast":null,"code":"import{__values}from\"tslib\";import{Subject}from'../Subject';import{Subscription}from'../Subscription';import{operate}from'../util/lift';import{innerFrom}from'../observable/innerFrom';import{createOperatorSubscriber}from'./OperatorSubscriber';import{noop}from'../util/noop';import{arrRemove}from'../util/arrRemove';export function windowToggle(openings,closingSelector){return operate(function(source,subscriber){var windows=[];var handleError=function handleError(err){while(0<windows.length){windows.shift().error(err);}subscriber.error(err);};innerFrom(openings).subscribe(createOperatorSubscriber(subscriber,function(openValue){var window=new Subject();windows.push(window);var closingSubscription=new Subscription();var closeWindow=function closeWindow(){arrRemove(windows,window);window.complete();closingSubscription.unsubscribe();};var closingNotifier;try{closingNotifier=innerFrom(closingSelector(openValue));}catch(err){handleError(err);return;}subscriber.next(window.asObservable());closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber,closeWindow,noop,handleError)));},noop));source.subscribe(createOperatorSubscriber(subscriber,function(value){var e_1,_a;var windowsCopy=windows.slice();try{for(var windowsCopy_1=__values(windowsCopy),windowsCopy_1_1=windowsCopy_1.next();!windowsCopy_1_1.done;windowsCopy_1_1=windowsCopy_1.next()){var window_1=windowsCopy_1_1.value;window_1.next(value);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(windowsCopy_1_1&&!windowsCopy_1_1.done&&(_a=windowsCopy_1.return))_a.call(windowsCopy_1);}finally{if(e_1)throw e_1.error;}}},function(){while(0<windows.length){windows.shift().complete();}subscriber.complete();},handleError,function(){while(0<windows.length){windows.shift().unsubscribe();}}));});}","map":{"version":3,"names":["Subject","Subscription","operate","innerFrom","createOperatorSubscriber","noop","arrRemove","windowToggle","openings","closingSelector","source","subscriber","windows","handleError","err","length","shift","error","subscribe","openValue","window","push","closingSubscription","closeWindow","complete","unsubscribe","closingNotifier","next","asObservable","add","value","windowsCopy","slice","windowsCopy_1","__values","windowsCopy_1_1","done","window_1"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/windowToggle.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, windowToggle, EMPTY, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n *   mergeAll()\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits a next notification, signals that the\n * associated window should complete.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowToggle<T, O>(\n  openings: ObservableInput<O>,\n  closingSelector: (openValue: O) => ObservableInput<any>\n): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    const windows: Subject<T>[] = [];\n\n    const handleError = (err: any) => {\n      while (0 < windows.length) {\n        windows.shift()!.error(err);\n      }\n      subscriber.error(err);\n    };\n\n    innerFrom(openings).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (openValue) => {\n          const window = new Subject<T>();\n          windows.push(window);\n          const closingSubscription = new Subscription();\n          const closeWindow = () => {\n            arrRemove(windows, window);\n            window.complete();\n            closingSubscription.unsubscribe();\n          };\n\n          let closingNotifier: Observable<any>;\n          try {\n            closingNotifier = innerFrom(closingSelector(openValue));\n          } catch (err) {\n            handleError(err);\n            return;\n          }\n\n          subscriber.next(window.asObservable());\n\n          closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n        },\n        noop\n      )\n    );\n\n    // Subscribe to the source to get things started.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Copy the windows array before we emit to\n          // make sure we don't have issues with reentrant code.\n          const windowsCopy = windows.slice();\n          for (const window of windowsCopy) {\n            window.next(value);\n          }\n        },\n        () => {\n          // Complete all of our windows before we complete.\n          while (0 < windows.length) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        handleError,\n        () => {\n          // Add this finalization so that all window subjects are\n          // disposed of. This way, if a user tries to subscribe\n          // to a window *after* the outer subscription has been unsubscribed,\n          // they will get an error, instead of waiting forever to\n          // see if a value arrives.\n          while (0 < windows.length) {\n            windows.shift()!.unsubscribe();\n          }\n        }\n      )\n    );\n  });\n}\n"],"mappings":"4BACA,OAASA,OAAO,KAAQ,YAAY,CACpC,OAASC,YAAY,KAAQ,iBAAiB,CAE9C,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,SAAS,KAAQ,yBAAyB,CACnD,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,IAAI,KAAQ,cAAc,CACnC,OAASC,SAAS,KAAQ,mBAAmB,CAiD7C,MAAM,SAAU,CAAAC,YAAYA,CAC1BC,QAA4B,CAC5BC,eAAuD,EAEvD,MAAO,CAAAP,OAAO,CAAC,SAACQ,MAAM,CAAEC,UAAU,EAChC,GAAM,CAAAC,OAAO,CAAiB,EAAE,CAEhC,GAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIC,GAAQ,EAC3B,MAAO,CAAC,CAAGF,OAAO,CAACG,MAAM,CAAE,CACzBH,OAAO,CAACI,KAAK,EAAG,CAACC,KAAK,CAACH,GAAG,CAAC,C,CAE7BH,UAAU,CAACM,KAAK,CAACH,GAAG,CAAC,CACvB,CAAC,CAEDX,SAAS,CAACK,QAAQ,CAAC,CAACU,SAAS,CAC3Bd,wBAAwB,CACtBO,UAAU,CACV,SAACQ,SAAS,EACR,GAAM,CAAAC,MAAM,CAAG,GAAI,CAAApB,OAAO,EAAK,CAC/BY,OAAO,CAACS,IAAI,CAACD,MAAM,CAAC,CACpB,GAAM,CAAAE,mBAAmB,CAAG,GAAI,CAAArB,YAAY,EAAE,CAC9C,GAAM,CAAAsB,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAG,CAClBjB,SAAS,CAACM,OAAO,CAAEQ,MAAM,CAAC,CAC1BA,MAAM,CAACI,QAAQ,EAAE,CACjBF,mBAAmB,CAACG,WAAW,EAAE,CACnC,CAAC,CAED,GAAI,CAAAC,eAAgC,CACpC,GAAI,CACFA,eAAe,CAAGvB,SAAS,CAACM,eAAe,CAACU,SAAS,CAAC,CAAC,C,CACvD,MAAOL,GAAG,CAAE,CACZD,WAAW,CAACC,GAAG,CAAC,CAChB,O,CAGFH,UAAU,CAACgB,IAAI,CAACP,MAAM,CAACQ,YAAY,EAAE,CAAC,CAEtCN,mBAAmB,CAACO,GAAG,CAACH,eAAe,CAACR,SAAS,CAACd,wBAAwB,CAACO,UAAU,CAAEY,WAAW,CAAElB,IAAI,CAAEQ,WAAW,CAAC,CAAC,CAAC,CAC1H,CAAC,CACDR,IAAI,CACL,CACF,CAGDK,MAAM,CAACQ,SAAS,CACdd,wBAAwB,CACtBO,UAAU,CACV,SAACmB,KAAQ,E,WAGP,GAAM,CAAAC,WAAW,CAAGnB,OAAO,CAACoB,KAAK,EAAE,C,IACnC,IAAqB,IAAAC,aAAA,CAAAC,QAAA,CAAAH,WAAW,EAAAI,eAAA,CAAAF,aAAA,CAAAN,IAAA,IAAAQ,eAAA,CAAAC,IAAA,CAAAD,eAAA,CAAAF,aAAA,CAAAN,IAAA,GAAE,CAA7B,GAAM,CAAAU,QAAM,CAAAF,eAAA,CAAAL,KAAA,CACfO,QAAM,CAACV,IAAI,CAACG,KAAK,CAAC,C,4KAEtB,CAAC,CACD,WAEE,MAAO,CAAC,CAAGlB,OAAO,CAACG,MAAM,CAAE,CACzBH,OAAO,CAACI,KAAK,EAAG,CAACQ,QAAQ,EAAE,C,CAE7Bb,UAAU,CAACa,QAAQ,EAAE,CACvB,CAAC,CACDX,WAAW,CACX,WAME,MAAO,CAAC,CAAGD,OAAO,CAACG,MAAM,CAAE,CACzBH,OAAO,CAACI,KAAK,EAAG,CAACS,WAAW,EAAE,C,CAElC,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}