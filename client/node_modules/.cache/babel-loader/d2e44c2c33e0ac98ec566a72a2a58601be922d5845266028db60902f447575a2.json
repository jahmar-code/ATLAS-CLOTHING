{"ast":null,"code":"import{EMPTY}from'../observable/empty';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function take(count){return count<=0?function(){return EMPTY;}:operate(function(source,subscriber){var seen=0;source.subscribe(createOperatorSubscriber(subscriber,function(value){if(++seen<=count){subscriber.next(value);if(count<=seen){subscriber.complete();}}}));});}","map":{"version":3,"names":["EMPTY","operate","createOperatorSubscriber","take","count","source","subscriber","seen","subscribe","value","next","complete"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/take.ts"],"sourcesContent":["import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n *\n * Take the first 5 seconds of an infinite 1-second interval Observable\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n"],"mappings":"AACA,OAASA,KAAK,KAAQ,qBAAqB,CAC3C,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CA4C/D,MAAM,SAAU,CAAAC,IAAIA,CAAIC,KAAa,EACnC,MAAO,CAAAA,KAAK,EAAI,CAAC,CAEb,WAAM,OAAAJ,KAAK,CAAL,CAAK,CACXC,OAAO,CAAC,SAACI,MAAM,CAAEC,UAAU,EACzB,GAAI,CAAAC,IAAI,CAAG,CAAC,CACZF,MAAM,CAACG,SAAS,CACdN,wBAAwB,CAACI,UAAU,CAAE,SAACG,KAAK,EAIzC,GAAI,EAAEF,IAAI,EAAIH,KAAK,CAAE,CACnBE,UAAU,CAACI,IAAI,CAACD,KAAK,CAAC,CAItB,GAAIL,KAAK,EAAIG,IAAI,CAAE,CACjBD,UAAU,CAACK,QAAQ,EAAE,C,EAG3B,CAAC,CAAC,CACH,CACH,CAAC,CAAC,CACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}