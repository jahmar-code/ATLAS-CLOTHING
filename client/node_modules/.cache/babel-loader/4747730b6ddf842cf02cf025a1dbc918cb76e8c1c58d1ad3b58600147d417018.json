{"ast":null,"code":"import{__extends}from\"tslib\";import{Subscriber}from'../Subscriber';export function createOperatorSubscriber(destination,onNext,onComplete,onError,onFinalize){return new OperatorSubscriber(destination,onNext,onComplete,onError,onFinalize);}var OperatorSubscriber=function(_super){__extends(OperatorSubscriber,_super);function OperatorSubscriber(destination,onNext,onComplete,onError,onFinalize,shouldUnsubscribe){var _this=_super.call(this,destination)||this;_this.onFinalize=onFinalize;_this.shouldUnsubscribe=shouldUnsubscribe;_this._next=onNext?function(value){try{onNext(value);}catch(err){destination.error(err);}}:_super.prototype._next;_this._error=onError?function(err){try{onError(err);}catch(err){destination.error(err);}finally{this.unsubscribe();}}:_super.prototype._error;_this._complete=onComplete?function(){try{onComplete();}catch(err){destination.error(err);}finally{this.unsubscribe();}}:_super.prototype._complete;return _this;}OperatorSubscriber.prototype.unsubscribe=function(){var _a;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var closed_1=this.closed;_super.prototype.unsubscribe.call(this);!closed_1&&((_a=this.onFinalize)===null||_a===void 0?void 0:_a.call(this));}};return OperatorSubscriber;}(Subscriber);export{OperatorSubscriber};","map":{"version":3,"names":["Subscriber","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","_super","__extends","shouldUnsubscribe","_this","call","_next","value","err","error","prototype","_error","unsubscribe","_complete","closed_1","closed","_a"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/OperatorSubscriber.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n"],"mappings":"6BAAA,OAASA,UAAU,KAAQ,eAAe,CAc1C,MAAM,SAAU,CAAAC,wBAAwBA,CACtCC,WAA4B,CAC5BC,MAA2B,CAC3BC,UAAuB,CACvBC,OAA4B,CAC5BC,UAAuB,EAEvB,MAAO,IAAI,CAAAC,kBAAkB,CAACL,WAAW,CAAEC,MAAM,CAAEC,UAAU,CAAEC,OAAO,CAAEC,UAAU,CAAC,CACrF,CAMA,IAAAC,kBAAA,UAAAC,MAAA,EAA2CC,SAAA,CAAAF,kBAAA,CAAAC,MAAA,EAiBzC,SAAAD,mBACEL,WAA4B,CAC5BC,MAA2B,CAC3BC,UAAuB,CACvBC,OAA4B,CACpBC,UAAuB,CACvBI,iBAAiC,EAN3C,IAAAC,KAAA,CAoBEH,MAAA,CAAAI,IAAA,MAAMV,WAAW,CAAC,OAfVS,KAAA,CAAAL,UAAU,CAAVA,UAAU,CACVK,KAAA,CAAAD,iBAAiB,CAAjBA,iBAAiB,CAezBC,KAAI,CAACE,KAAK,CAAGV,MAAM,CACf,SAAuCW,KAAQ,EAC7C,GAAI,CACFX,MAAM,CAACW,KAAK,CAAC,C,CACb,MAAOC,GAAG,CAAE,CACZb,WAAW,CAACc,KAAK,CAACD,GAAG,CAAC,C,CAE1B,CAAC,CACDP,MAAA,CAAAS,SAAA,CAAMJ,KAAK,CACfF,KAAI,CAACO,MAAM,CAAGb,OAAO,CACjB,SAAuCU,GAAQ,EAC7C,GAAI,CACFV,OAAO,CAACU,GAAG,CAAC,C,CACZ,MAAOA,GAAG,CAAE,CAEZb,WAAW,CAACc,KAAK,CAACD,GAAG,CAAC,C,CACvB,OAAS,CAER,IAAI,CAACI,WAAW,EAAE,C,CAEtB,CAAC,CACDX,MAAA,CAAAS,SAAA,CAAMC,MAAM,CAChBP,KAAI,CAACS,SAAS,CAAGhB,UAAU,CACvB,WACE,GAAI,CACFA,UAAU,EAAE,C,CACZ,MAAOW,GAAG,CAAE,CAEZb,WAAW,CAACc,KAAK,CAACD,GAAG,CAAC,C,CACvB,OAAS,CAER,IAAI,CAACI,WAAW,EAAE,C,CAEtB,CAAC,CACDX,MAAA,CAAAS,SAAA,CAAMG,SAAS,C,aACrB,CAEAb,kBAAA,CAAAU,SAAA,CAAAE,WAAW,CAAX,W,OACE,GAAI,CAAC,IAAI,CAACT,iBAAiB,EAAI,IAAI,CAACA,iBAAiB,EAAE,CAAE,CAC/C,IAAAW,QAAM,CAAK,IAAI,CAAAC,MAAT,CACdd,MAAA,CAAAS,SAAA,CAAME,WAAW,CAAAP,IAAA,MAAE,CAEnB,CAACS,QAAM,GAAI,CAAAE,EAAA,KAAI,CAACjB,UAAU,UAAAiB,EAAA,iBAAAA,EAAA,CAAAX,IAAA,CAAf,IAAI,CAAe,E,CAElC,CAAC,CACH,OAAAL,kBAAC,CAAD,CAAC,CAnF0CP,UAAU,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}