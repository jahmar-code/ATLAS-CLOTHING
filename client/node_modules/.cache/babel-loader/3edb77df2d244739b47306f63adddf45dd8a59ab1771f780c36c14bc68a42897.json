{"ast":null,"code":"import{operate}from'../util/lift';import{noop}from'../util/noop';import{createOperatorSubscriber}from'./OperatorSubscriber';import{innerFrom}from'../observable/innerFrom';export function buffer(closingNotifier){return operate(function(source,subscriber){var currentBuffer=[];source.subscribe(createOperatorSubscriber(subscriber,function(value){return currentBuffer.push(value);},function(){subscriber.next(currentBuffer);subscriber.complete();}));innerFrom(closingNotifier).subscribe(createOperatorSubscriber(subscriber,function(){var b=currentBuffer;currentBuffer=[];subscriber.next(b);},noop));return function(){currentBuffer=null;};});}","map":{"version":3,"names":["operate","noop","createOperatorSubscriber","innerFrom","buffer","closingNotifier","source","subscriber","currentBuffer","subscribe","value","push","next","complete","b"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/buffer.ts"],"sourcesContent":["import { OperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * `ObservableInput` (that internally gets converted to an Observable)\n * emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval, buffer } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param closingNotifier An `ObservableInput` that signals the\n * buffer to be emitted on the output Observable.\n * @return A function that returns an Observable of buffers, which are arrays\n * of values.\n */\nexport function buffer<T>(closingNotifier: ObservableInput<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The current buffered values.\n    let currentBuffer: T[] = [];\n\n    // Subscribe to our source.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => currentBuffer.push(value),\n        () => {\n          subscriber.next(currentBuffer);\n          subscriber.complete();\n        }\n      )\n    );\n\n    // Subscribe to the closing notifier.\n    innerFrom(closingNotifier).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          // Start a new buffer and emit the previous one.\n          const b = currentBuffer;\n          currentBuffer = [];\n          subscriber.next(b);\n        },\n        noop\n      )\n    );\n\n    return () => {\n      // Ensure buffered values are released on finalization.\n      currentBuffer = null!;\n    };\n  });\n}\n"],"mappings":"AACA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,IAAI,KAAQ,cAAc,CACnC,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,SAAS,KAAQ,yBAAyB,CAwCnD,MAAM,SAAU,CAAAC,MAAMA,CAAIC,eAAqC,EAC7D,MAAO,CAAAL,OAAO,CAAC,SAACM,MAAM,CAAEC,UAAU,EAEhC,GAAI,CAAAC,aAAa,CAAQ,EAAE,CAG3BF,MAAM,CAACG,SAAS,CACdP,wBAAwB,CACtBK,UAAU,CACV,SAACG,KAAK,EAAK,OAAAF,aAAa,CAACG,IAAI,CAACD,KAAK,CAAC,CAAzB,CAAyB,CACpC,WACEH,UAAU,CAACK,IAAI,CAACJ,aAAa,CAAC,CAC9BD,UAAU,CAACM,QAAQ,EAAE,CACvB,CAAC,CACF,CACF,CAGDV,SAAS,CAACE,eAAe,CAAC,CAACI,SAAS,CAClCP,wBAAwB,CACtBK,UAAU,CACV,WAEE,GAAM,CAAAO,CAAC,CAAGN,aAAa,CACvBA,aAAa,CAAG,EAAE,CAClBD,UAAU,CAACK,IAAI,CAACE,CAAC,CAAC,CACpB,CAAC,CACDb,IAAI,CACL,CACF,CAED,MAAO,YAELO,aAAa,CAAG,IAAK,CACvB,CAAC,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}