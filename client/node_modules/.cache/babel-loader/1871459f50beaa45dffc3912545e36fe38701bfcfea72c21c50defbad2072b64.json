{"ast":null,"code":"import{asyncScheduler}from'../scheduler/async';import{throttle}from'./throttle';import{timer}from'../observable/timer';export function throttleTime(duration,scheduler,config){if(scheduler===void 0){scheduler=asyncScheduler;}var duration$=timer(duration,scheduler);return throttle(function(){return duration$;},config);}","map":{"version":3,"names":["asyncScheduler","throttle","timer","throttleTime","duration","scheduler","config","duration$"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/throttleTime.ts"],"sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { throttle, ThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { timer } from '../observable/timer';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * ![](throttleTime.png)\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link SchedulerLike} for managing timers.\n *\n * ## Examples\n *\n * ### Limit click rate\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, throttleTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttleTime(1000));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param scheduler The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling. Defaults to {@link asyncScheduler}.\n * @param config A configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return A function that returns an Observable that performs the throttle\n * operation to limit the rate of emissions from the source.\n */\nexport function throttleTime<T>(\n  duration: number,\n  scheduler: SchedulerLike = asyncScheduler,\n  config?: ThrottleConfig\n): MonoTypeOperatorFunction<T> {\n  const duration$ = timer(duration, scheduler);\n  return throttle(() => duration$, config);\n}\n"],"mappings":"AAAA,OAASA,cAAc,KAAQ,oBAAoB,CACnD,OAASC,QAAQ,KAAwB,YAAY,CAErD,OAASC,KAAK,KAAQ,qBAAqB,CAmD3C,MAAM,SAAU,CAAAC,YAAYA,CAC1BC,QAAgB,CAChBC,SAAyC,CACzCC,MAAuB,EADvB,GAAAD,SAAA,WAAAA,SAAA,CAAAL,cAAyC,EAGzC,GAAM,CAAAO,SAAS,CAAGL,KAAK,CAACE,QAAQ,CAAEC,SAAS,CAAC,CAC5C,MAAO,CAAAJ,QAAQ,CAAC,WAAM,OAAAM,SAAS,CAAT,CAAS,CAAED,MAAM,CAAC,CAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}