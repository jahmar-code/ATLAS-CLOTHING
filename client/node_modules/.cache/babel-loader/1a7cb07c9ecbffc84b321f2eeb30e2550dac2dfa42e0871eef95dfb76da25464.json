{"ast":null,"code":"import{__read,__spreadArray}from\"tslib\";import{merge}from'./merge';export function mergeWith(){var otherSources=[];for(var _i=0;_i<arguments.length;_i++){otherSources[_i]=arguments[_i];}return merge.apply(void 0,__spreadArray([],__read(otherSources)));}","map":{"version":3,"names":["merge","mergeWith","otherSources","_i","arguments","length","apply","__spreadArray","__read"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/mergeWith.ts"],"sourcesContent":["import { ObservableInputTuple, OperatorFunction } from '../types';\nimport { merge } from './merge';\n\n/**\n * Merge the values from all observables to a single observable result.\n *\n * Creates an observable, that when subscribed to, subscribes to the source\n * observable, and all other sources provided as arguments. All values from\n * every source are emitted from the resulting subscription.\n *\n * When all sources complete, the resulting observable will complete.\n *\n * When any source errors, the resulting observable will error.\n *\n * ## Example\n *\n * Joining all outputs from multiple user input event streams\n *\n * ```ts\n * import { fromEvent, map, mergeWith } from 'rxjs';\n *\n * const clicks$ = fromEvent(document, 'click').pipe(map(() => 'click'));\n * const mousemoves$ = fromEvent(document, 'mousemove').pipe(map(() => 'mousemove'));\n * const dblclicks$ = fromEvent(document, 'dblclick').pipe(map(() => 'dblclick'));\n *\n * mousemoves$\n *   .pipe(mergeWith(clicks$, dblclicks$))\n *   .subscribe(x => console.log(x));\n *\n * // result (assuming user interactions)\n * // 'mousemove'\n * // 'mousemove'\n * // 'mousemove'\n * // 'click'\n * // 'click'\n * // 'dblclick'\n * ```\n *\n * @see {@link merge}\n *\n * @param otherSources the sources to combine the current source with.\n * @return A function that returns an Observable that merges the values from\n * all given Observables.\n */\nexport function mergeWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  return merge(...otherSources);\n}\n"],"mappings":"wCACA,OAASA,KAAK,KAAQ,SAAS,CA2C/B,MAAM,SAAU,CAAAC,SAASA,CAAA,EACvB,IAAAC,YAAA,I,IAAA,IAAAC,EAAA,EAA6C,CAA7CA,EAAA,CAAAC,SAAA,CAAAC,MAA6C,CAA7CF,EAAA,EAA6C,EAA7CD,YAAA,CAAAC,EAAA,EAAAC,SAAA,CAAAD,EAAA,E,CAEA,MAAO,CAAAH,KAAK,CAAAM,KAAA,QAAAC,aAAA,IAAAC,MAAA,CAAIN,YAAY,IAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}