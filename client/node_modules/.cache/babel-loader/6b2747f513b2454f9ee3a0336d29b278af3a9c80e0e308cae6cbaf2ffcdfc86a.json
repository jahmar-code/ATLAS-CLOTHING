{"ast":null,"code":"import{Observable}from'../Observable';export function scheduleArray(input,scheduler){return new Observable(function(subscriber){var i=0;return scheduler.schedule(function(){if(i===input.length){subscriber.complete();}else{subscriber.next(input[i++]);if(!subscriber.closed){this.schedule();}}});});}","map":{"version":3,"names":["Observable","scheduleArray","input","scheduler","subscriber","i","schedule","length","complete","next","closed"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/scheduled/scheduleArray.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,eAAe,CAG1C,MAAM,SAAU,CAAAC,aAAaA,CAAIC,KAAmB,CAAEC,SAAwB,EAC5E,MAAO,IAAI,CAAAH,UAAU,CAAI,SAACI,UAAU,EAElC,GAAI,CAAAC,CAAC,CAAG,CAAC,CAET,MAAO,CAAAF,SAAS,CAACG,QAAQ,CAAC,WACxB,GAAID,CAAC,GAAKH,KAAK,CAACK,MAAM,CAAE,CAGtBH,UAAU,CAACI,QAAQ,EAAE,C,CACtB,IAAM,CAGLJ,UAAU,CAACK,IAAI,CAACP,KAAK,CAACG,CAAC,EAAE,CAAC,CAAC,CAI3B,GAAI,CAACD,UAAU,CAACM,MAAM,CAAE,CACtB,IAAI,CAACJ,QAAQ,EAAE,C,EAGrB,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}