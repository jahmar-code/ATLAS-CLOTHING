{"ast":null,"code":"import{__extends}from\"tslib\";import{Subject}from'./Subject';import{dateTimestampProvider}from'./scheduler/dateTimestampProvider';var ReplaySubject=function(_super){__extends(ReplaySubject,_super);function ReplaySubject(_bufferSize,_windowTime,_timestampProvider){if(_bufferSize===void 0){_bufferSize=Infinity;}if(_windowTime===void 0){_windowTime=Infinity;}if(_timestampProvider===void 0){_timestampProvider=dateTimestampProvider;}var _this=_super.call(this)||this;_this._bufferSize=_bufferSize;_this._windowTime=_windowTime;_this._timestampProvider=_timestampProvider;_this._buffer=[];_this._infiniteTimeWindow=true;_this._infiniteTimeWindow=_windowTime===Infinity;_this._bufferSize=Math.max(1,_bufferSize);_this._windowTime=Math.max(1,_windowTime);return _this;}ReplaySubject.prototype.next=function(value){var _a=this,isStopped=_a.isStopped,_buffer=_a._buffer,_infiniteTimeWindow=_a._infiniteTimeWindow,_timestampProvider=_a._timestampProvider,_windowTime=_a._windowTime;if(!isStopped){_buffer.push(value);!_infiniteTimeWindow&&_buffer.push(_timestampProvider.now()+_windowTime);}this._trimBuffer();_super.prototype.next.call(this,value);};ReplaySubject.prototype._subscribe=function(subscriber){this._throwIfClosed();this._trimBuffer();var subscription=this._innerSubscribe(subscriber);var _a=this,_infiniteTimeWindow=_a._infiniteTimeWindow,_buffer=_a._buffer;var copy=_buffer.slice();for(var i=0;i<copy.length&&!subscriber.closed;i+=_infiniteTimeWindow?1:2){subscriber.next(copy[i]);}this._checkFinalizedStatuses(subscriber);return subscription;};ReplaySubject.prototype._trimBuffer=function(){var _a=this,_bufferSize=_a._bufferSize,_timestampProvider=_a._timestampProvider,_buffer=_a._buffer,_infiniteTimeWindow=_a._infiniteTimeWindow;var adjustedBufferSize=(_infiniteTimeWindow?1:2)*_bufferSize;_bufferSize<Infinity&&adjustedBufferSize<_buffer.length&&_buffer.splice(0,_buffer.length-adjustedBufferSize);if(!_infiniteTimeWindow){var now=_timestampProvider.now();var last=0;for(var i=1;i<_buffer.length&&_buffer[i]<=now;i+=2){last=i;}last&&_buffer.splice(0,last+1);}};return ReplaySubject;}(Subject);export{ReplaySubject};","map":{"version":3,"names":["Subject","dateTimestampProvider","ReplaySubject","_super","__extends","_bufferSize","_windowTime","_timestampProvider","Infinity","_this","call","_buffer","_infiniteTimeWindow","Math","max","prototype","next","value","_a","isStopped","push","now","_trimBuffer","_subscribe","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","slice","i","length","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/ReplaySubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { TimestampProvider } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n *\n * `ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n * `ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\n * value for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n *\n * When a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\n * a First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\n * error if it has observed an error.\n *\n * There are two main configuration items to be concerned with:\n *\n * 1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n * 2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n *\n * Both configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\n * are less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n *\n * ### Differences with BehaviorSubject\n *\n * `BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple of exceptions:\n *\n * 1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n * 2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n * @see {@link shareReplay}\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _buffer: (T | number)[] = [];\n  private _infiniteTimeWindow = true;\n\n  /**\n   * @param bufferSize The size of the buffer to replay on subscription\n   * @param windowTime The amount of time the buffered items will stay buffered\n   * @param timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\n   * calculate the amount of time something has been buffered.\n   */\n  constructor(\n    private _bufferSize = Infinity,\n    private _windowTime = Infinity,\n    private _timestampProvider: TimestampProvider = dateTimestampProvider\n  ) {\n    super();\n    this._infiniteTimeWindow = _windowTime === Infinity;\n    this._bufferSize = Math.max(1, _bufferSize);\n    this._windowTime = Math.max(1, _windowTime);\n  }\n\n  next(value: T): void {\n    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n    if (!isStopped) {\n      _buffer.push(value);\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n    this._trimBuffer();\n    super.next(value);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._trimBuffer();\n\n    const subscription = this._innerSubscribe(subscriber);\n\n    const { _infiniteTimeWindow, _buffer } = this;\n    // We use a copy here, so reentrant code does not mutate our array while we're\n    // emitting it to a new subscriber.\n    const copy = _buffer.slice();\n    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i] as T);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  }\n\n  private _trimBuffer() {\n    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n    // If we don't have an infinite buffer size, and we're over the length,\n    // use splice to truncate the old buffer values off. Note that we have to\n    // double the size for instances where we're not using an infinite time window\n    // because we're storing the values and the timestamps in the same array.\n    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    // Now, if we're not in an infinite time window, remove all values where the time is\n    // older than what is allowed.\n    if (!_infiniteTimeWindow) {\n      const now = _timestampProvider.now();\n      let last = 0;\n      // Search the array for the first timestamp that isn't expired and\n      // truncate the buffer up to that point.\n      for (let i = 1; i < _buffer.length && (_buffer[i] as number) <= now; i += 2) {\n        last = i;\n      }\n      last && _buffer.splice(0, last + 1);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}