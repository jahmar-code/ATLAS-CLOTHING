{"ast":null,"code":"import{__read,__spreadArray}from\"tslib\";import{combineLatest}from'./combineLatest';export function combineLatestWith(){var otherSources=[];for(var _i=0;_i<arguments.length;_i++){otherSources[_i]=arguments[_i];}return combineLatest.apply(void 0,__spreadArray([],__read(otherSources)));}","map":{"version":3,"names":["combineLatest","combineLatestWith","otherSources","_i","arguments","length","apply","__spreadArray","__read"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/combineLatestWith.ts"],"sourcesContent":["import { ObservableInputTuple, OperatorFunction, Cons } from '../types';\nimport { combineLatest } from './combineLatest';\n\n/**\n * Create an observable that combines the latest values from all passed observables and the source\n * into arrays and emits them.\n *\n * Returns an observable, that when subscribed to, will subscribe to the source observable and all\n * sources provided as arguments. Once all sources emit at least one value, all of the latest values\n * will be emitted as an array. After that, every time any source emits a value, all of the latest values\n * will be emitted as an array.\n *\n * This is a useful operator for eagerly calculating values based off of changed inputs.\n *\n * ## Example\n *\n * Simple concatenation of values from two inputs\n *\n * ```ts\n * import { fromEvent, combineLatestWith, map } from 'rxjs';\n *\n * // Setup: Add two inputs to the page\n * const input1 = document.createElement('input');\n * document.body.appendChild(input1);\n * const input2 = document.createElement('input');\n * document.body.appendChild(input2);\n *\n * // Get streams of changes\n * const input1Changes$ = fromEvent(input1, 'change');\n * const input2Changes$ = fromEvent(input2, 'change');\n *\n * // Combine the changes by adding them together\n * input1Changes$.pipe(\n *   combineLatestWith(input2Changes$),\n *   map(([e1, e2]) => (<HTMLInputElement>e1.target).value + ' - ' + (<HTMLInputElement>e2.target).value)\n * )\n * .subscribe(x => console.log(x));\n * ```\n *\n * @param otherSources the other sources to subscribe to.\n * @return A function that returns an Observable that emits the latest\n * emissions from both source and provided Observables.\n */\nexport function combineLatestWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, Cons<T, A>> {\n  return combineLatest(...otherSources);\n}\n"],"mappings":"wCACA,OAASA,aAAa,KAAQ,iBAAiB,CA0C/C,MAAM,SAAU,CAAAC,iBAAiBA,CAAA,EAC/B,IAAAC,YAAA,I,IAAA,IAAAC,EAAA,EAA6C,CAA7CA,EAAA,CAAAC,SAAA,CAAAC,MAA6C,CAA7CF,EAAA,EAA6C,EAA7CD,YAAA,CAAAC,EAAA,EAAAC,SAAA,CAAAD,EAAA,E,CAEA,MAAO,CAAAH,aAAa,CAAAM,KAAA,QAAAC,aAAA,IAAAC,MAAA,CAAIN,YAAY,IACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}