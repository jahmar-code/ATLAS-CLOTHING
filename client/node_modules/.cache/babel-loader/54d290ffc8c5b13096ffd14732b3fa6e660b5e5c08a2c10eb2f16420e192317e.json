{"ast":null,"code":"import{innerFrom}from'../observable/innerFrom';import{createOperatorSubscriber}from'./OperatorSubscriber';import{operate}from'../util/lift';export function catchError(selector){return operate(function(source,subscriber){var innerSub=null;var syncUnsub=false;var handledResult;innerSub=source.subscribe(createOperatorSubscriber(subscriber,undefined,undefined,function(err){handledResult=innerFrom(selector(err,catchError(selector)(source)));if(innerSub){innerSub.unsubscribe();innerSub=null;handledResult.subscribe(subscriber);}else{syncUnsub=true;}}));if(syncUnsub){innerSub.unsubscribe();innerSub=null;handledResult.subscribe(subscriber);}});}","map":{"version":3,"names":["innerFrom","createOperatorSubscriber","operate","catchError","selector","source","subscriber","innerSub","syncUnsub","handledResult","subscribe","undefined","err","unsubscribe"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/catchError.ts"],"sourcesContent":["import { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { Subscription } from '../Subscription';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <span class=\"informal\">\n * It only listens to the error channel and ignores notifications.\n * Handles errors from the source observable, and maps them to a new observable.\n * The error may also be rethrown, or a new error can be thrown to emit an error from the result.\n * </span>\n *\n * ![](catch.png)\n *\n * This operator handles errors, but forwards along all other events to the resulting observable.\n * If the source observable terminates with an error, it will map that error to a new observable,\n * subscribe to it, and forward all of its events to the resulting observable.\n *\n * ## Examples\n *\n * Continue with a different Observable when there's an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V'))\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retry the caught source Observable again in case of error, similar to `retry()` operator\n *\n * ```ts\n * import { of, map, catchError, take } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30)\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throw a new error when the source Observable throws an error\n *\n * ```ts\n * import { of, map, catchError } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5)\n *   .pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     })\n *   )\n *   .subscribe({\n *     next: x => console.log(x),\n *     error: err => console.log(err)\n *   });\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n * @see {@link onErrorResumeNext}\n * @see {@link repeat}\n * @see {@link repeatWhen}\n * @see {@link retry }\n * @see {@link retryWhen}\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n * is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n * is returned by the `selector` will be used to continue the observable chain.\n * @return A function that returns an Observable that originates from either\n * the source or the Observable returned by the `selector` function.\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null = null;\n    let syncUnsub = false;\n    let handledResult: Observable<ObservedValueOf<O>>;\n\n    innerSub = source.subscribe(\n      createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\n        handledResult = innerFrom(selector(err, catchError(selector)(source)));\n        if (innerSub) {\n          innerSub.unsubscribe();\n          innerSub = null;\n          handledResult.subscribe(subscriber);\n        } else {\n          // We don't have an innerSub yet, that means the error was synchronous\n          // because the subscribe call hasn't returned yet.\n          syncUnsub = true;\n        }\n      })\n    );\n\n    if (syncUnsub) {\n      // We have a synchronous error, we need to make sure to\n      // finalize right away. This ensures that callbacks in the `finalize` operator are called\n      // at the right time, and that finalization occurs at the expected\n      // time between the source error and the subscription to the\n      // next observable.\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult!.subscribe(subscriber);\n    }\n  });\n}\n"],"mappings":"AAIA,OAASA,SAAS,KAAQ,yBAAyB,CACnD,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,OAAO,KAAQ,cAAc,CAoGtC,MAAM,SAAU,CAAAC,UAAUA,CACxBC,QAAgD,EAEhD,MAAO,CAAAF,OAAO,CAAC,SAACG,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,QAAQ,CAAwB,IAAI,CACxC,GAAI,CAAAC,SAAS,CAAG,KAAK,CACrB,GAAI,CAAAC,aAA6C,CAEjDF,QAAQ,CAAGF,MAAM,CAACK,SAAS,CACzBT,wBAAwB,CAACK,UAAU,CAAEK,SAAS,CAAEA,SAAS,CAAE,SAACC,GAAG,EAC7DH,aAAa,CAAGT,SAAS,CAACI,QAAQ,CAACQ,GAAG,CAAET,UAAU,CAACC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CACtE,GAAIE,QAAQ,CAAE,CACZA,QAAQ,CAACM,WAAW,EAAE,CACtBN,QAAQ,CAAG,IAAI,CACfE,aAAa,CAACC,SAAS,CAACJ,UAAU,CAAC,C,CACpC,IAAM,CAGLE,SAAS,CAAG,IAAI,C,CAEpB,CAAC,CAAC,CACH,CAED,GAAIA,SAAS,CAAE,CAMbD,QAAQ,CAACM,WAAW,EAAE,CACtBN,QAAQ,CAAG,IAAI,CACfE,aAAc,CAACC,SAAS,CAACJ,UAAU,CAAC,C,CAExC,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}