{"ast":null,"code":"import{__read,__spreadArray}from\"tslib\";import{Observable}from'../Observable';import{innerFrom}from'./innerFrom';import{argsOrArgArray}from'../util/argsOrArgArray';import{EMPTY}from'./empty';import{createOperatorSubscriber}from'../operators/OperatorSubscriber';import{popResultSelector}from'../util/args';export function zip(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}var resultSelector=popResultSelector(args);var sources=argsOrArgArray(args);return sources.length?new Observable(function(subscriber){var buffers=sources.map(function(){return[];});var completed=sources.map(function(){return false;});subscriber.add(function(){buffers=completed=null;});var _loop_1=function _loop_1(sourceIndex){innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber,function(value){buffers[sourceIndex].push(value);if(buffers.every(function(buffer){return buffer.length;})){var result=buffers.map(function(buffer){return buffer.shift();});subscriber.next(resultSelector?resultSelector.apply(void 0,__spreadArray([],__read(result))):result);if(buffers.some(function(buffer,i){return!buffer.length&&completed[i];})){subscriber.complete();}}},function(){completed[sourceIndex]=true;!buffers[sourceIndex].length&&subscriber.complete();}));};for(var sourceIndex=0;!subscriber.closed&&sourceIndex<sources.length;sourceIndex++){_loop_1(sourceIndex);}return function(){buffers=completed=null;};}):EMPTY;}","map":{"version":3,"names":["Observable","innerFrom","argsOrArgArray","EMPTY","createOperatorSubscriber","popResultSelector","zip","args","_i","arguments","length","resultSelector","sources","subscriber","buffers","map","completed","add","sourceIndex","subscribe","value","push","every","buffer","result","shift","next","apply","__spreadArray","__read","some","i","complete","closed"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/observable/zip.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\n\nexport function zip<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  sources: [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\nexport function zip<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the last parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n *\n * Combine age and name from different sources\n *\n * ```ts\n * import { of, zip, map } from 'rxjs';\n *\n * const age$ = of(27, 25, 29);\n * const name$ = of('Foo', 'Bar', 'Beer');\n * const isDev$ = of(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map(([age, name, isDev]) => ({ age, name, isDev }))\n * )\n * .subscribe(x => console.log(x));\n *\n * // Outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n *\n * @param sources\n * @return {Observable<R>}\n */\nexport function zip(...args: unknown[]): Observable<unknown> {\n  const resultSelector = popResultSelector(args);\n\n  const sources = argsOrArgArray(args) as Observable<unknown>[];\n\n  return sources.length\n    ? new Observable<unknown[]>((subscriber) => {\n        // A collection of buffers of values from each source.\n        // Keyed by the same index with which the sources were passed in.\n        let buffers: unknown[][] = sources.map(() => []);\n\n        // An array of flags of whether or not the sources have completed.\n        // This is used to check to see if we should complete the result.\n        // Keyed by the same index with which the sources were passed in.\n        let completed = sources.map(() => false);\n\n        // When everything is done, release the arrays above.\n        subscriber.add(() => {\n          buffers = completed = null!;\n        });\n\n        // Loop over our sources and subscribe to each one. The index `i` is\n        // especially important here, because we use it in closures below to\n        // access the related buffers and completion properties\n        for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n          innerFrom(sources[sourceIndex]).subscribe(\n            createOperatorSubscriber(\n              subscriber,\n              (value) => {\n                buffers[sourceIndex].push(value);\n                // if every buffer has at least one value in it, then we\n                // can shift out the oldest value from each buffer and emit\n                // them as an array.\n                if (buffers.every((buffer) => buffer.length)) {\n                  const result: any = buffers.map((buffer) => buffer.shift()!);\n                  // Emit the array. If theres' a result selector, use that.\n                  subscriber.next(resultSelector ? resultSelector(...result) : result);\n                  // If any one of the sources is both complete and has an empty buffer\n                  // then we complete the result. This is because we cannot possibly have\n                  // any more values to zip together.\n                  if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n                    subscriber.complete();\n                  }\n                }\n              },\n              () => {\n                // This source completed. Mark it as complete so we can check it later\n                // if we have to.\n                completed[sourceIndex] = true;\n                // But, if this complete source has nothing in its buffer, then we\n                // can complete the result, because we can't possibly have any more\n                // values from this to zip together with the other values.\n                !buffers[sourceIndex].length && subscriber.complete();\n              }\n            )\n          );\n        }\n\n        // When everything is done, release the arrays above.\n        return () => {\n          buffers = completed = null!;\n        };\n      })\n    : EMPTY;\n}\n"],"mappings":"wCAAA,OAASA,UAAU,KAAQ,eAAe,CAE1C,OAASC,SAAS,KAAQ,aAAa,CACvC,OAASC,cAAc,KAAQ,wBAAwB,CACvD,OAASC,KAAK,KAAQ,SAAS,CAC/B,OAASC,wBAAwB,KAAQ,iCAAiC,CAC1E,OAASC,iBAAiB,KAAQ,cAAc,CA4ChD,MAAM,SAAU,CAAAC,GAAGA,CAAA,EAAC,IAAAC,IAAA,I,IAAA,IAAAC,EAAA,EAAkB,CAAlBA,EAAA,CAAAC,SAAA,CAAAC,MAAkB,CAAlBF,EAAA,EAAkB,EAAlBD,IAAA,CAAAC,EAAA,EAAAC,SAAA,CAAAD,EAAA,E,CAClB,GAAM,CAAAG,cAAc,CAAGN,iBAAiB,CAACE,IAAI,CAAC,CAE9C,GAAM,CAAAK,OAAO,CAAGV,cAAc,CAACK,IAAI,CAA0B,CAE7D,MAAO,CAAAK,OAAO,CAACF,MAAM,CACjB,GAAI,CAAAV,UAAU,CAAY,SAACa,UAAU,EAGnC,GAAI,CAAAC,OAAO,CAAgBF,OAAO,CAACG,GAAG,CAAC,WAAM,QAAE,CAAF,CAAE,CAAC,CAKhD,GAAI,CAAAC,SAAS,CAAGJ,OAAO,CAACG,GAAG,CAAC,WAAM,YAAK,CAAL,CAAK,CAAC,CAGxCF,UAAU,CAACI,GAAG,CAAC,WACbH,OAAO,CAAGE,SAAS,CAAG,IAAK,CAC7B,CAAC,CAAC,C,6BAKOE,WAAW,EAClBjB,SAAS,CAACW,OAAO,CAACM,WAAW,CAAC,CAAC,CAACC,SAAS,CACvCf,wBAAwB,CACtBS,UAAU,CACV,SAACO,KAAK,EACJN,OAAO,CAACI,WAAW,CAAC,CAACG,IAAI,CAACD,KAAK,CAAC,CAIhC,GAAIN,OAAO,CAACQ,KAAK,CAAC,SAACC,MAAM,EAAK,OAAAA,MAAM,CAACb,MAAM,CAAb,CAAa,CAAC,CAAE,CAC5C,GAAM,CAAAc,MAAM,CAAQV,OAAO,CAACC,GAAG,CAAC,SAACQ,MAAM,EAAK,OAAAA,MAAM,CAACE,KAAK,EAAG,CAAf,CAAe,CAAC,CAE5DZ,UAAU,CAACa,IAAI,CAACf,cAAc,CAAGA,cAAc,CAAAgB,KAAA,QAAAC,aAAA,IAAAC,MAAA,CAAIL,MAAM,IAAIA,MAAM,CAAC,CAIpE,GAAIV,OAAO,CAACgB,IAAI,CAAC,SAACP,MAAM,CAAEQ,CAAC,EAAK,OAACR,MAAM,CAACb,MAAM,EAAIM,SAAS,CAACe,CAAC,CAAC,CAA9B,CAA8B,CAAC,CAAE,CAC/DlB,UAAU,CAACmB,QAAQ,EAAE,C,EAG3B,CAAC,CACD,WAGEhB,SAAS,CAACE,WAAW,CAAC,CAAG,IAAI,CAI7B,CAACJ,OAAO,CAACI,WAAW,CAAC,CAACR,MAAM,EAAIG,UAAU,CAACmB,QAAQ,EAAE,CACvD,CAAC,CACF,CACF,C,EA/BH,IAAK,GAAI,CAAAd,WAAW,CAAG,CAAC,CAAE,CAACL,UAAU,CAACoB,MAAM,EAAIf,WAAW,CAAGN,OAAO,CAACF,MAAM,CAAEQ,WAAW,EAAE,E,QAAlFA,WAAW,E,CAmCpB,MAAO,YACLJ,OAAO,CAAGE,SAAS,CAAG,IAAK,CAC7B,CAAC,CACH,CAAC,CAAC,CACFb,KAAK,CACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}