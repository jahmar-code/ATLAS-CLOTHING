{"ast":null,"code":"import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function every(predicate,thisArg){return operate(function(source,subscriber){var index=0;source.subscribe(createOperatorSubscriber(subscriber,function(value){if(!predicate.call(thisArg,value,index++,source)){subscriber.next(false);subscriber.complete();}},function(){subscriber.next(true);subscriber.complete();}));});}","map":{"version":3,"names":["operate","createOperatorSubscriber","every","predicate","thisArg","source","subscriber","index","subscribe","value","call","next","complete"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/every.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Falsy, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function every<T>(predicate: BooleanConstructor): OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function every<T>(\n  predicate: BooleanConstructor,\n  thisArg: any\n): OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function every<T, A>(\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => boolean,\n  thisArg: A\n): OperatorFunction<T, boolean>;\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, boolean>;\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * <span class=\"informal\">If all values pass predicate before the source completes, emits true before completion,\n * otherwise emit false, then complete.</span>\n *\n * ![](every.png)\n *\n * ## Example\n *\n * A simple example emitting true if all elements are less than 5, false otherwise\n *\n * ```ts\n * import { of, every } from 'rxjs';\n *\n * of(1, 2, 3, 4, 5, 6)\n *   .pipe(every(x => x < 5))\n *   .subscribe(x => console.log(x)); // -> false\n * ```\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return A function that returns an Observable of booleans that determines if\n * all items of the source Observable meet the condition specified.\n */\nexport function every<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, boolean> {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          if (!predicate.call(thisArg, value, index++, source)) {\n            subscriber.next(false);\n            subscriber.complete();\n          }\n        },\n        () => {\n          subscriber.next(true);\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"],"mappings":"AAEA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAwC/D,MAAM,SAAU,CAAAC,KAAKA,CACnBC,SAAsE,CACtEC,OAAa,EAEb,MAAO,CAAAJ,OAAO,CAAC,SAACK,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,KAAK,CAAG,CAAC,CACbF,MAAM,CAACG,SAAS,CACdP,wBAAwB,CACtBK,UAAU,CACV,SAACG,KAAK,EACJ,GAAI,CAACN,SAAS,CAACO,IAAI,CAACN,OAAO,CAAEK,KAAK,CAAEF,KAAK,EAAE,CAAEF,MAAM,CAAC,CAAE,CACpDC,UAAU,CAACK,IAAI,CAAC,KAAK,CAAC,CACtBL,UAAU,CAACM,QAAQ,EAAE,C,CAEzB,CAAC,CACD,WACEN,UAAU,CAACK,IAAI,CAAC,IAAI,CAAC,CACrBL,UAAU,CAACM,QAAQ,EAAE,CACvB,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}