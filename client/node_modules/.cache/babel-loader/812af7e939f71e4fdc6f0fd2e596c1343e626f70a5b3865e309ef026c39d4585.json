{"ast":null,"code":"import{operate}from'../util/lift';import{innerFrom}from'../observable/innerFrom';import{createOperatorSubscriber}from'./OperatorSubscriber';export function audit(durationSelector){return operate(function(source,subscriber){var hasValue=false;var lastValue=null;var durationSubscriber=null;var isComplete=false;var endDuration=function endDuration(){durationSubscriber===null||durationSubscriber===void 0?void 0:durationSubscriber.unsubscribe();durationSubscriber=null;if(hasValue){hasValue=false;var value=lastValue;lastValue=null;subscriber.next(value);}isComplete&&subscriber.complete();};var cleanupDuration=function cleanupDuration(){durationSubscriber=null;isComplete&&subscriber.complete();};source.subscribe(createOperatorSubscriber(subscriber,function(value){hasValue=true;lastValue=value;if(!durationSubscriber){innerFrom(durationSelector(value)).subscribe(durationSubscriber=createOperatorSubscriber(subscriber,endDuration,cleanupDuration));}},function(){isComplete=true;(!hasValue||!durationSubscriber||durationSubscriber.closed)&&subscriber.complete();}));});}","map":{"version":3,"names":["operate","innerFrom","createOperatorSubscriber","audit","durationSelector","source","subscriber","hasValue","lastValue","durationSubscriber","isComplete","endDuration","unsubscribe","value","next","complete","cleanupDuration","subscribe","closed"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/audit.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\n\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.svg)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, audit, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function audit<T>(durationSelector: (value: T) => ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    let durationSubscriber: Subscriber<any> | null = null;\n    let isComplete = false;\n\n    const endDuration = () => {\n      durationSubscriber?.unsubscribe();\n      durationSubscriber = null;\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n      isComplete && subscriber.complete();\n    };\n\n    const cleanupDuration = () => {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          lastValue = value;\n          if (!durationSubscriber) {\n            innerFrom(durationSelector(value)).subscribe(\n              (durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration))\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"],"mappings":"AAGA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,SAAS,KAAQ,yBAAyB,CACnD,OAASC,wBAAwB,KAAQ,sBAAsB,CA+C/D,MAAM,SAAU,CAAAC,KAAKA,CAAIC,gBAAoD,EAC3E,MAAO,CAAAJ,OAAO,CAAC,SAACK,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,QAAQ,CAAG,KAAK,CACpB,GAAI,CAAAC,SAAS,CAAa,IAAI,CAC9B,GAAI,CAAAC,kBAAkB,CAA2B,IAAI,CACrD,GAAI,CAAAC,UAAU,CAAG,KAAK,CAEtB,GAAM,CAAAC,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAA,CAAG,CAClBF,kBAAkB,SAAlBA,kBAAkB,iBAAlBA,kBAAkB,CAAEG,WAAW,EAAE,CACjCH,kBAAkB,CAAG,IAAI,CACzB,GAAIF,QAAQ,CAAE,CACZA,QAAQ,CAAG,KAAK,CAChB,GAAM,CAAAM,KAAK,CAAGL,SAAU,CACxBA,SAAS,CAAG,IAAI,CAChBF,UAAU,CAACQ,IAAI,CAACD,KAAK,CAAC,C,CAExBH,UAAU,EAAIJ,UAAU,CAACS,QAAQ,EAAE,CACrC,CAAC,CAED,GAAM,CAAAC,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAA,CAAG,CACtBP,kBAAkB,CAAG,IAAI,CACzBC,UAAU,EAAIJ,UAAU,CAACS,QAAQ,EAAE,CACrC,CAAC,CAEDV,MAAM,CAACY,SAAS,CACdf,wBAAwB,CACtBI,UAAU,CACV,SAACO,KAAK,EACJN,QAAQ,CAAG,IAAI,CACfC,SAAS,CAAGK,KAAK,CACjB,GAAI,CAACJ,kBAAkB,CAAE,CACvBR,SAAS,CAACG,gBAAgB,CAACS,KAAK,CAAC,CAAC,CAACI,SAAS,CACzCR,kBAAkB,CAAGP,wBAAwB,CAACI,UAAU,CAAEK,WAAW,CAAEK,eAAe,CAAE,CAC1F,C,CAEL,CAAC,CACD,WACEN,UAAU,CAAG,IAAI,CACjB,CAAC,CAACH,QAAQ,EAAI,CAACE,kBAAkB,EAAIA,kBAAkB,CAACS,MAAM,GAAKZ,UAAU,CAACS,QAAQ,EAAE,CAC1F,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}