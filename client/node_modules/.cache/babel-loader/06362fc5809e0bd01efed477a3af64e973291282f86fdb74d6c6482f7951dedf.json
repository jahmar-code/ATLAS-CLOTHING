{"ast":null,"code":"import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function find(predicate,thisArg){return operate(createFind(predicate,thisArg,'value'));}export function createFind(predicate,thisArg,emit){var findIndex=emit==='index';return function(source,subscriber){var index=0;source.subscribe(createOperatorSubscriber(subscriber,function(value){var i=index++;if(predicate.call(thisArg,value,i,source)){subscriber.next(findIndex?i:value);subscriber.complete();}},function(){subscriber.next(findIndex?-1:undefined);subscriber.complete();}));};}","map":{"version":3,"names":["operate","createOperatorSubscriber","find","predicate","thisArg","createFind","emit","findIndex","source","subscriber","index","subscribe","value","i","call","next","complete","undefined"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/find.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function find<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function find<T, S extends T, A>(\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => value is S,\n  thisArg: A\n): OperatorFunction<T, S | undefined>;\nexport function find<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S\n): OperatorFunction<T, S | undefined>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function find<T, A>(\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => boolean,\n  thisArg: A\n): OperatorFunction<T, T | undefined>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, T | undefined>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * ![](find.png)\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found\n * (emits `undefined` instead).\n *\n * ## Example\n *\n * Find and emit the first click that happens on a DIV element\n *\n * ```ts\n * import { fromEvent, find } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(find(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits the first item that\n * matches the condition.\n */\nexport function find<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, T | undefined> {\n  return operate(createFind(predicate, thisArg, 'value'));\n}\n\nexport function createFind<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg: any,\n  emit: 'value' | 'index'\n) {\n  const findIndex = emit === 'index';\n  return (source: Observable<T>, subscriber: Subscriber<any>) => {\n    let index = 0;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          const i = index++;\n          if (predicate.call(thisArg, value, i, source)) {\n            subscriber.next(findIndex ? i : value);\n            subscriber.complete();\n          }\n        },\n        () => {\n          subscriber.next(findIndex ? -1 : undefined);\n          subscriber.complete();\n        }\n      )\n    );\n  };\n}\n"],"mappings":"AAGA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CA4D/D,MAAM,SAAU,CAAAC,IAAIA,CAClBC,SAAsE,CACtEC,OAAa,EAEb,MAAO,CAAAJ,OAAO,CAACK,UAAU,CAACF,SAAS,CAAEC,OAAO,CAAE,OAAO,CAAC,CAAC,CACzD,CAEA,MAAM,SAAU,CAAAC,UAAUA,CACxBF,SAAsE,CACtEC,OAAY,CACZE,IAAuB,EAEvB,GAAM,CAAAC,SAAS,CAAGD,IAAI,GAAK,OAAO,CAClC,MAAO,UAACE,MAAqB,CAAEC,UAA2B,EACxD,GAAI,CAAAC,KAAK,CAAG,CAAC,CACbF,MAAM,CAACG,SAAS,CACdV,wBAAwB,CACtBQ,UAAU,CACV,SAACG,KAAK,EACJ,GAAM,CAAAC,CAAC,CAAGH,KAAK,EAAE,CACjB,GAAIP,SAAS,CAACW,IAAI,CAACV,OAAO,CAAEQ,KAAK,CAAEC,CAAC,CAAEL,MAAM,CAAC,CAAE,CAC7CC,UAAU,CAACM,IAAI,CAACR,SAAS,CAAGM,CAAC,CAAGD,KAAK,CAAC,CACtCH,UAAU,CAACO,QAAQ,EAAE,C,CAEzB,CAAC,CACD,WACEP,UAAU,CAACM,IAAI,CAACR,SAAS,CAAG,CAAC,CAAC,CAAGU,SAAS,CAAC,CAC3CR,UAAU,CAACO,QAAQ,EAAE,CACvB,CAAC,CACF,CACF,CACH,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}