{"ast":null,"code":"import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';import{identity}from'../util/identity';import{timer}from'../observable/timer';import{innerFrom}from'../observable/innerFrom';export function retry(configOrCount){if(configOrCount===void 0){configOrCount=Infinity;}var config;if(configOrCount&&typeof configOrCount==='object'){config=configOrCount;}else{config={count:configOrCount};}var _a=config.count,count=_a===void 0?Infinity:_a,delay=config.delay,_b=config.resetOnSuccess,resetOnSuccess=_b===void 0?false:_b;return count<=0?identity:operate(function(source,subscriber){var soFar=0;var innerSub;var subscribeForRetry=function subscribeForRetry(){var syncUnsub=false;innerSub=source.subscribe(createOperatorSubscriber(subscriber,function(value){if(resetOnSuccess){soFar=0;}subscriber.next(value);},undefined,function(err){if(soFar++<count){var resub_1=function resub_1(){if(innerSub){innerSub.unsubscribe();innerSub=null;subscribeForRetry();}else{syncUnsub=true;}};if(delay!=null){var notifier=typeof delay==='number'?timer(delay):innerFrom(delay(err,soFar));var notifierSubscriber_1=createOperatorSubscriber(subscriber,function(){notifierSubscriber_1.unsubscribe();resub_1();},function(){subscriber.complete();});notifier.subscribe(notifierSubscriber_1);}else{resub_1();}}else{subscriber.error(err);}}));if(syncUnsub){innerSub.unsubscribe();innerSub=null;subscribeForRetry();}};subscribeForRetry();});}","map":{"version":3,"names":["operate","createOperatorSubscriber","identity","timer","innerFrom","retry","configOrCount","Infinity","config","count","_a","delay","_b","resetOnSuccess","source","subscriber","soFar","innerSub","subscribeForRetry","syncUnsub","subscribe","value","next","undefined","err","resub_1","unsubscribe","notifier","notifierSubscriber_1","complete","error"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/retry.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { Subscription } from '../Subscription';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * The {@link retry} operator configuration object. `retry` either accepts a `number`\n * or an object described by this interface.\n */\nexport interface RetryConfig {\n  /**\n   * The maximum number of times to retry. If `count` is omitted, `retry` will try to\n   * resubscribe on errors infinite number of times.\n   */\n  count?: number;\n  /**\n   * The number of milliseconds to delay before retrying, OR a function to\n   * return a notifier for delaying. If a function is given, that function should\n   * return a notifier that, when it emits will retry the source. If the notifier\n   * completes _without_ emitting, the resulting observable will complete without error,\n   * if the notifier errors, the error will be pushed to the result.\n   */\n  delay?: number | ((error: any, retryCount: number) => ObservableInput<any>);\n  /**\n   * Whether or not to reset the retry counter when the retried subscription\n   * emits its first value.\n   */\n  resetOnSuccess?: boolean;\n}\n\nexport function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\nexport function retry<T>(config: RetryConfig): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`.\n *\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * `count` resubscriptions rather than propagating the `error` call.\n *\n * ![](retry.png)\n *\n * The number of retries is determined by the `count` parameter. It can be set either by passing a number to\n * `retry` function or by setting `count` property when `retry` is configured using {@link RetryConfig}. If\n * `count` is omitted, `retry` will try to resubscribe on errors infinite number of times.\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those\n * emitted during failed subscriptions. For example, if an Observable fails at first but emits `[1, 2]` then\n * succeeds the second time and emits: `[1, 2, 3, 4, 5, complete]` then the complete stream of emissions and\n * notifications would be: `[1, 2, 1, 2, 3, 4, 5, complete]`.\n *\n * ## Example\n *\n * ```ts\n * import { interval, mergeMap, throwError, of, retry } from 'rxjs';\n *\n * const source = interval(1000);\n * const result = source.pipe(\n *   mergeMap(val => val > 5 ? throwError(() => 'Error!') : of(val)),\n *   retry(2) // retry 2 times on error\n * );\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(`${ err }: Retried 2 times then quit!`)\n * });\n *\n * // Output:\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // 'Error!: Retried 2 times then quit!'\n * ```\n *\n * @see {@link retryWhen}\n *\n * @param configOrCount - Either number of retry attempts before failing or a {@link RetryConfig} object.\n * @return A function that returns an Observable that will resubscribe to the\n * source stream when the source stream errors, at most `count` times.\n */\nexport function retry<T>(configOrCount: number | RetryConfig = Infinity): MonoTypeOperatorFunction<T> {\n  let config: RetryConfig;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount as number,\n    };\n  }\n  const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\n\n  return count <= 0\n    ? identity\n    : operate((source, subscriber) => {\n        let soFar = 0;\n        let innerSub: Subscription | null;\n        const subscribeForRetry = () => {\n          let syncUnsub = false;\n          innerSub = source.subscribe(\n            createOperatorSubscriber(\n              subscriber,\n              (value) => {\n                // If we're resetting on success\n                if (resetOnSuccess) {\n                  soFar = 0;\n                }\n                subscriber.next(value);\n              },\n              // Completions are passed through to consumer.\n              undefined,\n              (err) => {\n                if (soFar++ < count) {\n                  // We are still under our retry count\n                  const resub = () => {\n                    if (innerSub) {\n                      innerSub.unsubscribe();\n                      innerSub = null;\n                      subscribeForRetry();\n                    } else {\n                      syncUnsub = true;\n                    }\n                  };\n\n                  if (delay != null) {\n                    // The user specified a retry delay.\n                    // They gave us a number, use a timer, otherwise, it's a function,\n                    // and we're going to call it to get a notifier.\n                    const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                    const notifierSubscriber = createOperatorSubscriber(\n                      subscriber,\n                      () => {\n                        // After we get the first notification, we\n                        // unsubscribe from the notifier, because we don't want anymore\n                        // and we resubscribe to the source.\n                        notifierSubscriber.unsubscribe();\n                        resub();\n                      },\n                      () => {\n                        // The notifier completed without emitting.\n                        // The author is telling us they want to complete.\n                        subscriber.complete();\n                      }\n                    );\n                    notifier.subscribe(notifierSubscriber);\n                  } else {\n                    // There was no notifier given. Just resub immediately.\n                    resub();\n                  }\n                } else {\n                  // We're past our maximum number of retries.\n                  // Just send along the error.\n                  subscriber.error(err);\n                }\n              }\n            )\n          );\n          if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRetry();\n          }\n        };\n        subscribeForRetry();\n      });\n}\n"],"mappings":"AACA,OAASA,OAAO,KAAQ,cAAc,CAEtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,OAASC,KAAK,KAAQ,qBAAqB,CAC3C,OAASC,SAAS,KAAQ,yBAAyB,CA4EnD,MAAM,SAAU,CAAAC,KAAKA,CAAIC,aAA8C,EAA9C,GAAAA,aAAA,WAAAA,aAAA,CAAAC,QAA8C,EACrE,GAAI,CAAAC,MAAmB,CACvB,GAAIF,aAAa,EAAI,MAAO,CAAAA,aAAa,GAAK,QAAQ,CAAE,CACtDE,MAAM,CAAGF,aAAa,C,CACvB,IAAM,CACLE,MAAM,CAAG,CACPC,KAAK,CAAEH,a,CACR,C,CAEK,IAAAI,EAAA,CAAoEF,MAAM,CAAAC,KAA1D,CAAhBA,KAAK,CAAAC,EAAA,UAAGH,QAAQ,CAAAG,EAAA,CAAEC,KAAK,CAA6CH,MAAM,CAAAG,KAAnD,CAAEC,EAAA,CAA2CJ,MAAM,CAAAK,cAAX,CAAtBA,cAAc,CAAAD,EAAA,UAAG,KAAK,CAAAA,EAAA,CAEvE,MAAO,CAAAH,KAAK,EAAI,CAAC,CACbP,QAAQ,CACRF,OAAO,CAAC,SAACc,MAAM,CAAEC,UAAU,EACzB,GAAI,CAAAC,KAAK,CAAG,CAAC,CACb,GAAI,CAAAC,QAA6B,CACjC,GAAM,CAAAC,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAA,CAAG,CACxB,GAAI,CAAAC,SAAS,CAAG,KAAK,CACrBF,QAAQ,CAAGH,MAAM,CAACM,SAAS,CACzBnB,wBAAwB,CACtBc,UAAU,CACV,SAACM,KAAK,EAEJ,GAAIR,cAAc,CAAE,CAClBG,KAAK,CAAG,CAAC,C,CAEXD,UAAU,CAACO,IAAI,CAACD,KAAK,CAAC,CACxB,CAAC,CAEDE,SAAS,CACT,SAACC,GAAG,EACF,GAAIR,KAAK,EAAE,CAAGP,KAAK,CAAE,CAEnB,GAAM,CAAAgB,OAAK,CAAG,QAAR,CAAAA,OAAKA,CAAA,CAAG,CACZ,GAAIR,QAAQ,CAAE,CACZA,QAAQ,CAACS,WAAW,EAAE,CACtBT,QAAQ,CAAG,IAAI,CACfC,iBAAiB,EAAE,C,CACpB,IAAM,CACLC,SAAS,CAAG,IAAI,C,CAEpB,CAAC,CAED,GAAIR,KAAK,EAAI,IAAI,CAAE,CAIjB,GAAM,CAAAgB,QAAQ,CAAG,MAAO,CAAAhB,KAAK,GAAK,QAAQ,CAAGR,KAAK,CAACQ,KAAK,CAAC,CAAGP,SAAS,CAACO,KAAK,CAACa,GAAG,CAAER,KAAK,CAAC,CAAC,CACxF,GAAM,CAAAY,oBAAkB,CAAG3B,wBAAwB,CACjDc,UAAU,CACV,WAIEa,oBAAkB,CAACF,WAAW,EAAE,CAChCD,OAAK,EAAE,CACT,CAAC,CACD,WAGEV,UAAU,CAACc,QAAQ,EAAE,CACvB,CAAC,CACF,CACDF,QAAQ,CAACP,SAAS,CAACQ,oBAAkB,CAAC,C,CACvC,IAAM,CAELH,OAAK,EAAE,C,EAEV,IAAM,CAGLV,UAAU,CAACe,KAAK,CAACN,GAAG,CAAC,C,CAEzB,CAAC,CACF,CACF,CACD,GAAIL,SAAS,CAAE,CACbF,QAAQ,CAACS,WAAW,EAAE,CACtBT,QAAQ,CAAG,IAAI,CACfC,iBAAiB,EAAE,C,CAEvB,CAAC,CACDA,iBAAiB,EAAE,CACrB,CAAC,CAAC,CACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}