{"ast":null,"code":"import{Subject}from'../Subject';import{asyncScheduler}from'../scheduler/async';import{Subscription}from'../Subscription';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';import{arrRemove}from'../util/arrRemove';import{popScheduler}from'../util/args';import{executeSchedule}from'../util/executeSchedule';export function windowTime(windowTimeSpan){var _a,_b;var otherArgs=[];for(var _i=1;_i<arguments.length;_i++){otherArgs[_i-1]=arguments[_i];}var scheduler=(_a=popScheduler(otherArgs))!==null&&_a!==void 0?_a:asyncScheduler;var windowCreationInterval=(_b=otherArgs[0])!==null&&_b!==void 0?_b:null;var maxWindowSize=otherArgs[1]||Infinity;return operate(function(source,subscriber){var windowRecords=[];var restartOnClose=false;var closeWindow=function closeWindow(record){var window=record.window,subs=record.subs;window.complete();subs.unsubscribe();arrRemove(windowRecords,record);restartOnClose&&startWindow();};var startWindow=function startWindow(){if(windowRecords){var subs=new Subscription();subscriber.add(subs);var window_1=new Subject();var record_1={window:window_1,subs:subs,seen:0};windowRecords.push(record_1);subscriber.next(window_1.asObservable());executeSchedule(subs,scheduler,function(){return closeWindow(record_1);},windowTimeSpan);}};if(windowCreationInterval!==null&&windowCreationInterval>=0){executeSchedule(subscriber,scheduler,startWindow,windowCreationInterval,true);}else{restartOnClose=true;}startWindow();var loop=function loop(cb){return windowRecords.slice().forEach(cb);};var terminate=function terminate(cb){loop(function(_a){var window=_a.window;return cb(window);});cb(subscriber);subscriber.unsubscribe();};source.subscribe(createOperatorSubscriber(subscriber,function(value){loop(function(record){record.window.next(value);maxWindowSize<=++record.seen&&closeWindow(record);});},function(){return terminate(function(consumer){return consumer.complete();});},function(err){return terminate(function(consumer){return consumer.error(err);});}));return function(){windowRecords=null;};});}","map":{"version":3,"names":["Subject","asyncScheduler","Subscription","operate","createOperatorSubscriber","arrRemove","popScheduler","executeSchedule","windowTime","windowTimeSpan","otherArgs","_i","arguments","length","scheduler","_a","windowCreationInterval","_b","maxWindowSize","Infinity","source","subscriber","windowRecords","restartOnClose","closeWindow","record","window","subs","complete","unsubscribe","startWindow","add","window_1","record_1","seen","push","next","asObservable","loop","cb","slice","forEach","terminate","subscribe","value","consumer","err","error"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/windowTime.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Observer, OperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function windowTime<T>(windowTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(\n  windowTimeSpan: number,\n  windowCreationInterval: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(\n  windowTimeSpan: number,\n  windowCreationInterval: number | null | void,\n  maxWindowSize: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowTime.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * ## Examples\n *\n * In every window of 1 second each, emit at most 2 click events\n *\n * ```ts\n * import { fromEvent, windowTime, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window\n *\n * ```ts\n * import { fromEvent, windowTime, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Same as example above but with `maxWindowCount` instead of `take`\n *\n * ```ts\n * import { fromEvent, windowTime, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000, 2), // take at most 2 emissions from each window\n *   mergeAll()                 // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param windowTimeSpan The amount of time, in milliseconds, to fill each window.\n * @param windowCreationInterval The interval at which to start new\n * windows.\n * @param maxWindowSize Max number of\n * values each window can emit before completion.\n * @param scheduler The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowTime<T>(windowTimeSpan: number, ...otherArgs: any[]): OperatorFunction<T, Observable<T>> {\n  const scheduler = popScheduler(otherArgs) ?? asyncScheduler;\n  const windowCreationInterval = (otherArgs[0] as number) ?? null;\n  const maxWindowSize = (otherArgs[1] as number) || Infinity;\n\n  return operate((source, subscriber) => {\n    // The active windows, their related subscriptions, and removal functions.\n    let windowRecords: WindowRecord<T>[] | null = [];\n    // If true, it means that every time we close a window, we want to start a new window.\n    // This is only really used for when *just* the time span is passed.\n    let restartOnClose = false;\n\n    const closeWindow = (record: { window: Subject<T>; subs: Subscription }) => {\n      const { window, subs } = record;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n\n    /**\n     * Called every time we start a new window. This also does\n     * the work of scheduling the job to close the window.\n     */\n    const startWindow = () => {\n      if (windowRecords) {\n        const subs = new Subscription();\n        subscriber.add(subs);\n        const window = new Subject<T>();\n        const record = {\n          window,\n          subs,\n          seen: 0,\n        };\n        windowRecords.push(record);\n        subscriber.next(window.asObservable());\n        executeSchedule(subs, scheduler, () => closeWindow(record), windowTimeSpan);\n      }\n    };\n\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      // The user passed both a windowTimeSpan (required), and a creation interval\n      // That means we need to start new window on the interval, and those windows need\n      // to wait the required time span before completing.\n      executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\n    } else {\n      restartOnClose = true;\n    }\n\n    startWindow();\n\n    /**\n     * We need to loop over a copy of the window records several times in this operator.\n     * This is to save bytes over the wire more than anything.\n     * The reason we copy the array is that reentrant code could mutate the array while\n     * we are iterating over it.\n     */\n    const loop = (cb: (record: WindowRecord<T>) => void) => windowRecords!.slice().forEach(cb);\n\n    /**\n     * Used to notify all of the windows and the subscriber in the same way\n     * in the error and complete handlers.\n     */\n    const terminate = (cb: (consumer: Observer<any>) => void) => {\n      loop(({ window }) => cb(window));\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Notify all windows of the value.\n          loop((record) => {\n            record.window.next(value);\n            // If the window is over the max size, we need to close it.\n            maxWindowSize <= ++record.seen && closeWindow(record);\n          });\n        },\n        // Complete the windows and the downstream subscriber and clean up.\n        () => terminate((consumer) => consumer.complete()),\n        // Notify the windows and the downstream subscriber of the error and clean up.\n        (err) => terminate((consumer) => consumer.error(err))\n      )\n    );\n\n    // Additional finalization. This will be called when the\n    // destination tears down. Other finalizations are registered implicitly\n    // above via subscription.\n    return () => {\n      // Ensure that the buffer is released.\n      windowRecords = null!;\n    };\n  });\n}\n\ninterface WindowRecord<T> {\n  seen: number;\n  window: Subject<T>;\n  subs: Subscription;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}