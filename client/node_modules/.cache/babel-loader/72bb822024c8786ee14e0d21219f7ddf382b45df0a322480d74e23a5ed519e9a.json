{"ast":null,"code":"import{EMPTY}from'./observable/empty';import{of}from'./observable/of';import{throwError}from'./observable/throwError';import{isFunction}from'./util/isFunction';export var NotificationKind;(function(NotificationKind){NotificationKind[\"NEXT\"]=\"N\";NotificationKind[\"ERROR\"]=\"E\";NotificationKind[\"COMPLETE\"]=\"C\";})(NotificationKind||(NotificationKind={}));var Notification=function(){function Notification(kind,value,error){this.kind=kind;this.value=value;this.error=error;this.hasValue=kind==='N';}Notification.prototype.observe=function(observer){return observeNotification(this,observer);};Notification.prototype.do=function(nextHandler,errorHandler,completeHandler){var _a=this,kind=_a.kind,value=_a.value,error=_a.error;return kind==='N'?nextHandler===null||nextHandler===void 0?void 0:nextHandler(value):kind==='E'?errorHandler===null||errorHandler===void 0?void 0:errorHandler(error):completeHandler===null||completeHandler===void 0?void 0:completeHandler();};Notification.prototype.accept=function(nextOrObserver,error,complete){var _a;return isFunction((_a=nextOrObserver)===null||_a===void 0?void 0:_a.next)?this.observe(nextOrObserver):this.do(nextOrObserver,error,complete);};Notification.prototype.toObservable=function(){var _a=this,kind=_a.kind,value=_a.value,error=_a.error;var result=kind==='N'?of(value):kind==='E'?throwError(function(){return error;}):kind==='C'?EMPTY:0;if(!result){throw new TypeError(\"Unexpected notification kind \"+kind);}return result;};Notification.createNext=function(value){return new Notification('N',value);};Notification.createError=function(err){return new Notification('E',undefined,err);};Notification.createComplete=function(){return Notification.completeNotification;};Notification.completeNotification=new Notification('C');return Notification;}();export{Notification};export function observeNotification(notification,observer){var _a,_b,_c;var _d=notification,kind=_d.kind,value=_d.value,error=_d.error;if(typeof kind!=='string'){throw new TypeError('Invalid notification, missing \"kind\"');}kind==='N'?(_a=observer.next)===null||_a===void 0?void 0:_a.call(observer,value):kind==='E'?(_b=observer.error)===null||_b===void 0?void 0:_b.call(observer,error):(_c=observer.complete)===null||_c===void 0?void 0:_c.call(observer);}","map":{"version":3,"names":["EMPTY","of","throwError","isFunction","NotificationKind","Notification","kind","value","error","hasValue","prototype","observe","observer","observeNotification","do","nextHandler","errorHandler","completeHandler","_a","accept","nextOrObserver","complete","next","toObservable","result","TypeError","createNext","createError","err","undefined","createComplete","completeNotification","notification","_d","call","_b","_c"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/Notification.ts"],"sourcesContent":["import { PartialObserver, ObservableNotification, CompleteNotification, NextNotification, ErrorNotification } from './types';\nimport { Observable } from './Observable';\nimport { EMPTY } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { isFunction } from './util/isFunction';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated Use a string literal instead. `NotificationKind` will be replaced with a type alias in v8.\n * It will not be replaced with a const enum as those are not compatible with isolated modules.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n * @deprecated It is NOT recommended to create instances of `Notification` directly.\n * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n * Will be removed in v8.\n */\nexport class Notification<T> {\n  /**\n   * A value signifying that the notification will \"next\" if observed. In truth,\n   * This is really synonymous with just checking `kind === \"N\"`.\n   * @deprecated Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`.\n   */\n  readonly hasValue: boolean;\n\n  /**\n   * Creates a \"Next\" notification object.\n   * @param kind Always `'N'`\n   * @param value The value to notify with if observed.\n   * @deprecated Internal implementation detail. Use {@link Notification#createNext createNext} instead.\n   */\n  constructor(kind: 'N', value?: T);\n  /**\n   * Creates an \"Error\" notification object.\n   * @param kind Always `'E'`\n   * @param value Always `undefined`\n   * @param error The error to notify with if observed.\n   * @deprecated Internal implementation detail. Use {@link Notification#createError createError} instead.\n   */\n  constructor(kind: 'E', value: undefined, error: any);\n  /**\n   * Creates a \"completion\" notification object.\n   * @param kind Always `'C'`\n   * @deprecated Internal implementation detail. Use {@link Notification#createComplete createComplete} instead.\n   */\n  constructor(kind: 'C');\n  constructor(public readonly kind: 'N' | 'E' | 'C', public readonly value?: T, public readonly error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\n   * @param observer The observer to notify.\n   */\n  observe(observer: PartialObserver<T>): void {\n    return observeNotification(this as ObservableNotification<T>, observer);\n  }\n\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @param complete A complete handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void, error: (err: any) => void): void;\n  /**\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\n   * this will not error, and it will be a noop.\n   * @param next The next handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void): void;\n  do(nextHandler: (value: T) => void, errorHandler?: (err: any) => void, completeHandler?: () => void): void {\n    const { kind, value, error } = this;\n    return kind === 'N' ? nextHandler?.(value!) : kind === 'E' ? errorHandler?.(error) : completeHandler?.();\n  }\n\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @param complete A complete handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void, error: (err: any) => void): void;\n  /**\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\n   * this will not error, and it will be a noop.\n   * @param next The next handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void): void;\n\n  /**\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\n   * @param observer The observer to notify.\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(observer: PartialObserver<T>): void;\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    return isFunction((nextOrObserver as any)?.next)\n      ? this.observe(nextOrObserver as PartialObserver<T>)\n      : this.do(nextOrObserver as (value: T) => void, error as any, complete as any);\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   *\n   * @deprecated Will be removed in v8. To convert a `Notification` to an {@link Observable},\n   * use {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`.\n   */\n  toObservable(): Observable<T> {\n    const { kind, value, error } = this;\n    // Select the observable to return by `kind`\n    const result =\n      kind === 'N'\n        ? // Next kind. Return an observable of that value.\n          of(value!)\n        : //\n        kind === 'E'\n        ? // Error kind. Return an observable that emits the error.\n          throwError(() => error)\n        : //\n        kind === 'C'\n        ? // Completion kind. Kind is \"C\", return an observable that just completes.\n          EMPTY\n        : // Unknown kind, return falsy, so we error below.\n          0;\n    if (!result) {\n      // TODO: consider removing this check. The only way to cause this would be to\n      // use the Notification constructor directly in a way that is not type-safe.\n      // and direct use of the Notification constructor is deprecated.\n      throw new TypeError(`Unexpected notification kind ${kind}`);\n    }\n    return result;\n  }\n\n  private static completeNotification = new Notification('C') as Notification<never> & CompleteNotification;\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createNext<T>(value: T) {\n    return new Notification('N', value) as Notification<T> & NextNotification<T>;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createError(err?: any) {\n    return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createComplete(): Notification<never> & CompleteNotification {\n    return Notification.completeNotification;\n  }\n}\n\n/**\n * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n * If the handler is missing it will do nothing. Even if the notification is an error, if\n * there is no error handler on the observer, an error will not be thrown, it will noop.\n * @param notification The notification object to observe.\n * @param observer The observer to notify.\n */\nexport function observeNotification<T>(notification: ObservableNotification<T>, observer: PartialObserver<T>) {\n  const { kind, value, error } = notification as any;\n  if (typeof kind !== 'string') {\n    throw new TypeError('Invalid notification, missing \"kind\"');\n  }\n  kind === 'N' ? observer.next?.(value!) : kind === 'E' ? observer.error?.(error) : observer.complete?.();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}