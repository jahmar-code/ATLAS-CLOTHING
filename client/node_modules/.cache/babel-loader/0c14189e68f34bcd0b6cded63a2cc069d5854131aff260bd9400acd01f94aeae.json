{"ast":null,"code":"import{__values}from\"tslib\";import{Subject}from'../Subject';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function windowCount(windowSize,startWindowEvery){if(startWindowEvery===void 0){startWindowEvery=0;}var startEvery=startWindowEvery>0?startWindowEvery:windowSize;return operate(function(source,subscriber){var windows=[new Subject()];var starts=[];var count=0;subscriber.next(windows[0].asObservable());source.subscribe(createOperatorSubscriber(subscriber,function(value){var e_1,_a;try{for(var windows_1=__values(windows),windows_1_1=windows_1.next();!windows_1_1.done;windows_1_1=windows_1.next()){var window_1=windows_1_1.value;window_1.next(value);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(windows_1_1&&!windows_1_1.done&&(_a=windows_1.return))_a.call(windows_1);}finally{if(e_1)throw e_1.error;}}var c=count-windowSize+1;if(c>=0&&c%startEvery===0){windows.shift().complete();}if(++count%startEvery===0){var window_2=new Subject();windows.push(window_2);subscriber.next(window_2.asObservable());}},function(){while(windows.length>0){windows.shift().complete();}subscriber.complete();},function(err){while(windows.length>0){windows.shift().error(err);}subscriber.error(err);},function(){starts=null;windows=null;}));});}","map":{"version":3,"names":["Subject","operate","createOperatorSubscriber","windowCount","windowSize","startWindowEvery","startEvery","source","subscriber","windows","starts","count","next","asObservable","subscribe","value","windows_1","__values","windows_1_1","done","window_1","c","shift","complete","window_2","push","length","err","error"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/windowCount.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowCount.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * ## Examples\n *\n * Ignore every 3rd click event, starting from the first one\n *\n * ```ts\n * import { fromEvent, windowCount, map, skip, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(3),\n *   map(win => win.pipe(skip(1))), // skip first of every 3 clicks\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Ignore every 3rd click event, starting from the third one\n *\n * ```ts\n * import { fromEvent, windowCount, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(2, 3),\n *   mergeAll() // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return A function that returns an Observable of windows, which in turn are\n * Observable of values.\n */\nexport function windowCount<T>(windowSize: number, startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  const startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n\n  return operate((source, subscriber) => {\n    let windows = [new Subject<T>()];\n    let starts: number[] = [];\n    let count = 0;\n\n    // Open the first window.\n    subscriber.next(windows[0].asObservable());\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Emit the value through all current windows.\n          // We don't need to create a new window yet, we\n          // do that as soon as we close one.\n          for (const window of windows) {\n            window.next(value);\n          }\n          // Here we're using the size of the window array to figure\n          // out if the oldest window has emitted enough values. We can do this\n          // because the size of the window array is a function of the values\n          // seen by the subscription. If it's time to close it, we complete\n          // it and remove it.\n          const c = count - windowSize + 1;\n          if (c >= 0 && c % startEvery === 0) {\n            windows.shift()!.complete();\n          }\n\n          // Look to see if the next count tells us it's time to open a new window.\n          // TODO: We need to figure out if this really makes sense. We're technically\n          // emitting windows *before* we have a value to emit them for. It's probably\n          // more expected that we should be emitting the window when the start\n          // count is reached -- not before.\n          if (++count % startEvery === 0) {\n            const window = new Subject<T>();\n            windows.push(window);\n            subscriber.next(window.asObservable());\n          }\n        },\n        () => {\n          while (windows.length > 0) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        (err) => {\n          while (windows.length > 0) {\n            windows.shift()!.error(err);\n          }\n          subscriber.error(err);\n        },\n        () => {\n          starts = null!;\n          windows = null!;\n        }\n      )\n    );\n  });\n}\n"],"mappings":"4BACA,OAASA,OAAO,KAAQ,YAAY,CAEpC,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAgE/D,MAAM,SAAU,CAAAC,WAAWA,CAAIC,UAAkB,CAAEC,gBAA4B,EAA5B,GAAAA,gBAAA,WAAAA,gBAAA,EAA4B,EAC7E,GAAM,CAAAC,UAAU,CAAGD,gBAAgB,CAAG,CAAC,CAAGA,gBAAgB,CAAGD,UAAU,CAEvE,MAAO,CAAAH,OAAO,CAAC,SAACM,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,OAAO,CAAG,CAAC,GAAI,CAAAT,OAAO,EAAK,CAAC,CAChC,GAAI,CAAAU,MAAM,CAAa,EAAE,CACzB,GAAI,CAAAC,KAAK,CAAG,CAAC,CAGbH,UAAU,CAACI,IAAI,CAACH,OAAO,CAAC,CAAC,CAAC,CAACI,YAAY,EAAE,CAAC,CAE1CN,MAAM,CAACO,SAAS,CACdZ,wBAAwB,CACtBM,UAAU,CACV,SAACO,KAAQ,E,eAIP,IAAqB,IAAAC,SAAA,CAAAC,QAAA,CAAAR,OAAO,EAAAS,WAAA,CAAAF,SAAA,CAAAJ,IAAA,IAAAM,WAAA,CAAAC,IAAA,CAAAD,WAAA,CAAAF,SAAA,CAAAJ,IAAA,GAAE,CAAzB,GAAM,CAAAQ,QAAM,CAAAF,WAAA,CAAAH,KAAA,CACfK,QAAM,CAACR,IAAI,CAACG,KAAK,CAAC,C,4JAOpB,GAAM,CAAAM,CAAC,CAAGV,KAAK,CAAGP,UAAU,CAAG,CAAC,CAChC,GAAIiB,CAAC,EAAI,CAAC,EAAIA,CAAC,CAAGf,UAAU,GAAK,CAAC,CAAE,CAClCG,OAAO,CAACa,KAAK,EAAG,CAACC,QAAQ,EAAE,C,CAQ7B,GAAI,EAAEZ,KAAK,CAAGL,UAAU,GAAK,CAAC,CAAE,CAC9B,GAAM,CAAAkB,QAAM,CAAG,GAAI,CAAAxB,OAAO,EAAK,CAC/BS,OAAO,CAACgB,IAAI,CAACD,QAAM,CAAC,CACpBhB,UAAU,CAACI,IAAI,CAACY,QAAM,CAACX,YAAY,EAAE,CAAC,C,CAE1C,CAAC,CACD,WACE,MAAOJ,OAAO,CAACiB,MAAM,CAAG,CAAC,CAAE,CACzBjB,OAAO,CAACa,KAAK,EAAG,CAACC,QAAQ,EAAE,C,CAE7Bf,UAAU,CAACe,QAAQ,EAAE,CACvB,CAAC,CACD,SAACI,GAAG,EACF,MAAOlB,OAAO,CAACiB,MAAM,CAAG,CAAC,CAAE,CACzBjB,OAAO,CAACa,KAAK,EAAG,CAACM,KAAK,CAACD,GAAG,CAAC,C,CAE7BnB,UAAU,CAACoB,KAAK,CAACD,GAAG,CAAC,CACvB,CAAC,CACD,WACEjB,MAAM,CAAG,IAAK,CACdD,OAAO,CAAG,IAAK,CACjB,CAAC,CACF,CACF,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}