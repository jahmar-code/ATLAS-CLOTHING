{"ast":null,"code":"import{map}from'./map';import{innerFrom}from'../observable/innerFrom';import{operate}from'../util/lift';import{mergeInternals}from'./mergeInternals';import{isFunction}from'../util/isFunction';export function mergeMap(project,resultSelector,concurrent){if(concurrent===void 0){concurrent=Infinity;}if(isFunction(resultSelector)){return mergeMap(function(a,i){return map(function(b,ii){return resultSelector(a,b,i,ii);})(innerFrom(project(a,i)));},concurrent);}else if(typeof resultSelector==='number'){concurrent=resultSelector;}return operate(function(source,subscriber){return mergeInternals(source,subscriber,project,concurrent);});}","map":{"version":3,"names":["map","innerFrom","operate","mergeInternals","isFunction","mergeMap","project","resultSelector","concurrent","Infinity","a","i","b","ii","source","subscriber"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/mergeMap.ts"],"sourcesContent":["import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n"],"mappings":"AACA,OAASA,GAAG,KAAQ,OAAO,CAC3B,OAASC,SAAS,KAAQ,yBAAyB,CACnD,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,cAAc,KAAQ,kBAAkB,CACjD,OAASC,UAAU,KAAQ,oBAAoB,CA6E/C,MAAM,SAAU,CAAAC,QAAQA,CACtBC,OAAuC,CACvCC,cAAwH,CACxHC,UAA6B,EAA7B,GAAAA,UAAA,WAAAA,UAAA,CAAAC,QAA6B,EAE7B,GAAIL,UAAU,CAACG,cAAc,CAAC,CAAE,CAE9B,MAAO,CAAAF,QAAQ,CAAC,SAACK,CAAC,CAAEC,CAAC,EAAK,OAAAX,GAAG,CAAC,SAACY,CAAM,CAAEC,EAAU,EAAK,OAAAN,cAAc,CAACG,CAAC,CAAEE,CAAC,CAAED,CAAC,CAAEE,EAAE,CAAC,CAA3B,CAA2B,CAAC,CAACZ,SAAS,CAACK,OAAO,CAACI,CAAC,CAAEC,CAAC,CAAC,CAAC,CAAC,CAAlF,CAAkF,CAAEH,UAAU,CAAC,C,CAC1H,IAAM,IAAI,MAAO,CAAAD,cAAc,GAAK,QAAQ,CAAE,CAC7CC,UAAU,CAAGD,cAAc,C,CAG7B,MAAO,CAAAL,OAAO,CAAC,SAACY,MAAM,CAAEC,UAAU,EAAK,OAAAZ,cAAc,CAACW,MAAM,CAAEC,UAAU,CAAET,OAAO,CAAEE,UAAU,CAAC,CAAvD,CAAuD,CAAC,CACjG"},"metadata":{},"sourceType":"module","externalDependencies":[]}