{"ast":null,"code":"import{__read,__spreadArray}from\"tslib\";import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';import{innerFrom}from'../observable/innerFrom';import{identity}from'../util/identity';import{noop}from'../util/noop';import{popResultSelector}from'../util/args';export function withLatestFrom(){var inputs=[];for(var _i=0;_i<arguments.length;_i++){inputs[_i]=arguments[_i];}var project=popResultSelector(inputs);return operate(function(source,subscriber){var len=inputs.length;var otherValues=new Array(len);var hasValue=inputs.map(function(){return false;});var ready=false;var _loop_1=function _loop_1(i){innerFrom(inputs[i]).subscribe(createOperatorSubscriber(subscriber,function(value){otherValues[i]=value;if(!ready&&!hasValue[i]){hasValue[i]=true;(ready=hasValue.every(identity))&&(hasValue=null);}},noop));};for(var i=0;i<len;i++){_loop_1(i);}source.subscribe(createOperatorSubscriber(subscriber,function(value){if(ready){var values=__spreadArray([value],__read(otherValues));subscriber.next(project?project.apply(void 0,__spreadArray([],__read(values))):values);}}));});}","map":{"version":3,"names":["operate","createOperatorSubscriber","innerFrom","identity","noop","popResultSelector","withLatestFrom","inputs","_i","arguments","length","project","source","subscriber","len","otherValues","Array","hasValue","map","ready","i","subscribe","value","every","values","__spreadArray","__read","next","apply"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/withLatestFrom.ts"],"sourcesContent":["import { OperatorFunction, ObservableInputTuple } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\n\nexport function withLatestFrom<T, O extends unknown[]>(...inputs: [...ObservableInputTuple<O>]): OperatorFunction<T, [T, ...O]>;\n\nexport function withLatestFrom<T, O extends unknown[], R>(\n  ...inputs: [...ObservableInputTuple<O>, (...value: [T, ...O]) => R]\n): OperatorFunction<T, R>;\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n *\n * On every click event, emit an array with the latest timer event plus the click event\n *\n * ```ts\n * import { fromEvent, interval, withLatestFrom } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return A function that returns an Observable of projected values from the\n * most recent values from each input Observable, or an array of the most\n * recent values from each input Observable.\n */\nexport function withLatestFrom<T, R>(...inputs: any[]): OperatorFunction<T, R | any[]> {\n  const project = popResultSelector(inputs) as ((...args: any[]) => R) | undefined;\n\n  return operate((source, subscriber) => {\n    const len = inputs.length;\n    const otherValues = new Array(len);\n    // An array of whether or not the other sources have emitted. Matched with them by index.\n    // TODO: At somepoint, we should investigate the performance implications here, and look\n    // into using a `Set()` and checking the `size` to see if we're ready.\n    let hasValue = inputs.map(() => false);\n    // Flipped true when we have at least one value from all other sources and\n    // we are ready to start emitting values.\n    let ready = false;\n\n    // Other sources. Note that here we are not checking `subscriber.closed`,\n    // this causes all inputs to be subscribed to, even if nothing can be emitted\n    // from them. This is an important distinction because subscription constitutes\n    // a side-effect.\n    for (let i = 0; i < len; i++) {\n      innerFrom(inputs[i]).subscribe(\n        createOperatorSubscriber(\n          subscriber,\n          (value) => {\n            otherValues[i] = value;\n            if (!ready && !hasValue[i]) {\n              // If we're not ready yet, flag to show this observable has emitted.\n              hasValue[i] = true;\n              // Intentionally terse code.\n              // If all of our other observables have emitted, set `ready` to `true`,\n              // so we know we can start emitting values, then clean up the `hasValue` array,\n              // because we don't need it anymore.\n              (ready = hasValue.every(identity)) && (hasValue = null!);\n            }\n          },\n          // Completing one of the other sources has\n          // no bearing on the completion of our result.\n          noop\n        )\n      );\n    }\n\n    // Source subscription\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        if (ready) {\n          // We have at least one value from the other sources. Go ahead and emit.\n          const values = [value, ...otherValues];\n          subscriber.next(project ? project(...values) : values);\n        }\n      })\n    );\n  });\n}\n"],"mappings":"wCACA,OAASA,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,SAAS,KAAQ,yBAAyB,CACnD,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,OAASC,IAAI,KAAQ,cAAc,CACnC,OAASC,iBAAiB,KAAQ,cAAc,CAmDhD,MAAM,SAAU,CAAAC,cAAcA,CAAA,EAAO,IAAAC,MAAA,I,IAAA,IAAAC,EAAA,EAAgB,CAAhBA,EAAA,CAAAC,SAAA,CAAAC,MAAgB,CAAhBF,EAAA,EAAgB,EAAhBD,MAAA,CAAAC,EAAA,EAAAC,SAAA,CAAAD,EAAA,E,CACnC,GAAM,CAAAG,OAAO,CAAGN,iBAAiB,CAACE,MAAM,CAAwC,CAEhF,MAAO,CAAAP,OAAO,CAAC,SAACY,MAAM,CAAEC,UAAU,EAChC,GAAM,CAAAC,GAAG,CAAGP,MAAM,CAACG,MAAM,CACzB,GAAM,CAAAK,WAAW,CAAG,GAAI,CAAAC,KAAK,CAACF,GAAG,CAAC,CAIlC,GAAI,CAAAG,QAAQ,CAAGV,MAAM,CAACW,GAAG,CAAC,WAAM,YAAK,CAAL,CAAK,CAAC,CAGtC,GAAI,CAAAC,KAAK,CAAG,KAAK,C,6BAMRC,CAAC,EACRlB,SAAS,CAACK,MAAM,CAACa,CAAC,CAAC,CAAC,CAACC,SAAS,CAC5BpB,wBAAwB,CACtBY,UAAU,CACV,SAACS,KAAK,EACJP,WAAW,CAACK,CAAC,CAAC,CAAGE,KAAK,CACtB,GAAI,CAACH,KAAK,EAAI,CAACF,QAAQ,CAACG,CAAC,CAAC,CAAE,CAE1BH,QAAQ,CAACG,CAAC,CAAC,CAAG,IAAI,CAKlB,CAACD,KAAK,CAAGF,QAAQ,CAACM,KAAK,CAACpB,QAAQ,CAAC,IAAMc,QAAQ,CAAG,IAAK,CAAC,C,CAE5D,CAAC,CAGDb,IAAI,CACL,CACF,C,EApBH,IAAK,GAAI,CAAAgB,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGN,GAAG,CAAEM,CAAC,EAAE,E,QAAnBA,CAAC,E,CAwBVR,MAAM,CAACS,SAAS,CACdpB,wBAAwB,CAACY,UAAU,CAAE,SAACS,KAAK,EACzC,GAAIH,KAAK,CAAE,CAET,GAAM,CAAAK,MAAM,CAAAC,aAAA,EAAIH,KAAK,EAAAI,MAAA,CAAKX,WAAW,EAAC,CACtCF,UAAU,CAACc,IAAI,CAAChB,OAAO,CAAGA,OAAO,CAAAiB,KAAA,QAAAH,aAAA,IAAAC,MAAA,CAAIF,MAAM,IAAIA,MAAM,CAAC,C,CAE1D,CAAC,CAAC,CACH,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}