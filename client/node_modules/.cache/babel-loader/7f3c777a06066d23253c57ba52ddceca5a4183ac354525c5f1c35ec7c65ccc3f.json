{"ast":null,"code":"import{__extends}from\"tslib\";import{Observable}from'../Observable';import{Subscription}from'../Subscription';import{refCount as higherOrderRefCount}from'../operators/refCount';import{createOperatorSubscriber}from'../operators/OperatorSubscriber';import{hasLift}from'../util/lift';var ConnectableObservable=function(_super){__extends(ConnectableObservable,_super);function ConnectableObservable(source,subjectFactory){var _this=_super.call(this)||this;_this.source=source;_this.subjectFactory=subjectFactory;_this._subject=null;_this._refCount=0;_this._connection=null;if(hasLift(source)){_this.lift=source.lift;}return _this;}ConnectableObservable.prototype._subscribe=function(subscriber){return this.getSubject().subscribe(subscriber);};ConnectableObservable.prototype.getSubject=function(){var subject=this._subject;if(!subject||subject.isStopped){this._subject=this.subjectFactory();}return this._subject;};ConnectableObservable.prototype._teardown=function(){this._refCount=0;var _connection=this._connection;this._subject=this._connection=null;_connection===null||_connection===void 0?void 0:_connection.unsubscribe();};ConnectableObservable.prototype.connect=function(){var _this=this;var connection=this._connection;if(!connection){connection=this._connection=new Subscription();var subject_1=this.getSubject();connection.add(this.source.subscribe(createOperatorSubscriber(subject_1,undefined,function(){_this._teardown();subject_1.complete();},function(err){_this._teardown();subject_1.error(err);},function(){return _this._teardown();})));if(connection.closed){this._connection=null;connection=Subscription.EMPTY;}}return connection;};ConnectableObservable.prototype.refCount=function(){return higherOrderRefCount()(this);};return ConnectableObservable;}(Observable);export{ConnectableObservable};","map":{"version":3,"names":["Observable","Subscription","refCount","higherOrderRefCount","createOperatorSubscriber","hasLift","ConnectableObservable","_super","__extends","source","subjectFactory","_this","call","_subject","_refCount","_connection","lift","prototype","_subscribe","subscriber","getSubject","subscribe","subject","isStopped","_teardown","unsubscribe","connect","connection","subject_1","add","undefined","complete","err","error","closed","EMPTY"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/observable/ConnectableObservable.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          createOperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n"],"mappings":"6BACA,OAASA,UAAU,KAAQ,eAAe,CAE1C,OAASC,YAAY,KAAQ,iBAAiB,CAC9C,OAASC,QAAQ,GAAI,CAAAC,mBAAmB,KAAQ,uBAAuB,CACvE,OAASC,wBAAwB,KAAQ,iCAAiC,CAC1E,OAASC,OAAO,KAAQ,cAAc,CAStC,IAAAC,qBAAA,UAAAC,MAAA,EAA8CC,SAAA,CAAAF,qBAAA,CAAAC,MAAA,EAgB5C,SAAAD,sBAAmBG,MAAqB,CAAYC,cAAgC,EAApF,IAAAC,KAAA,CACEJ,MAAA,CAAAK,IAAA,MAAO,OADUD,KAAA,CAAAF,MAAM,CAANA,MAAM,CAA2BE,KAAA,CAAAD,cAAc,CAAdA,cAAc,CAfxDC,KAAA,CAAAE,QAAQ,CAAsB,IAAI,CAClCF,KAAA,CAAAG,SAAS,CAAW,CAAC,CACrBH,KAAA,CAAAI,WAAW,CAAwB,IAAI,CAkB/C,GAAIV,OAAO,CAACI,MAAM,CAAC,CAAE,CACnBE,KAAI,CAACK,IAAI,CAAGP,MAAM,CAACO,IAAI,C,cAE3B,CAGUV,qBAAA,CAAAW,SAAA,CAAAC,UAAU,CAApB,SAAqBC,UAAyB,EAC5C,MAAO,KAAI,CAACC,UAAU,EAAE,CAACC,SAAS,CAACF,UAAU,CAAC,CAChD,CAAC,CAESb,qBAAA,CAAAW,SAAA,CAAAG,UAAU,CAApB,WACE,GAAM,CAAAE,OAAO,CAAG,IAAI,CAACT,QAAQ,CAC7B,GAAI,CAACS,OAAO,EAAIA,OAAO,CAACC,SAAS,CAAE,CACjC,IAAI,CAACV,QAAQ,CAAG,IAAI,CAACH,cAAc,EAAE,C,CAEvC,MAAO,KAAI,CAACG,QAAS,CACvB,CAAC,CAESP,qBAAA,CAAAW,SAAA,CAAAO,SAAS,CAAnB,WACE,IAAI,CAACV,SAAS,CAAG,CAAC,CACV,IAAAC,WAAW,CAAK,IAAI,CAAAA,WAAT,CACnB,IAAI,CAACF,QAAQ,CAAG,IAAI,CAACE,WAAW,CAAG,IAAI,CACvCA,WAAW,SAAXA,WAAW,iBAAXA,WAAW,CAAEU,WAAW,EAAE,CAC5B,CAAC,CAMDnB,qBAAA,CAAAW,SAAA,CAAAS,OAAO,CAAP,eAAAf,KAAA,MACE,GAAI,CAAAgB,UAAU,CAAG,IAAI,CAACZ,WAAW,CACjC,GAAI,CAACY,UAAU,CAAE,CACfA,UAAU,CAAG,IAAI,CAACZ,WAAW,CAAG,GAAI,CAAAd,YAAY,EAAE,CAClD,GAAM,CAAA2B,SAAO,CAAG,IAAI,CAACR,UAAU,EAAE,CACjCO,UAAU,CAACE,GAAG,CACZ,IAAI,CAACpB,MAAM,CAACY,SAAS,CACnBjB,wBAAwB,CACtBwB,SAAc,CACdE,SAAS,CACT,WACEnB,KAAI,CAACa,SAAS,EAAE,CAChBI,SAAO,CAACG,QAAQ,EAAE,CACpB,CAAC,CACD,SAACC,GAAG,EACFrB,KAAI,CAACa,SAAS,EAAE,CAChBI,SAAO,CAACK,KAAK,CAACD,GAAG,CAAC,CACpB,CAAC,CACD,WAAM,OAAArB,KAAI,CAACa,SAAS,EAAE,CAAhB,CAAgB,CACvB,CACF,CACF,CAED,GAAIG,UAAU,CAACO,MAAM,CAAE,CACrB,IAAI,CAACnB,WAAW,CAAG,IAAI,CACvBY,UAAU,CAAG1B,YAAY,CAACkC,KAAK,C,EAGnC,MAAO,CAAAR,UAAU,CACnB,CAAC,CAMDrB,qBAAA,CAAAW,SAAA,CAAAf,QAAQ,CAAR,WACE,MAAO,CAAAC,mBAAmB,EAAE,CAAC,IAAI,CAAkB,CACrD,CAAC,CACH,OAAAG,qBAAC,CAAD,CAAC,CAxF6CN,UAAU,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}