{"ast":null,"code":"import{__read,__spreadArray}from\"tslib\";import{isScheduler}from'../util/isScheduler';import{Observable}from'../Observable';import{subscribeOn}from'../operators/subscribeOn';import{mapOneOrManyArgs}from'../util/mapOneOrManyArgs';import{observeOn}from'../operators/observeOn';import{AsyncSubject}from'../AsyncSubject';export function bindCallbackInternals(isNodeStyle,callbackFunc,resultSelector,scheduler){if(resultSelector){if(isScheduler(resultSelector)){scheduler=resultSelector;}else{return function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}return bindCallbackInternals(isNodeStyle,callbackFunc,scheduler).apply(this,args).pipe(mapOneOrManyArgs(resultSelector));};}}if(scheduler){return function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}return bindCallbackInternals(isNodeStyle,callbackFunc).apply(this,args).pipe(subscribeOn(scheduler),observeOn(scheduler));};}return function(){var _this=this;var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}var subject=new AsyncSubject();var uninitialized=true;return new Observable(function(subscriber){var subs=subject.subscribe(subscriber);if(uninitialized){uninitialized=false;var isAsync_1=false;var isComplete_1=false;callbackFunc.apply(_this,__spreadArray(__spreadArray([],__read(args)),[function(){var results=[];for(var _i=0;_i<arguments.length;_i++){results[_i]=arguments[_i];}if(isNodeStyle){var err=results.shift();if(err!=null){subject.error(err);return;}}subject.next(1<results.length?results:results[0]);isComplete_1=true;if(isAsync_1){subject.complete();}}]));if(isComplete_1){subject.complete();}isAsync_1=true;}return subs;});};}","map":{"version":3,"names":["isScheduler","Observable","subscribeOn","mapOneOrManyArgs","observeOn","AsyncSubject","bindCallbackInternals","isNodeStyle","callbackFunc","resultSelector","scheduler","args","_i","arguments","length","apply","pipe","_this","subject","uninitialized","subscriber","subs","subscribe","isAsync_1","isComplete_1","__spreadArray","__read","results","err","shift","error","next","complete"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/observable/bindCallbackInternals.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { observeOn } from '../operators/observeOn';\nimport { AsyncSubject } from '../AsyncSubject';\n\nexport function bindCallbackInternals(\n  isNodeStyle: boolean,\n  callbackFunc: any,\n  resultSelector?: any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<unknown> {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // The user provided a result selector.\n      return function (this: any, ...args: any[]) {\n        return (bindCallbackInternals(isNodeStyle, callbackFunc, scheduler) as any)\n          .apply(this, args)\n          .pipe(mapOneOrManyArgs(resultSelector as any));\n      };\n    }\n  }\n\n  // If a scheduler was passed, use our `subscribeOn` and `observeOn` operators\n  // to compose that behavior for the user.\n  if (scheduler) {\n    return function (this: any, ...args: any[]) {\n      return (bindCallbackInternals(isNodeStyle, callbackFunc) as any)\n        .apply(this, args)\n        .pipe(subscribeOn(scheduler!), observeOn(scheduler!));\n    };\n  }\n\n  return function (this: any, ...args: any[]): Observable<any> {\n    // We're using AsyncSubject, because it emits when it completes,\n    // and it will play the value to all late-arriving subscribers.\n    const subject = new AsyncSubject<any>();\n\n    // If this is true, then we haven't called our function yet.\n    let uninitialized = true;\n    return new Observable((subscriber) => {\n      // Add our subscriber to the subject.\n      const subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        // We're going to execute the bound function\n        // This bit is to signal that we are hitting the callback asynchronously.\n        // Because we don't have any anti-\"Zalgo\" guarantees with whatever\n        // function we are handed, we use this bit to figure out whether or not\n        // we are getting hit in a callback synchronously during our call.\n        let isAsync = false;\n\n        // This is used to signal that the callback completed synchronously.\n        let isComplete = false;\n\n        // Call our function that has a callback. If at any time during this\n        // call, an error is thrown, it will be caught by the Observable\n        // subscription process and sent to the consumer.\n        callbackFunc.apply(\n          // Pass the appropriate `this` context.\n          this,\n          [\n            // Pass the arguments.\n            ...args,\n            // And our callback handler.\n            (...results: any[]) => {\n              if (isNodeStyle) {\n                // If this is a node callback, shift the first value off of the\n                // results and check it, as it is the error argument. By shifting,\n                // we leave only the argument(s) we want to pass to the consumer.\n                const err = results.shift();\n                if (err != null) {\n                  subject.error(err);\n                  // If we've errored, we can stop processing this function\n                  // as there's nothing else to do. Just return to escape.\n                  return;\n                }\n              }\n              // If we have one argument, notify the consumer\n              // of it as a single value, otherwise, if there's more than one, pass\n              // them as an array. Note that if there are no arguments, `undefined`\n              // will be emitted.\n              subject.next(1 < results.length ? results : results[0]);\n              // Flip this flag, so we know we can complete it in the synchronous\n              // case below.\n              isComplete = true;\n              // If we're not asynchronous, we need to defer the `complete` call\n              // until after the call to the function is over. This is because an\n              // error could be thrown in the function after it calls our callback,\n              // and if that is the case, if we complete here, we are unable to notify\n              // the consumer than an error occurred.\n              if (isAsync) {\n                subject.complete();\n              }\n            },\n          ]\n        );\n        // If we flipped `isComplete` during the call, we resolved synchronously,\n        // notify complete, because we skipped it in the callback to wait\n        // to make sure there were no errors during the call.\n        if (isComplete) {\n          subject.complete();\n        }\n\n        // We're no longer synchronous. If the callback is called at this point\n        // we can notify complete on the spot.\n        isAsync = true;\n      }\n\n      // Return the subscription from adding our subscriber to the subject.\n      return subs;\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}