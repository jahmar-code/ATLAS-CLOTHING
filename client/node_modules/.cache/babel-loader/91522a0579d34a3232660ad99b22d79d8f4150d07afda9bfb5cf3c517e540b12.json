{"ast":null,"code":"import{Subject}from'../Subject';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';import{noop}from'../util/noop';import{innerFrom}from'../observable/innerFrom';export function window(windowBoundaries){return operate(function(source,subscriber){var windowSubject=new Subject();subscriber.next(windowSubject.asObservable());var errorHandler=function errorHandler(err){windowSubject.error(err);subscriber.error(err);};source.subscribe(createOperatorSubscriber(subscriber,function(value){return windowSubject===null||windowSubject===void 0?void 0:windowSubject.next(value);},function(){windowSubject.complete();subscriber.complete();},errorHandler));innerFrom(windowBoundaries).subscribe(createOperatorSubscriber(subscriber,function(){windowSubject.complete();subscriber.next(windowSubject=new Subject());},noop,errorHandler));return function(){windowSubject===null||windowSubject===void 0?void 0:windowSubject.unsubscribe();windowSubject=null;};});}","map":{"version":3,"names":["Subject","operate","createOperatorSubscriber","noop","innerFrom","window","windowBoundaries","source","subscriber","windowSubject","next","asObservable","errorHandler","err","error","subscribe","value","complete","unsubscribe"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/window.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction, ObservableInput } from '../types';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * `windowBoundaries` emits an item. `windowBoundaries` can be any type that\n * `ObservableInput` accepts. It internally gets converted to an Observable.\n * Because each window is an Observable, the output is a higher-order Observable.\n *\n * ## Example\n *\n * In every window of 1 second each, emit at most 2 click events\n *\n * ```ts\n * import { fromEvent, interval, window, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const sec = interval(1000);\n * const result = clicks.pipe(\n *   window(sec),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param windowBoundaries An `ObservableInput` that completes the\n * previous window and starts a new window.\n * @return A function that returns an Observable of windows, which are\n * Observables emitting values of the source Observable.\n */\nexport function window<T>(windowBoundaries: ObservableInput<any>): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    let windowSubject: Subject<T> = new Subject<T>();\n\n    subscriber.next(windowSubject.asObservable());\n\n    const errorHandler = (err: any) => {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    // Subscribe to our source\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => windowSubject?.next(value),\n        () => {\n          windowSubject.complete();\n          subscriber.complete();\n        },\n        errorHandler\n      )\n    );\n\n    // Subscribe to the window boundaries.\n    innerFrom(windowBoundaries).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          windowSubject.complete();\n          subscriber.next((windowSubject = new Subject()));\n        },\n        noop,\n        errorHandler\n      )\n    );\n\n    return () => {\n      // Unsubscribing the subject ensures that anyone who has captured\n      // a reference to this window that tries to use it after it can\n      // no longer get values from the source will get an ObjectUnsubscribedError.\n      windowSubject?.unsubscribe();\n      windowSubject = null!;\n    };\n  });\n}\n"],"mappings":"AAEA,OAASA,OAAO,KAAQ,YAAY,CACpC,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAC/D,OAASC,IAAI,KAAQ,cAAc,CACnC,OAASC,SAAS,KAAQ,yBAAyB,CA8CnD,MAAM,SAAU,CAAAC,MAAMA,CAAIC,gBAAsC,EAC9D,MAAO,CAAAL,OAAO,CAAC,SAACM,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,aAAa,CAAe,GAAI,CAAAT,OAAO,EAAK,CAEhDQ,UAAU,CAACE,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE,CAAC,CAE7C,GAAM,CAAAC,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAIC,GAAQ,EAC5BJ,aAAa,CAACK,KAAK,CAACD,GAAG,CAAC,CACxBL,UAAU,CAACM,KAAK,CAACD,GAAG,CAAC,CACvB,CAAC,CAGDN,MAAM,CAACQ,SAAS,CACdb,wBAAwB,CACtBM,UAAU,CACV,SAACQ,KAAK,EAAK,OAAAP,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAEC,IAAI,CAACM,KAAK,CAAC,CAA1B,CAA0B,CACrC,WACEP,aAAa,CAACQ,QAAQ,EAAE,CACxBT,UAAU,CAACS,QAAQ,EAAE,CACvB,CAAC,CACDL,YAAY,CACb,CACF,CAGDR,SAAS,CAACE,gBAAgB,CAAC,CAACS,SAAS,CACnCb,wBAAwB,CACtBM,UAAU,CACV,WACEC,aAAa,CAACQ,QAAQ,EAAE,CACxBT,UAAU,CAACE,IAAI,CAAED,aAAa,CAAG,GAAI,CAAAT,OAAO,EAAG,CAAC,CAClD,CAAC,CACDG,IAAI,CACJS,YAAY,CACb,CACF,CAED,MAAO,YAILH,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAES,WAAW,EAAE,CAC5BT,aAAa,CAAG,IAAK,CACvB,CAAC,CACH,CAAC,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}