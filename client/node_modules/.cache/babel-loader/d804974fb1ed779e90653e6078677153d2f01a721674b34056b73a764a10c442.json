{"ast":null,"code":"import{innerFrom}from'../observable/innerFrom';import{executeSchedule}from'../util/executeSchedule';import{createOperatorSubscriber}from'./OperatorSubscriber';export function mergeInternals(source,subscriber,project,concurrent,onBeforeNext,expand,innerSubScheduler,additionalFinalizer){var buffer=[];var active=0;var index=0;var isComplete=false;var checkComplete=function checkComplete(){if(isComplete&&!buffer.length&&!active){subscriber.complete();}};var outerNext=function outerNext(value){return active<concurrent?doInnerSub(value):buffer.push(value);};var doInnerSub=function doInnerSub(value){expand&&subscriber.next(value);active++;var innerComplete=false;innerFrom(project(value,index++)).subscribe(createOperatorSubscriber(subscriber,function(innerValue){onBeforeNext===null||onBeforeNext===void 0?void 0:onBeforeNext(innerValue);if(expand){outerNext(innerValue);}else{subscriber.next(innerValue);}},function(){innerComplete=true;},undefined,function(){if(innerComplete){try{active--;var _loop_1=function _loop_1(){var bufferedValue=buffer.shift();if(innerSubScheduler){executeSchedule(subscriber,innerSubScheduler,function(){return doInnerSub(bufferedValue);});}else{doInnerSub(bufferedValue);}};while(buffer.length&&active<concurrent){_loop_1();}checkComplete();}catch(err){subscriber.error(err);}}}));};source.subscribe(createOperatorSubscriber(subscriber,outerNext,function(){isComplete=true;checkComplete();}));return function(){additionalFinalizer===null||additionalFinalizer===void 0?void 0:additionalFinalizer();};}","map":{"version":3,"names":["innerFrom","executeSchedule","createOperatorSubscriber","mergeInternals","source","subscriber","project","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","index","isComplete","checkComplete","length","complete","outerNext","value","doInnerSub","push","next","innerComplete","subscribe","innerValue","undefined","bufferedValue","shift","err","error"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/mergeInternals.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n"],"mappings":"AACA,OAASA,SAAS,KAAQ,yBAAyB,CAGnD,OAASC,eAAe,KAAQ,yBAAyB,CACzD,OAASC,wBAAwB,KAAQ,sBAAsB,CAe/D,MAAM,SAAU,CAAAC,cAAcA,CAC5BC,MAAqB,CACrBC,UAAyB,CACzBC,OAAwD,CACxDC,UAAkB,CAClBC,YAAsC,CACtCC,MAAgB,CAChBC,iBAAiC,CACjCC,mBAAgC,EAGhC,GAAM,CAAAC,MAAM,CAAQ,EAAE,CAEtB,GAAI,CAAAC,MAAM,CAAG,CAAC,CAEd,GAAI,CAAAC,KAAK,CAAG,CAAC,CAEb,GAAI,CAAAC,UAAU,CAAG,KAAK,CAKtB,GAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAA,CAAG,CAIpB,GAAID,UAAU,EAAI,CAACH,MAAM,CAACK,MAAM,EAAI,CAACJ,MAAM,CAAE,CAC3CR,UAAU,CAACa,QAAQ,EAAE,C,CAEzB,CAAC,CAGD,GAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,KAAQ,EAAK,MAAC,CAAAP,MAAM,CAAGN,UAAU,CAAGc,UAAU,CAACD,KAAK,CAAC,CAAGR,MAAM,CAACU,IAAI,CAACF,KAAK,CAAC,CAA7D,CAA8D,CAE9F,GAAM,CAAAC,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAID,KAAQ,EAI1BX,MAAM,EAAIJ,UAAU,CAACkB,IAAI,CAACH,KAAY,CAAC,CAIvCP,MAAM,EAAE,CAKR,GAAI,CAAAW,aAAa,CAAG,KAAK,CAGzBxB,SAAS,CAACM,OAAO,CAACc,KAAK,CAAEN,KAAK,EAAE,CAAC,CAAC,CAACW,SAAS,CAC1CvB,wBAAwB,CACtBG,UAAU,CACV,SAACqB,UAAU,EAGTlB,YAAY,SAAZA,YAAY,iBAAZA,YAAY,CAAGkB,UAAU,CAAC,CAE1B,GAAIjB,MAAM,CAAE,CAGVU,SAAS,CAACO,UAAiB,CAAC,C,CAC7B,IAAM,CAELrB,UAAU,CAACkB,IAAI,CAACG,UAAU,CAAC,C,CAE/B,CAAC,CACD,WAGEF,aAAa,CAAG,IAAI,CACtB,CAAC,CAEDG,SAAS,CACT,WAIE,GAAIH,aAAa,CAAE,CAKjB,GAAI,CAIFX,MAAM,EAAE,C,+BAMN,GAAM,CAAAe,aAAa,CAAGhB,MAAM,CAACiB,KAAK,EAAG,CAIrC,GAAInB,iBAAiB,CAAE,CACrBT,eAAe,CAACI,UAAU,CAAEK,iBAAiB,CAAE,WAAM,OAAAW,UAAU,CAACO,aAAa,CAAC,CAAzB,CAAyB,CAAC,C,CAChF,IAAM,CACLP,UAAU,CAACO,aAAa,CAAC,C,GAR7B,MAAOhB,MAAM,CAACK,MAAM,EAAIJ,MAAM,CAAGN,UAAU,E,WAY3CS,aAAa,EAAE,C,CACf,MAAOc,GAAG,CAAE,CACZzB,UAAU,CAAC0B,KAAK,CAACD,GAAG,CAAC,C,EAG3B,CAAC,CACF,CACF,CACH,CAAC,CAGD1B,MAAM,CAACqB,SAAS,CACdvB,wBAAwB,CAACG,UAAU,CAAEc,SAAS,CAAE,WAE9CJ,UAAU,CAAG,IAAI,CACjBC,aAAa,EAAE,CACjB,CAAC,CAAC,CACH,CAID,MAAO,YACLL,mBAAmB,SAAnBA,mBAAmB,iBAAnBA,mBAAmB,EAAI,CACzB,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}