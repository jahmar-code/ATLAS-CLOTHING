{"ast":null,"code":"import{asyncScheduler}from'../scheduler/async';import{sample}from'./sample';import{interval}from'../observable/interval';export function sampleTime(period,scheduler){if(scheduler===void 0){scheduler=asyncScheduler;}return sample(interval(period,scheduler));}","map":{"version":3,"names":["asyncScheduler","sample","interval","sampleTime","period","scheduler"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/sampleTime.ts"],"sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { sample } from './sample';\nimport { interval } from '../observable/interval';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * ![](sampleTime.png)\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * ## Example\n *\n * Every second, emit the most recent click at most once\n *\n * ```ts\n * import { fromEvent, sampleTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(sampleTime(1000));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the sampling.\n * @return A function that returns an Observable that emits the results of\n * sampling the values emitted by the source Observable at the specified time\n * interval.\n */\nexport function sampleTime<T>(period: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return sample(interval(period, scheduler));\n}\n"],"mappings":"AAAA,OAASA,cAAc,KAAQ,oBAAoB,CAEnD,OAASC,MAAM,KAAQ,UAAU,CACjC,OAASC,QAAQ,KAAQ,wBAAwB,CA6CjD,MAAM,SAAU,CAAAC,UAAUA,CAAIC,MAAc,CAAEC,SAAyC,EAAzC,GAAAA,SAAA,WAAAA,SAAA,CAAAL,cAAyC,EACrF,MAAO,CAAAC,MAAM,CAACC,QAAQ,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAC,CAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}