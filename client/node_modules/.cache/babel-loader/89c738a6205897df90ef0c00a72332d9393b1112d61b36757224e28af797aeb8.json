{"ast":null,"code":"import{asyncScheduler}from'../scheduler/async';import{operate}from'../util/lift';import{createOperatorSubscriber}from'./OperatorSubscriber';export function timeInterval(scheduler){if(scheduler===void 0){scheduler=asyncScheduler;}return operate(function(source,subscriber){var last=scheduler.now();source.subscribe(createOperatorSubscriber(subscriber,function(value){var now=scheduler.now();var interval=now-last;last=now;subscriber.next(new TimeInterval(value,interval));}));});}var TimeInterval=function(){function TimeInterval(value,interval){this.value=value;this.interval=interval;}return TimeInterval;}();export{TimeInterval};","map":{"version":3,"names":["asyncScheduler","operate","createOperatorSubscriber","timeInterval","scheduler","source","subscriber","last","now","subscribe","value","interval","next","TimeInterval"],"sources":["/Users/jawaadahmar/Desktop/atlas-clothing/client/src/thistle-lion/node_modules/rxjs/src/internal/operators/timeInterval.ts"],"sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { SchedulerLike, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits an object containing the current value, and the time that has\n * passed between emitting the current value and the previous value, which is\n * calculated by using the provided `scheduler`'s `now()` method to retrieve\n * the current time at each emission, then calculating the difference. The `scheduler`\n * defaults to {@link asyncScheduler}, so by default, the `interval` will be in\n * milliseconds.\n *\n * <span class=\"informal\">Convert an Observable that emits items into one that\n * emits indications of the amount of time elapsed between those emissions.</span>\n *\n * ![](timeInterval.png)\n *\n * ## Example\n *\n * Emit interval between current value with the last value\n *\n * ```ts\n * import { interval, timeInterval } from 'rxjs';\n *\n * const seconds = interval(1000);\n *\n * seconds\n *   .pipe(timeInterval())\n *   .subscribe(value => console.log(value));\n *\n * // NOTE: The values will never be this precise,\n * // intervals created with `interval` or `setInterval`\n * // are non-deterministic.\n *\n * // { value: 0, interval: 1000 }\n * // { value: 1, interval: 1000 }\n * // { value: 2, interval: 1000 }\n * ```\n *\n * @param {SchedulerLike} [scheduler] Scheduler used to get the current time.\n * @return A function that returns an Observable that emits information about\n * value and interval.\n */\nexport function timeInterval<T>(scheduler: SchedulerLike = asyncScheduler): OperatorFunction<T, TimeInterval<T>> {\n  return operate((source, subscriber) => {\n    let last = scheduler.now();\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const now = scheduler.now();\n        const interval = now - last;\n        last = now;\n        subscriber.next(new TimeInterval(value, interval));\n      })\n    );\n  });\n}\n\n// TODO(benlesh): make this an interface, export the interface, but not the implemented class,\n// there's no reason users should be manually creating this type.\n\nexport class TimeInterval<T> {\n  /**\n   * @deprecated Internal implementation detail, do not construct directly. Will be made an interface in v8.\n   */\n  constructor(public value: T, public interval: number) {}\n}\n"],"mappings":"AAAA,OAASA,cAAc,KAAQ,oBAAoB,CAEnD,OAASC,OAAO,KAAQ,cAAc,CACtC,OAASC,wBAAwB,KAAQ,sBAAsB,CAyC/D,MAAM,SAAU,CAAAC,YAAYA,CAAIC,SAAyC,EAAzC,GAAAA,SAAA,WAAAA,SAAA,CAAAJ,cAAyC,EACvE,MAAO,CAAAC,OAAO,CAAC,SAACI,MAAM,CAAEC,UAAU,EAChC,GAAI,CAAAC,IAAI,CAAGH,SAAS,CAACI,GAAG,EAAE,CAC1BH,MAAM,CAACI,SAAS,CACdP,wBAAwB,CAACI,UAAU,CAAE,SAACI,KAAK,EACzC,GAAM,CAAAF,GAAG,CAAGJ,SAAS,CAACI,GAAG,EAAE,CAC3B,GAAM,CAAAG,QAAQ,CAAGH,GAAG,CAAGD,IAAI,CAC3BA,IAAI,CAAGC,GAAG,CACVF,UAAU,CAACM,IAAI,CAAC,GAAI,CAAAC,YAAY,CAACH,KAAK,CAAEC,QAAQ,CAAC,CAAC,CACpD,CAAC,CAAC,CACH,CACH,CAAC,CAAC,CACJ,CAKA,IAAAE,YAAA,YAIE,SAAAA,aAAmBH,KAAQ,CAASC,QAAgB,EAAjC,KAAAD,KAAK,CAALA,KAAK,CAAY,KAAAC,QAAQ,CAARA,QAAQ,CAAW,CACzD,OAAAE,YAAC,CAAD,CAAC,CALD,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}